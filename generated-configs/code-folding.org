** Code Folding
*** Hideshow (Built-in)
#+begin_src emacs-lisp
(use-package hideshow
  :ensure nil
  :diminish hs-minor-mode
  :hook ((prog-mode . hs-minor-mode)
         (eglot-managed-mode . hs-minor-mode))
  :custom
  (hs-hide-comments-when-hiding-all t)
  (hs-allow-nesting t)
  
  :config
  ;; Gruvbox dark theme faces
  (custom-set-faces
   '(hs-face ((t (:background "#504945" :foreground "#a89984" :box (:line-width 1 :color "#665c54")))))
   '(hs-fringe-face ((t (:foreground "#fb4934")))))
  
  ;; Custom overlay display with line counts
  (defun hs-display-code-line-counts (ov)
    "Display line counts for folded regions."
    (when (eq 'code (overlay-get ov 'hs))
      (let* ((nlines (count-lines (overlay-start ov) (overlay-end ov)))
             (info (format " ... (%d lines)" nlines)))
        (overlay-put ov 'display (propertize info 'face 'hs-face)))))
  
  (setq hs-set-up-overlay 'hs-display-code-line-counts)
  
  :bind (("C-c h t" . hs-toggle-hiding)
         ("C-c h h" . hs-hide-block)
         ("C-c h s" . hs-show-block)
         ("C-c h H" . hs-hide-all)
         ("C-c h S" . hs-show-all)))
#+end_src

*** Treesit-fold Integration
#+begin_src emacs-lisp
(use-package treesit-fold
  :after treesit
  :hook ((c-ts-mode c++-ts-mode python-ts-mode json-ts-mode bash-ts-mode) . treesit-fold-mode)
  :custom
  (treesit-fold-summary-show t)
  (treesit-fold-replacement "...")
  
  :config
  ;; Gruvbox dark theme faces
  (custom-set-faces
   '(treesit-fold-replacement-face ((t (:foreground "#a89984" :background "#504945" :box (:line-width 1 :color "#665c54") :weight bold))))
   '(treesit-fold-fringe-face ((t (:foreground "#fb4934")))))
  
  ;; Enhanced summary with line counts
  (defun treesit-fold-summary-with-count (range)
    "Show summary with line count for folded region."
    (let* ((start (car range))
           (end (cdr range))
           (lines (count-lines start end))
           (summary (treesit-fold--get-summary start end)))
      (format "%s (%d lines)" (or summary "...") lines)))
  
  (setq treesit-fold-summary-function #'treesit-fold-summary-with-count)
  
  :bind (("C-c f t" . treesit-fold-toggle)
         ("C-c f h" . treesit-fold-close)
         ("C-c f s" . treesit-fold-open)
         ("C-c f H" . treesit-fold-close-all)
         ("C-c f S" . treesit-fold-open-all)))
#+end_src

*** Eglot Folding Integration
#+begin_src emacs-lisp
;; Eglot folding range support
(defun eglot-folding-range-support-p ()
  "Check if current eglot server supports folding ranges."
  (and (eglot-current-server)
       (eglot--server-capable :foldingRangeProvider)))

(defun eglot-get-folding-ranges ()
  "Get folding ranges from eglot server."
  (when (eglot-folding-range-support-p)
    (condition-case nil
        (jsonrpc-request (eglot-current-server)
                         :textDocument/foldingRange
                         (list :textDocument (eglot--TextDocumentIdentifier)))
      (error nil))))

(defun eglot-apply-folding-ranges ()
  "Apply folding ranges from LSP server using hideshow."
  (interactive)
  (when-let ((ranges (eglot-get-folding-ranges)))
    (save-excursion
      (dolist (range ranges)
        (let* ((start-line (1+ (gethash "startLine" range)))
               (end-line (1+ (gethash "endLine" range))))
          (goto-char (point-min))
          (forward-line (1- start-line))
          (let ((start-pos (point)))
            (forward-line (- end-line start-line))
            (when (> (count-lines start-pos (point)) 1)
              (hs-hide-block-at-point start-pos))))))))

(defun hs-hide-block-at-point (pos)
  "Hide block at specific position."
  (save-excursion
    (goto-char pos)
    (when (hs-find-block-beginning)
      (hs-hide-block))))

;; Add eglot folding keybinding
(add-hook 'eglot-managed-mode-hook
          (lambda ()
            (when (eglot-folding-range-support-p)
              (local-set-key (kbd "C-c e f") #'eglot-apply-folding-ranges))))
#+end_src

*** Fringe Indicators
#+begin_src emacs-lisp
(use-package fringe
  :ensure nil
  :config
  ;; Gruvbox dark theme fringe
  (custom-set-faces
   '(fringe ((t (:background "#282828" :foreground "#a89984")))))
  
  ;; Simple fold indicators
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'fold-indicator
      [#b11111111
       #b10000001
       #b10000001
       #b10000001
       #b10000001
       #b10000001
       #b10000001
       #b11111111]
      nil 8 'center))
  
  ;; Set fringe width
  (fringe-mode '(8 . 8)))
#+end_src

*** Unified Folding Interface
#+begin_src emacs-lisp
;; Smart folding that chooses the best method
(defun unified-fold-toggle ()
  "Toggle folding using the best available method."
  (interactive)
  (cond
   ;; Prefer treesit-fold for tree-sitter modes
   ((and (bound-and-true-p treesit-fold-mode)
         (fboundp 'treesit-fold-toggle))
    (treesit-fold-toggle))
   ;; Fall back to hideshow
   ((bound-and-true-p hs-minor-mode)
    (hs-toggle-hiding))
   (t (message "No folding available"))))

(defun unified-fold-hide-all ()
  "Hide all folds using the best available method."
  (interactive)
  (cond
   ((and (bound-and-true-p treesit-fold-mode)
         (fboundp 'treesit-fold-close-all))
    (treesit-fold-close-all))
   ((bound-and-true-p hs-minor-mode)
    (hs-hide-all))
   (t (message "No folding available"))))

(defun unified-fold-show-all ()
  "Show all folds using the best available method."
  (interactive)
  (cond
   ((and (bound-and-true-p treesit-fold-mode)
         (fboundp 'treesit-fold-open-all))
    (treesit-fold-open-all))
   ((bound-and-true-p hs-minor-mode)
    (hs-show-all))
   (t (message "No folding available"))))

;; Global unified keybindings
(global-set-key (kbd "C-c TAB") #'unified-fold-toggle)
(global-set-key (kbd "C-c C-h") #'unified-fold-hide-all)
(global-set-key (kbd "C-c C-s") #'unified-fold-show-all)
#+end_src

*** Doom Modeline Integration
#+begin_src emacs-lisp
;; Folding state tracking
(defvar-local folding-state-cache nil
  "Cache for folding state to avoid expensive calculations.")

(defvar folding-state-update-timer nil
  "Timer for updating folding state.")

(defun folding-count-folds ()
  "Count total and active folds in current buffer."
  (let ((total-folds 0)
        (active-folds 0))
    ;; Count hideshow folds
    (when (bound-and-true-p hs-minor-mode)
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (when (hs-overlay-at (point))
            (setq total-folds (1+ total-folds))
            (when (overlay-get (car (hs-overlay-at (point))) 'invisible)
              (setq active-folds (1+ active-folds))))
          (forward-line 1))))
    
    ;; Count treesit-fold folds
    (when (bound-and-true-p treesit-fold-mode)
      (dolist (ov (overlays-in (point-min) (point-max)))
        (when (overlay-get ov 'treesit-fold)
          (setq total-folds (1+ total-folds))
          (when (overlay-get ov 'invisible)
            (setq active-folds (1+ active-folds))))))
    
    (cons active-folds total-folds)))

(defun folding-update-state-cache ()
  "Update folding state cache."
  (when (or (bound-and-true-p hs-minor-mode)
            (bound-and-true-p treesit-fold-mode))
    (setq folding-state-cache (folding-count-folds))))

(defun folding-schedule-update ()
  "Schedule folding state update."
  (when folding-state-update-timer
    (cancel-timer folding-state-update-timer))
  (setq folding-state-update-timer
        (run-with-idle-timer 0.5 nil #'folding-update-state-cache)))

;; Update cache on fold changes
(advice-add 'hs-toggle-hiding :after (lambda (&rest _) (folding-schedule-update)))
(advice-add 'hs-hide-all :after (lambda (&rest _) (folding-schedule-update)))
(advice-add 'hs-show-all :after (lambda (&rest _) (folding-schedule-update)))

(when (fboundp 'treesit-fold-toggle)
  (advice-add 'treesit-fold-toggle :after (lambda (&rest _) (folding-schedule-update)))
  (advice-add 'treesit-fold-close-all :after (lambda (&rest _) (folding-schedule-update)))
  (advice-add 'treesit-fold-open-all :after (lambda (&rest _) (folding-schedule-update))))

;; Doom modeline segment definition
(doom-modeline-def-segment folding
  "Folding state indicator for doom-modeline."
  (when (and (or (bound-and-true-p hs-minor-mode)
                 (bound-and-true-p treesit-fold-mode))
             folding-state-cache)
    (let* ((active (car folding-state-cache))
           (total (cdr folding-state-cache))
           (icon (if (> active 0) "▼" "▶"))
           (face (if (> active 0) 'doom-modeline-info 'doom-modeline-buffer-minor-mode)))
      (concat
       (doom-modeline-spc)
       (propertize icon 'face face)
       (when (> total 0)
         (propertize (format "%d/%d" active total) 'face face))))))

;; Custom doom modeline with folding
(doom-modeline-def-modeline 'folding-modeline
  '(bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
  '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes folding input-method indent-info buffer-encoding major-mode process vcs checker time))

;; Function to toggle folding modeline
(defun toggle-folding-modeline ()
  "Toggle between default and folding-enabled doom modeline."
  (interactive)
  (if (eq doom-modeline-mode-line 'folding-modeline)
      (doom-modeline-set-modeline 'main)
    (doom-modeline-set-modeline 'folding-modeline))
  (force-mode-line-update))

;; Auto-enable folding modeline in programming modes
(defun maybe-enable-folding-modeline ()
  "Enable folding modeline in programming buffers."
  (when (and (derived-mode-p 'prog-mode)
             (or (bound-and-true-p hs-minor-mode)
                 (bound-and-true-p treesit-fold-mode)))
    (doom-modeline-set-modeline 'folding-modeline)
    (folding-update-state-cache)))

(add-hook 'prog-mode-hook #'maybe-enable-folding-modeline)
(add-hook 'hs-minor-mode-hook #'maybe-enable-folding-modeline)
(add-hook 'treesit-fold-mode-hook #'maybe-enable-folding-modeline)

;; Keybinding to toggle folding modeline
(global-set-key (kbd "C-c m f") #'toggle-folding-modeline)
#+end_src

*** Folding State Persistence
#+begin_src emacs-lisp
;; Optional: Save and restore folding states
(defvar folding-save-file (expand-file-name "folding-states" user-emacs-directory)
  "File to save folding states.")

(defun folding-save-state ()
  "Save current buffer's folding state."
  (interactive)
  (when (and buffer-file-name
             (or (bound-and-true-p hs-minor-mode)
                 (bound-and-true-p treesit-fold-mode)))
    (let ((states '())
          (file buffer-file-name))
      ;; Collect hideshow states
      (when (bound-and-true-p hs-minor-mode)
        (save-excursion
          (goto-char (point-min))
          (while (not (eobp))
            (when-let ((ov (car (hs-overlay-at (point)))))
              (when (overlay-get ov 'invisible)
                (push (list 'hs (overlay-start ov) (overlay-end ov)) states)))
            (forward-line 1))))
      
      ;; Collect treesit-fold states
      (when (bound-and-true-p treesit-fold-mode)
        (dolist (ov (overlays-in (point-min) (point-max)))
          (when (and (overlay-get ov 'treesit-fold)
                     (overlay-get ov 'invisible))
            (push (list 'treesit (overlay-start ov) (overlay-end ov)) states))))
      
      ;; Save to file
      (when states
        (let ((all-states (if (file-exists-p folding-save-file)
                              (with-temp-buffer
                                (insert-file-contents folding-save-file)
                                (read (current-buffer)))
                            '())))
          (setf (alist-get file all-states nil nil #'string=) states)
          (with-temp-file folding-save-file
            (prin1 all-states (current-buffer))))))))

(defun folding-restore-state ()
  "Restore folding state for current buffer."
  (interactive)
  (when (and buffer-file-name
             (file-exists-p folding-save-file))
    (let* ((all-states (with-temp-buffer
                         (insert-file-contents folding-save-file)
                         (read (current-buffer))))
           (states (alist-get buffer-file-name all-states nil nil #'string=)))
      (dolist (state states)
        (let ((type (car state))
              (start (cadr state))
              (end (caddr state)))
          (cond
           ((eq type 'hs)
            (when (bound-and-true-p hs-minor-mode)
              (save-excursion
                (goto-char start)
                (hs-hide-block))))
           ((eq type 'treesit)
            (when (bound-and-true-p treesit-fold-mode)
              (save-excursion
                (goto-char start)
                (treesit-fold-close))))))))))

;; Auto-save/restore hooks
(add-hook 'kill-buffer-hook #'folding-save-state)
(add-hook 'find-file-hook #'folding-restore-state)

;; Keybindings for manual save/restore
(global-set-key (kbd "C-c f w") #'folding-save-state)
(global-set-key (kbd "C-c f r") #'folding-restore-state)
#+end_src
