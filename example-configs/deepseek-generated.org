
#+TITLE: Ultimate Emacs 30 Configuration
#+AUTHOR: Ahsanur Rahman
#+DATE: 2023-11-15
#+STARTUP: overview

* Installation Instructions

** Requirements

- Emacs 30+ compiled with:
  - Native compilation (--with-native-compilation)
  - JSON support
  - Tree-sitter support
  - XWidgets (optional for web browsing)
  - GTK3 (recommended for better UI integration)
- 8GB+ RAM recommended for best performance
- Nerd Fonts installed (JetBrains Mono Nerd Font recommended)
- Git for package management

** Installation Steps
1. Backup your existing Emacs configuration:
   #+begin_src shell
   mv ~/.emacs.d ~/.emacs.d.bak
   mv ~/.emacs ~/.emacs.bak
   #+end_src

2. Clone this configuration:
   #+begin_src shell
   git clone https://github.com/yourusername/emacs-config.git ~/.emacs.d
   #+end_src

3. Install required system dependencies:
   #+begin_src shell
   # For Debian/Ubuntu
   sudo apt install git ripgrep fd-find build-essential libgccjit0 libjansson4 libtree-sitter0

   # For Arch Linux
   sudo pacman -S git ripgrep fd gcc libgccjit jansson tree-sitter
   #+end_src

4. First startup will automatically install all packages. This may take 10-20 minutes.

5. For optimal performance, compile all packages:
   #+begin_src emacs-lisp
   M-x elpaca-rebuild-all
   #+end_src

* Configuration

** Core Optimization
#+begin_src emacs-lisp
;; Disable package.el completely
(setq package-enable-at-startup nil
      package--init-file-ensured t
      package-quickstart nil)

;; Optimize garbage collection
(setq gc-cons-threshold (* 64 1024 1024)
      gc-cons-percentage 0.6
      garbage-collection-messages t)

;; Disable unwanted UI elements
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      frame-inhibit-implied-resize t
      frame-resize-pixelwise t
      inhibit-compacting-font-caches t
      warning-minimum-level :error)

;; Faster rendering
(setq bidi-paragraph-direction 'left-to-right
      bidi-inhibit-bpa t
      redisplay-skip-fontification-on-input t)

;; Native compilation settings
(setq native-comp-async-report-warnings-errors 'silent
      native-comp-deferred-compilation t
      native-comp-jit-compilation t
      native-comp-speed 3
      native-compile-target-directory (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

** Elpaca Package Manager
#+begin_src emacs-lisp
;; Bootstrap Elpaca
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                      (plist-get order :repo) repo))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                      (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                      "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
      ((error) (warn "%s" err) (delete-directory repo 'recursive)))))

;; Initialize Elpaca
(elpaca-generate-autoloads (expand-file-name "elpaca/" elpaca-repos-directory) "elpaca-autoloads.el")
(load (expand-file-name "elpaca-autoloads.el" elpaca-repos-directory) nil t)

;; Use-package integration
(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t
        elpaca-verbose-init t))

;; Ensure built-in org is used
(elpaca nil (require 'org))

;; Auto-update packages
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t
        auto-package-update-interval 7
        auto-package-update-prompt-before-update t)
  (auto-package-update-maybe))

;; Doom-like envvar support
(use-package envrc
  :config
  (envrc-global-mode))
#+end_src

** UI Configuration
#+begin_src emacs-lisp
;; Theme
(use-package catppuccin-theme
  :init
  (setq catppuccin-flavor 'mocha
        catppuccin-italic-strings t
        catppuccin-italic-comments t
        catppuccin-highlight-matches t)
  :config
  (load-theme 'catppuccin t)
  (catppuccin-reload))

;; Fonts
(set-face-attribute 'default nil
                   :font "JetBrainsMono Nerd Font-12"
                   :weight 'medium
                   :width 'normal)
(set-face-attribute 'variable-pitch nil
                   :font "Ubuntu Nerd Font-12"
                   :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                   :font "JetBrainsMono Nerd Font-12")
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

;; Disable UI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode 0)
(setq visible-bell nil
      ring-bell-function 'ignore
      use-dialog-box nil
      redisplay-dont-pause t
      frame-title-format "%b"
      icon-title-format "%b")

;; Line numbers
(setq display-line-numbers-type 'relative
      display-line-numbers-width-start t)
(global-display-line-numbers-mode 1)
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; Smooth scrolling
(use-package emacs
  :ensure nil
  :config
  (setq scroll-margin 2
        scroll-conservatively 101
        scroll-preserve-screen-position t
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse t
        fast-but-imprecise-scrolling t
        redisplay-skip-fontification-on-input t))

;; Icons
(use-package nerd-icons
  :config
  (setq nerd-icons-font-family "JetBrainsMono Nerd Font"))

(use-package nerd-icons-completion
  :after (marginalia all-the-icons)
  :config
  (nerd-icons-completion-mode))

(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Editor Essentials
#+begin_src emacs-lisp
;; General Keybindings
(use-package general
  :config
  (general-create-definer leader-key-def
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  ;; Doom-like keybindings
  (leader-key-def
    "SPC" '(execute-extended-command :which-key "M-x")
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    "RET" '(recentf-open-files :which-key "recent files")

    ;; Buffer operations
    "b" '(:ignore t :which-key "buffer")
    "b b" '(consult-buffer :which-key "switch buffer")
    "b d" '(kill-current-buffer :which-key "kill buffer")
    "b i" '(ibuffer :which-key "ibuffer")
    "b n" '(next-buffer :which-key "next buffer")
    "b p" '(previous-buffer :which-key "previous buffer")
    "b r" '(revert-buffer :which-key "revert buffer")

    ;; File operations
    "f" '(:ignore t :which-key "file")
    "f f" '(find-file :which-key "find file")
    "f s" '(save-buffer :which-key "save file")
    "f r" '(recentf-open-files :which-key "recent files")
    "f y" '(show-and-copy-buffer-filename :which-key "copy path")
    "f c" '(write-file :which-key "save as")
    "f D" '(delete-file :which-key "delete file")

    ;; Project operations
    "p" '(:ignore t :which-key "project")
    "p p" '(projectile-command-map :which-key "projectile")
    "p f" '(projectile-find-file :which-key "find file in project")
    "p s" '(projectile-save-project-buffers :which-key "save project")
    "p k" '(projectile-kill-buffers :which-key "kill project buffers")
    "p t" '(projectile-run-vterm :which-key "vterm in project")
    "p r" '(projectile-recentf :which-key "recent files in project")

    ;; Window operations
    "w" '(:ignore t :which-key "window")
    "w h" '(windmove-left :which-key "left window")
    "w j" '(windmove-down :which-key "down window")
    "w k" '(windmove-up :which-key "up window")
    "w l" '(windmove-right :which-key "right window")
    "w /" '(split-window-right :which-key "split right")
    "w -" '(split-window-below :which-key "split below")
    "w d" '(delete-window :which-key "delete window")
    "w o" '(delete-other-windows :which-key "maximize window")
    "w m" '(toggle-frame-maximized :which-key "maximize frame")

    ;; Git operations
    "g" '(:ignore t :which-key "git")
    "g s" '(magit-status :which-key "magit status")
    "g l" '(magit-log :which-key "magit log")
    "g b" '(magit-blame :which-key "magit blame")
    "g c" '(magit-commit :which-key "magit commit")
    "g p" '(magit-push :which-key "magit push")
    "g u" '(magit-pull :which-key "magit pull")
    "g f" '(magit-fetch :which-key "magit fetch")

    ;; Search operations
    "s" '(:ignore t :which-key "search")
    "s f" '(consult-find :which-key "find file")
    "s g" '(consult-ripgrep :which-key "ripgrep")
    "s b" '(consult-buffer :which-key "switch buffer")
    "s l" '(consult-line :which-key "search line")
    "s m" '(consult-mark :which-key "search marks")
    "s y" '(consult-yank-pop :which-key "yank pop")

    ;; Toggle operations
    "t" '(:ignore t :which-key "toggle")
    "t t" '(treemacs :which-key "treemacs")
    "t n" '(display-line-numbers-mode :which-key "line numbers")
    "t s" '(spell-fu-mode :which-key "spell check")
    "t w" '(whitespace-mode :which-key "whitespace")
    "t i" '(indent-guide-mode :which-key "indent guides")
    "t d" '(toggle-debug-on-error :which-key "debug on error")))

;; Evil mode with Doom enhancements
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-undo-system 'undo-redo
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil
        evil-respect-visual-line-mode t
        evil-echo-state t
        evil-indent-convert-tabs nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-want-fine-undo t
        evil-ex-complete-emacs-commands nil
        evil-ex-visual-char-range t
        evil-move-cursor-back nil
        evil-mode-line-format 'nil
        evil-symbol-word-search t
        evil-search-module 'evil-search
        evil-ex-substitute-global t
        evil-ex-visual-char-range t)
  :config
  (evil-mode 1)
  (evil-set-undo-system 'undo-redo)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-nerd-commenter
  :after evil
  :general
  (leader-key-def
    "c" '(:ignore t :which-key "comment")
    "c c" '(evilnc-comment-or-uncomment-lines :which-key "comment lines")
    "c p" '(evilnc-comment-or-uncomment-paragraphs :which-key "comment paragraph")))

(use-package evil-goggles
  :after evil
  :config
  (evil-goggles-use-diff-faces)
  (evil-goggles-mode))

;; Doom-like escape behavior
(use-package evil-escape
  :after evil
  :config
  (setq evil-escape-key-sequence "fd"
        evil-escape-delay 0.2)
  (evil-escape-mode))

;; Which Key
(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.1
        which-key-sort-order 'which-key-key-order-alpha
        which-key-side-window-max-width 0.33
        which-key-side-window-max-height 0.25
        which-key-show-remaining-keys t
        which-key-allow-imprecise-window-fit t
        which-key-separator " → "
        which-key-prefix-prefix "+"
        which-key-show-docstrings t
        which-key-max-display-columns 2
        which-key-add-column-padding 1
        which-key-max-description-length 25
        which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL" "C-g" "C-q" "C-x" "C-c" "C-h" "C-m"))
  (which-key-setup-side-window-bottom))
#+end_src

** Completion System
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-scroll-margin 0
        vertico-count 20
        vertico-resize t
        vertico-cycle t
        vertico-multiform-commands '((consult-line buffer)
                                     (consult-find buffer)
                                     (consult-ripgrep buffer))))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion))
                                        (command (styles basic))
                                        (variable (styles basic)))
        orderless-component-separator #'orderless-escapable-split-on-space
        orderless-matching-styles '(orderless-literal
                                    orderless-prefixes
                                    orderless-initialism
                                    orderless-regexp)))

(use-package marginalia
  :init
  (marginalia-mode)
  :config
  (setq marginalia-align 'right
        marginalia-align-offset -10))

(use-package consult
  :general
  (leader-key-def
    "s" '(:ignore t :which-key "search")
    "s f" '(consult-find :which-key "find file")
    "s g" '(consult-ripgrep :which-key "ripgrep")
    "s b" '(consult-buffer :which-key "switch buffer")
    "s l" '(consult-line :which-key "search line")
    "s m" '(consult-mark :which-key "search marks")
    "s y" '(consult-yank-pop :which-key "yank pop"))
  :config
  (setq consult-preview-key "M-."
        consult-async-min-input 2
        consult-async-refresh-delay 0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.1))

(use-package corfu
  :init
  (global-corfu-mode)
  :config
  (setq corfu-auto t
        corfu-auto-prefix 2
        corfu-auto-delay 0.0
        corfu-popupinfo-delay '(0.25 . 0.1)
        corfu-preview-current 'insert
        corfu-preselect-first t
        corfu-on-exact-match nil
        corfu-scroll-margin 4
        corfu-cycle t
        corfu-count 14
        corfu-min-width 40
        corfu-max-width 80
        corfu-separator ?\s
        corfu-quit-at-boundary 'separator
        corfu-quit-no-match 'separator
        corfu-echo-documentation nil))

(use-package corfu-terminal
  :if (not (display-graphic-p))
  :config
  (corfu-terminal-mode +1))

(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'completion-at-point-functions #'cape-history))

(use-package embark
  :general
  ([remap describe-bindings] . embark-bindings)
  (leader-key-def
    "e" '(:ignore t :which-key "embark")
    "e a" '(embark-act :which-key "embark act")
    "e d" '(embark-dwim :which-key "embark dwim")))

(use-package embark-consult
  :after (embark consult))

(use-package prescient
  :config
  (prescient-persist-mode +1))

(use-package consult-prescient
  :after (consult prescient)
  :config
  (consult-prescient-mode +1))
#+end_src

** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"
                           "~/.emacs.d/private/snippets"))
  (yas-reload-all))

(use-package yasnippet-snippets
  :after yasnippet)

(use-package doom-snippets
  :after yasnippet
  :elpaca (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*")))
#+end_src

* Development Tools
** Version Control
#+begin_src emacs-lisp
(use-package magit
  :general
  (leader-key-def
    "g" '(:ignore t :which-key "git")
    "g s" '(magit-status :which-key "status")
    "g l" '(magit-log :which-key "log")
    "g b" '(magit-blame :which-key "blame")
    "g c" '(magit-commit :which-key "commit")
    "g p" '(magit-push :which-key "push")
    "g u" '(magit-pull :which-key "pull")
    "g f" '(magit-fetch :which-key "fetch")
    "g m" '(magit-merge :which-key "merge"))
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1
        magit-diff-refine-hunk t
        magit-save-repository-buffers 'dontask
        magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
        magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18)
        magit-status-buffer-switch-function 'switch-to-buffer))

(use-package git-timemachine
  :after magit
  :general
  (leader-key-def
    "g t" '(git-timemachine :which-key "timemachine")))

(use-package forge
  :after magit)

(use-package magit-todos
  :after magit
  :config
  (magit-todos-mode))
#+end_src

** Project Management
#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :config
  (setq projectile-enable-caching t
        projectile-project-search-path '("~/projects/")
        projectile-switch-project-action #'projectile-dired
        projectile-indexing-method 'alien
        projectile-completion-system 'default
        projectile-sort-order 'recentf
        projectile-create-missing-test-files t
        projectile-globally-ignored-files '(".DS_Store" "TAGS")
        projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o")
        projectile-kill-buffers-filter 'kill-only-files)
  :general
  (leader-key-def
    "p" '(:ignore t :which-key "project")
    "p p" '(projectile-command-map :which-key "command map")
    "p f" '(projectile-find-file :which-key "find file")
    "p s" '(projectile-switch-project :which-key "switch project")
    "p k" '(projectile-kill-buffers :which-key "kill buffers")
    "p t" '(projectile-run-vterm :which-key "vterm")
    "p r" '(projectile-recentf :which-key "recent files")
    "p d" '(projectile-dired :which-key "dired")))

(use-package projectile-ripgrep
  :after projectile)

(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode))
#+end_src

** LSP and Completion
#+begin_src emacs-lisp
(use-package eglot
  :hook ((python-mode . eglot-ensure)
         (js-mode . eglot-ensure)
         (typescript-mode . eglot-ensure)
         (go-mode . eglot-ensure)
         (rust-mode . eglot-ensure)
         (c-mode . eglot-ensure)
         (c++-mode . eglot-ensure)
         (java-mode . eglot-ensure)
         (haskell-mode . eglot-ensure)
         (elixir-mode . eglot-ensure)
         (ruby-mode . eglot-ensure)
         (php-mode . eglot-ensure)
         (sh-mode . eglot-ensure)
         (web-mode . eglot-ensure))
  :config
  (setq eglot-autoshutdown t
        eglot-send-changes-idle-time 0.5
        eglot-ignored-server-capabilities '(:documentHighlightProvider)
        eglot-extend-to-xref t
        eglot-events-buffer-size 0
        eglot-sync-connect 1
        eglot-connect-timeout 10
        eglot-confirm-server-initiated-edits nil))

(use-package eglot-booster
  :after eglot
  :config
  (eglot-booster-mode))

(use-package consult-eglot
  :after (eglot consult))
#+end_src

** Treesitter
#+begin_src emacs-lisp
(use-package treesit
  :ensure nil
  :hook ((prog-mode . treesit-mode)
         (treesit-mode . treesit-font-lock-mode)
         (treesit-mode . treesit-auto-hl-mode)
         (treesit-mode . treesit-parser-mode))
  :custom
  (treesit-font-lock-level 4) ; Maximum syntax highlighting
  (treesit-language-source-alist
   '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
     (c . ("https://github.com/tree-sitter/tree-sitter-c"))
     (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
     (css . ("https://github.com/tree-sitter/tree-sitter-css"))
     (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
     (go . ("https://github.com/tree-sitter/tree-sitter-go"))
     (html . ("https://github.com/tree-sitter/tree-sitter-html"))
     (java . ("https://github.com/tree-sitter/tree-sitter-java"))
     (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
     (json . ("https://github.com/tree-sitter/tree-sitter-json"))
     (markdown . ("https://github.com/MDeiml/tree-sitter-markdown"))
     (python . ("https://github.com/tree-sitter/tree-sitter-python"))
     (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
     (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
     (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
     (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
     (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
     (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
     (yaml . ("https://github.com/tree-sitter/tree-sitter-yaml"))))

  :config
  ;; ====================
  ;; Performance Settings
  ;; ====================
  (setq treesit-max-buffer-size (* 4 1024 1024) ; 4MB
        treesit-load-name-override-list nil
        treesit-extra-load-path '("~/.config/emacs/tree-sitter/")
        treesit-defun-type-regexp (regexp-opt '("function" "method" "macro" "lambda" "class" "struct" "interface"))))

  ;; ====================
  ;; Grammar Installation
  ;; ====================
  (defun install-treesit-grammars ()
    "Install Tree-sitter grammars if they are missing."
    (interactive)
    (dolist (grammar
             '((bash "bash")
               (c "c")
               (cpp "cpp")
               (css "css")
               (elisp "elisp")
               (go "go")
               (html "html")
               (java "java")
               (javascript "javascript")
               (json "json")
               (markdown "markdown")
               (python "python")
               (ruby "ruby")
               (rust "rust")
               (sql "sql")
               (toml "toml")
               (tsx "tsx")
               (typescript "typescript")
               (yaml "yaml")))
      (let ((lang-symbol (car grammar)))
        (unless (treesit-language-available-p lang-symbol)
          (message "Installing %s grammar..." lang-symbol)
          (condition-case err
              (treesit-install-language-grammar lang-symbol)
            (error (message "Failed to install %s grammar: %s" lang-symbol (error-message-string err))))))))

  (add-hook 'emacs-startup-hook #'install-treesit-grammars)

  ;; ====================
  ;; Language-Specific Configurations
  ;; ====================

  ;; JavaScript/TypeScript
  (with-eval-after-load 'javascript
    (when (treesit-ready-p 'typescript)
      (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
      (setq js-indent-level 2
            typescript-indent-level 2)))

  ;; Python
  (with-eval-after-load 'python
    (when (treesit-ready-p 'python)
      (add-to-list 'auto-mode-alist '("\\.py\\'" . python-ts-mode))
      (setq python-indent-offset 4)))

  ;; Rust
  (with-eval-after-load 'rust
    (when (treesit-ready-p 'rust)
      (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
      (setq rust-indent-offset 4)))

  ;; Go
  (with-eval-after-load 'go
    (when (treesit-ready-p 'go)
      (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
      (setq go-indent-level 4)))

  ;; ====================
  ;; Indentation Rules
  ;; ====================
  (setq treesit-simple-indent-rules
        (append treesit-simple-indent-rules
                '((python . ((parent-is "module") (node-is "ERROR")))
                '((javascript . ((parent-is "arguments") (node-is "ERROR"))))
                '((typescript . ((parent-is "arguments") (node-is "ERROR"))))
                '((rust . ((parent-is "block") (node-is "ERROR"))))
                '((go . ((parent-is "block") (node-is "ERROR")))))))

  ;; ====================
  ;; Font Lock Features
  ;; ====================
  (setq treesit-font-lock-feature-list
        '(( comment definition documentation)
          ( keyword string type constant escape-sequence)
          ( assignment builtin function operator property)
          ( bracket delimiter error identifier variable)))

  ;; ====================
  ;; Navigation Features
  ;; ====================
  (setq treesit-defun-prefer-top-level t
        treesit-sentence-type-regexp (regexp-opt '("sentence" "paragraph" "line_comment")))

  ;; ====================
  ;; Fallback Mechanism
  ;; ====================
  (defun setup-treesit-or-major-mode ()
    "Enable treesit-mode if grammar is available, otherwise fallback to major mode."
    (unless (treesit-ready-p major-mode)
      (message "No Tree-sitter grammar available for %s, falling back to major mode" major-mode)
      (setq-local treesit-font-lock-features nil)))

  (add-hook 'treesit-mode-hook #'setup-treesit-or-major-mode)

  ;; ====================
  ;; Additional Utilities
  ;; ====================
  (defun treesit-toggle-language ()
    "Toggle between Tree-sitter and legacy major mode."
    (interactive)
    (if (bound-and-true-p treesit-mode)
        (progn
          (treesit-mode -1)
          (message "Disabled Tree-sitter mode"))
      (when (treesit-ready-p major-mode)
        (treesit-mode 1)
        (message "Enabled Tree-sitter mode"))))

  ;; ====================
  ;; Debugging Helpers
  ;; ====================
  (defun treesit-inspect-node ()
    "Inspect the Tree-sitter node at point."
    (interactive)
    (if (treesit-parser-list)
        (let* ((node (treesit-node-at (point)))
          (message "Node: %s (%s-%s)" (treesit-node-type node)
                   (treesit-node-start node)
                   (treesit-node-end node)))
      (message "No Tree-sitter parser active"))))

#+end_src

** Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode)
  :config
  (setq flycheck-indication-mode 'right-fringe
        flycheck-check-syntax-automatically '(save idle-change mode-enabled)
        flycheck-idle-change-delay 0.8
        flycheck-display-errors-delay 0.1
        flycheck-emacs-lisp-load-path 'inherit
        flycheck-global-modes '(not org-mode)
        flycheck-standard-error-navigation t
        flycheck-completion-system 'default))

(use-package flycheck-posframe
  :hook (flycheck-mode . flycheck-posframe-mode)
  :config
  (setq flycheck-posframe-position 'window-bottom-right-corner))

(use-package flycheck-popup-tip
  :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** Formatting
#+begin_src emacs-lisp
(use-package format-all
  :hook (prog-mode . format-all-ensure-formatter)
  :general
  (leader-key-def
    "f" '(:ignore t :which-key "format")
    "f f" '(format-all-buffer :which-key "format buffer")
    "f r" '(format-all-region :which-key "format region"))
  :config
  (setq format-all-show-errors 'always
        format-all-default-formatters
        '((python-mode . black)
          (js-mode . prettier)
          (typescript-mode . prettier)
          (web-mode . prettier)
          (css-mode . prettier)
          (json-mode . prettier)
          (yaml-mode . prettier)
          (ruby-mode . rubocop)
          (go-mode . gofmt)
          (rust-mode . rustfmt)
          (elixir-mode . mix-format)
          (java-mode . google-java-format)
          (sh-mode . shfmt))))
#+end_src

** IDEA Debugging - Use eglot mode instead of lsp-mode
#+begin_src emacs-lisp
(use-package dap-mode
  :after (lsp-mode)
  :config
  (require 'dap-python)
  (require 'dap-lldb)
  (require 'dap-gdb-lldb)
  (dap-auto-configure-mode +1)
  (setq dap-auto-configure-features '(sessions locals controls tooltip)))
#+end_src

* File Management
** DONE Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq dired-listing-switches "-alh --group-directories-first"
        dired-auto-revert-buffer t
        dired-dwim-target t
        dired-hide-details-hide-symlink-targets nil
        dired-kill-when-opening-new-dired-buffer t
        dired-recursive-copies 'always
        dired-recursive-deletes 'always
        delete-by-moving-to-trash t
        dired-clean-up-buffers-too t
        dired-clean-confirm-killing-deleted-buffers t))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :general
  (:keymaps 'dired-mode-map
   "." 'dired-hide-dotfiles-mode))

(use-package dired-ranger
  :after dired)

(use-package dired-subtree
  :after dired
  :general
  (:keymaps 'dired-mode-map
   "TAB" 'dired-subtree-toggle))

(use-package diredfl
  :hook (dired-mode . diredfl-mode))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** TODO IBuffer
#+begin_src emacs-lisp
(use-package ibuffer
  :ensure nil
  :config
  (setq ibuffer-formats
        '((mark modified read-only locked " "
                (name 30 30 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename))))

(use-package ibuffer-project
  :after ibuffer
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-project-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic)))))

(use-package ibuffer-vc
  :after ibuffer
  :hook (ibuffer-mode . ibuffer-vc-set-filter-groups-by-vc-root))
#+end_src

* TODO Terminal
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq vterm-max-scrollback 10000
        vterm-kill-buffer-on-exit t
        vterm-always-compile-module t
        vterm-timer-delay 0.01
        vterm-use-vterm-prompt-detection-method t
        vterm-copy-exclude-prompt t)
  :general
  (leader-key-def
    "t" '(:ignore t :which-key "terminal")
    "t t" '(vterm :which-key "vterm")
    "t n" '(vterm-other-window :which-key "vterm other window")))

;; Disable eshell
(setq eshell-directory-name (expand-file-name "eshell/" user-emacs-directory))
#+end_src

* Org Mode
** Core Configuration
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode (("\\.org\\'" . org-mode))
  :config
  (setq org-directory "~/org/"
        org-agenda-files (list org-directory)
        org-ellipsis " ▾ "
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-fontify-quote-and-verse-blocks t
        org-src-preserve-indentation t
        org-startup-folded 'overview
        org-cycle-separator-lines 2
        org-log-done 'time
        org-catch-invisible-edits 'smart
        org-return-follows-link t
        org-use-speed-commands t
        org-confirm-babel-evaluate nil
        org-pretty-entities t
        org-hide-leading-stars t
        org-startup-with-inline-images t
        org-image-actual-width nil
        org-tags-column 0
        org-fast-tag-selection-single-key 'expert
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil
        org-refile-allow-creating-parent-nodes 'confirm
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))
        org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("NEXT" . "cyan")
          ("WAITING" . "orange")
          ("DONE" . org-done)
          ("CANCELLED" . (:foreground "blue" :weight bold)))
        org-priority-faces
        '((?A . error)
          (?B . warning)
          (?C . success))
        org-agenda-block-separator ""
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)
     (conf-unix . t))))
#+end_src

** Org Appearance
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-hide-stars nil
        org-modern-star '("◉" "○" "◈" "◇" "◎" "●" "◆" "◇")
        org-modern-todo t
        org-modern-tag t
        org-modern-priority t
        org-modern-block t
        org-modern-block-fringe nil
        org-modern-table t
        org-modern-progress t
        org-modern-horizontal-rule t
        org-modern-keyword t
        org-modern-checkbox t))

;;org-superstar not needed because of org-modern
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-superstar-prettify-item-bullets t))

(use-package org-fancy-priorities
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("❗" "⬆" "⬇" "☕")))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t))
#+end_src

#+RESULTS:

** TODO Org Capture
=Enhance this further and mimic doom emacs=
=Create a script like doom emacs to launch org-capture from=
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/todos.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("n" "Note" entry (file "~/org/notes.org")
         "* %? :note:\n%T\n%i\n%a")
        ("m" "Meeting" entry (file+headline "~/org/meetings.org" "Meetings")
         "* MEETING with %? :meeting:\n%T\n%a")
        ("p" "Phone call" entry (file+headline "~/org/calls.org" "Calls")
         "* PHONE %? :phone:\n%T")))

;; Doom-like capture popup
(use-package org-capture-pop-frame
  :after org
  :config
  (setq org-capture-pop-frame-parameters
        '((name . "org-capture")
          (width . 80)
          (height . 25)
          (transient . t)
          (left-fringe . 0)
          (right-fringe . 0)
          (tool-bar-lines . 0)
          (menu-bar-lines . 0)
          (vertical-scroll-bars . nil))))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :config
  (setq org-agenda-block-separator ""
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
        "⭠ now ─────────────────────────────────────────────────"))

(use-package org-super-agenda
  :after org-agenda
  :config
  (setq org-super-agenda-groups
        '((:name "Today"
           :time-grid t
           :todo "TODAY")
          (:name "Important"
           :priority "A")
          (:name "Overdue"
           :deadline past)
          (:name "Due soon"
           :deadline future)
          (:name "Waiting"
           :todo "WAITING")
          (:name "Scheduled"
           :scheduled future)))
  (org-super-agenda-mode))
#+end_src

** Org Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)
   (shell . t)
   (conf-unix . t)))

(setq org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0
      org-src-preserve-indentation t
      ;; use shebang instead of the following arguments
      ;; org-babel-python-command "python3"
      ;; org-babel-sh-command "bash"
      org-babel-default-header-args '((:session . "none")
                                     (:results . "replace")
                                     (:exports . "code")
                                     (:cache . "no")
                                     (:noweb . "no")
                                     (:hlines . "no")
                                     (:tangle . "no")))
#+end_src

** TODO Org Export
=Enhance this section using deepseek when setting up latex with auctex preferably=
#+begin_src emacs-lisp
(setq org-export-with-smart-quotes t
      org-export-with-sub-superscripts '{}
      org-export-preserve-breaks t
      org-export-with-toc nil
      org-export-with-section-numbers nil
      org-export-with-tags 'not-in-toc
      org-export-with-author nil
      org-export-with-date nil
      org-export-with-email nil
      org-export-with-timestamps t
      org-export-with-creator nil
      org-export-with-properties nil
      org-export-with-archived-trees nil
      org-export-with-drawers nil
      org-export-with-planning nil
      org-export-with-todo-keywords nil
      org-export-with-statistics-cookies nil
      org-export-with-footnotes t
      org-export-with-latex t
      org-export-with-entities t
      org-export-with-special-strings t
      org-export-with-smart-quotes t
      org-export-with-sub-superscripts '{}
      org-export-with-email nil
      org-export-with-creator nil)

(use-package ox-hugo
  :after org)

(use-package ox-gfm
  :after org)
#+end_src

* Programming Languages
** Python
#+begin_src emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :hook (python-mode . eglot-ensure)
  :config
  (setq python-indent-offset 4
        python-shell-interpreter "python3"
        python-shell-interpreter-args "-i"
        python-fill-docstring-style 'django
        python-shell-completion-native-enable nil
        python-shell-completion-native-disabled-interpreters '("python" "ipython")
        python-shell-virtualenv-root "venv"
        python-shell-process-environment '("PYTHONUNBUFFERED=1")))

(use-package pyvenv
  :after python
  :config
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter
                      (concat pyvenv-virtual-env "bin/python"))))
        pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package jupyter
  :after python
  :config
  (org-babel-jupyter-override-src-block "python"))

(use-package pytest
  :after python
  :general
  (leader-key-def
    "t" '(:ignore t :which-key "test")
    "t t" '(pytest-function :which-key "test function")
    "t f" '(pytest-file :which-key "test file")
    "t p" '(pytest-project :which-key "test project")))

(use-package python-black
  :after python
  :hook (python-mode . python-black-on-save-mode))
#+end_src

** Lisp
#+begin_src emacs-lisp
(use-package sly
  :config
  (setq inferior-lisp-program "sbcl"
        sly-net-coding-system 'utf-8-unix
        sly-edit-indentation-alist '((sly-mrepl-mode . 1))
  :hook (lisp-mode . sly-editing-mode))

(use-package geiser
  :config
  (setq geiser-active-implementations '(guile racket)
        geiser-mode-smart-tab-p t
        geiser-mode-start-repl-p t
        geiser-repl-history-filename "~/.emacs.d/geiser-history"
        geiser-repl-query-on-kill-p nil))

(use-package clojure-mode
  :mode ("\\.clj\\'" "\\.cljs\\'" "\\.cljc\\'" "\\.edn\\'")
  :hook (clojure-mode . eglot-ensure))

(use-package cider
  :after clojure-mode
  :config
  (setq cider-repl-display-help-banner nil
        cider-repl-history-file "~/.emacs.d/cider-history"
        cider-repl-result-prefix ";; => "
        cider-repl-use-clojure-font-lock t
        cider-show-error-buffer nil
        cider-auto-select-error-buffer nil
        cider-repl-wrap-history t
        cider-repl-history-size 1000
        cider-repl-print-length 100))

(use-package clj-refactor
  :after clojure-mode
  :config
  (cljr-add-keybindings-with-prefix "C-c C-m"))

(use-package paredit
  :hook ((emacs-lisp-mode lisp-mode clojure-mode) . paredit-mode))
#+end_src

** Web Development
#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.html?\\'" "\\.css\\'" "\\.jsx?\\'" "\\.tsx?\\'")
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-auto-pairing t
        web-mode-enable-css-colorization t
        web-mode-enable-current-element-highlight t))

(use-package emmet-mode
  :hook ((web-mode css-mode) . emmet-mode))

(use-package prettier-js
  :hook ((js-mode typescript-mode web-mode css-mode json-mode) . prettier-js-mode))
#+end_src

* Miscellaneous
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (dashboard-setup-startup-hook)
  :config
  (setq dashboard-banner-logo-title "Welcome to Emacs"
        dashboard-startup-banner 'official
        dashboard-center-content t
        dashboard-show-shortcuts nil
        dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-set-navigator t
        dashboard-set-init-info t
        dashboard-footer-icon (nerd-icons-octicon "nf-oct-rocket" :face 'font-lock-keyword-face)
        dashboard-banner-logo-title "Doom Emacs"
        dashboard-startup-banner (expand-file-name "doom-emacs-dash.png" user-emacs-directory)
        dashboard-navigator-buttons
        `(((,(nerd-icons-octicon "nf-oct-mark_github" :face 'font-lock-keyword-face)
            "Homepage" "Browse homepage"
            (lambda (&rest _) (browse-url "https://github.com/doomemacs/doomemacs")))
           (,(nerd-icons-octicon "nf-oct-book" :face 'font-lock-keyword-face)
            "Documentation" "Browse documentation"
            (lambda (&rest _) (browse-url "https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org")))
           (,(nerd-icons-octicon "nf-oct-bug" :face 'font-lock-keyword-face)
            "Report Bug" "Report a bug"
            (lambda (&rest _) (browse-url "https://github.com/doomemacs/doomemacs/issues/new/choose"))))
        dashboard-projects-backend 'projectile))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :general
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key)
  ([remap describe-command] . helpful-command)
  ([remap describe-symbol] . helpful-symbol)
  :config
  (setq helpful-max-buffers 10
        helpful-switch-buffer-function 'switch-to-buffer
        helpful-max-line-length 100
        helpful-max-lines 30))

(use-package helpful-posframe
  :after helpful
  :config
  (helpful-posframe-mode))
#+end_src

** Ligatures
#+begin_src emacs-lisp
(use-package ligature
  :config
  (ligature-set-ligatures 'prog-mode
                          '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                            "<--" "<-<" "<<=" <<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                            "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                            "\\\\" "://"))
  (global-ligature-mode t))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (setq rainbow-delimiters-max-face-count 3
        rainbow-delimiters-outermost-only-face-count 1
        rainbow-delimiters-highlight-braces-p t
        rainbow-delimiters-highlight-brackets-p t
        rainbow-delimiters-highlight-parentheses-p t))
#+end_src

** Highlight Indent Guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-character ?\|
        highlight-indent-guides-responsive 'top
        highlight-indent-guides-delay 0
        highlight-indent-guides-auto-enabled t
        highlight-indent-guides-auto-character-face-perc 15))
#+end_src

** Drag Stuff
#+begin_src emacs-lisp
(use-package drag-stuff
  :init
  (drag-stuff-global-mode 1)
  :general
  ("M-p" . drag-stuff-up)
  ("M-n" . drag-stuff-down))
#+end_src

** EditorConfig
#+begin_src emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1)
  (setq editorconfig-trim-whitespaces-mode 'ws-butler-mode))
#+end_src

** No Littering
#+begin_src emacs-lisp
(use-package no-littering
  :config
  (setq no-littering-var-directory "~/.emacs.d/var/"
        no-littering-etc-directory "~/.emacs.d/etc/")
  (no-littering-theme-backups)
  (no-littering-theme-autosave))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :general
  (leader-key-def
    "f t" '(treemacs :which-key "treemacs"))
  :config
  (setq treemacs-collapse-dirs 3
        treemacs-deferred-git-apply-delay 0.5
        treemacs-display-in-side-window t
        treemacs-eldoc-display t
        treemacs-file-event-delay 2000
        treemacs-file-follow-delay 0.2
        treemacs-follow-after-init t
        treemacs-git-command-pipe ""
        treemacs-goto-tag-strategy 'refetch-index
        treemacs-indentation 2
        treemacs-indentation-string " "
        treemacs-is-never-other-window nil
        treemacs-max-git-entries 5000
        treemacs-missing-project-action 'ask
        treemacs-no-png-images nil
        treemacs-project-follow-cleanup nil
        treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position 'left
        treemacs-recenter-distance 0.1
        treemacs-recenter-after-file-follow nil
        treemacs-recenter-after-tag-follow nil
        treemacs-show-cursor nil
        treemacs-show-hidden-files t
        treemacs-silent-filewatch nil
        treemacs-silent-refresh nil
        treemacs-sorting 'alphabetic-desc
        treemacs-space-between-root-nodes t
        treemacs-tag-follow-cleanup t
        treemacs-tag-follow-delay 1.5
        treemacs-width 35))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-magit
  :after (treemacs magit))

(defun +treemacs/toggle ()
  "Toggle the treemacs window.
If a treemacs buffer exists and is visible, hide it.
If a treemacs buffer exists but isn't visible, show it.
If no treemacs buffer exists, create one and show it."
  (interactive)
  (require 'treemacs)
  (cond
   ((and (treemacs-get-local-window)
         (eq (treemacs-current-visibility) 'visible))
    (treemacs--hide))
   ((treemacs-get-local-window)
    (treemacs-select-window)
    (hl-line-mode -1) ; Doom disables hl-line in treemacs by default
    (with-current-buffer (window-buffer (selected-window))
      (when (bound-and-true-p winum-mode)
        (winum-update-window-number))))
   (t
    (treemacs)))
#+end_src

** Centaur Tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :init
  (centaur-tabs-mode t)
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 32
        centaur-tabs-set-icons t
        centaur-tabs-set-bar 'under
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-show-new-tab-button t
        centaur-tabs-cycle-scope 'tabs
        centaur-tabs-label-fixed-length 12
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-enable-ido-completion t
        centaur-tabs-enable-key-bindings t
        centaur-tabs-adjust-buffer-order t)
  :general
  (leader-key-def
    "t" '(:ignore t :which-key "tabs")
    "t n" '(centaur-tabs-forward :which-key "next tab")
    "t p" '(centaur-tabs-backward :which-key "previous tab")
    "t c" '(centaur-tabs-forward-group :which-key "next group")
    "t v" '(centaur-tabs-backward-group :which-key "previous group")
    "t t" '(centaur-tabs-counsel-switch-group :which-key "switch group")
    "t s" '(centaur-tabs-switch-to-buffer :which-key "switch buffer")))
#+end_src

* Final Initialization
#+begin_src emacs-lisp
;; Load custom settings from custom.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

;; Save session
(use-package desktop
  :config
  (setq desktop-path `(,user-emacs-directory)
        desktop-auto-save-timeout 600
        desktop-restore-frames nil
        desktop-restore-in-current-display t
        desktop-restore-forces-onscreen nil
        desktop-save 'ask-if-new)
  (desktop-save-mode 1))

;; Doom-like doctor functionality
(defun emacs-doctor ()
  "Check for potential issues in the Emacs configuration."
  (interactive)
  (let ((buffer (get-buffer-create "*Emacs Doctor*")))
    (with-current-buffer buffer
      (erase-buffer)
      (insert (propertize "Emacs Doctor\n" 'face '(:weight bold :height 1.5)))
      (insert "\nChecking for potential issues...\n\n")

      ;; Check for orphaned packages
      (let ((orphaned (cl-remove-if
                       (lambda (pkg)
                         (or (package-installed-p pkg)
                             (locate-library (symbol-name pkg))))
                       (mapcar #'car package-archive-contents))))
        (when orphaned
          (insert (propertize "Orphaned packages:\n" 'face '(:weight bold))
          (dolist (pkg orphaned)
            (insert (format "  - %s\n" pkg)))
          (insert "\n")))

      ;; Check for large files
      (let ((large-files
             (cl-remove-if-not
              (lambda (file) (> (nth 7 (file-attributes file)) 1000000)
              (directory-files user-emacs-directory t "\\.el$"))))
        (when large-files
          (insert (propertize "Large configuration files:\n" 'face '(:weight bold))
          (dolist (file large-files)
            (insert (format "  - %s (%s KB)\n"
                            (file-name-nondirectory file)
                            (/ (nth 7 (file-attributes file)) 1024)))
          (insert "\n")))

      ;; Check startup time
      (insert (propertize "Startup time:\n" 'face '(:weight bold))
      (insert (format "  %.2f seconds with %d garbage collections\n\n"
                      (float-time (time-subtract after-init-time before-init-time))
                      gcs-done))

      ;; Final advice
      (insert (propertize "Advice:\n" 'face '(:weight bold))
      (insert "1. Consider removing unused packages to reduce startup time\n")
      (insert "2. Review large configuration files for potential optimizations\n")
      (insert "3. Use `elpaca-delete' to remove orphaned packages\n\n")
      (insert "Configuration appears to be in good health otherwise!\n"))
    (display-buffer buffer)))

;; Print startup time
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

** Key Enhancements
1. =Performance Optimizations=
   - More aggressive garbage collection settings
   - Native compilation improvements
   - Better rendering performance settings
   - Optimized package loading
2. =Doom-like Features=
   - Improved keybindings organization
   - Better project management
   - Enhanced completion system
   - More comprehensive language support
   - Better session management
3. =Quality of Life Improvements=
   - Doom-like doctor functionality
   - Better error handling
   - More comprehensive documentation lookup
   - Improved session persistence
   - Better integration between packages
4. =Installation System=
   - Clear requirements section
   - Step-by-step installation instructions
   - Automatic package installation on first run
   - Rebuild command for native compilation

** Installation Instructions
1. =Requirements=:

   - Emacs 30+ compiled with native compilation, JSON, and tree-sitter
     support
   - 8GB+ RAM recommended
   - Nerd Fonts installed
   - Git for package management

2. =Installation Steps=:

   #+begin_src shell
   # Backup existing config
   mv ~/.emacs.d ~/.emacs.d.bak
   mv ~/.emacs ~/.emacs.bak

   # Clone this configuration
   git clone https://github.com/yourusername/emacs-config.git ~/.emacs.d

   # Install system dependencies (Debian/Ubuntu example)
   sudo apt install git ripgrep fd-find build-essential libgccjit0 libjansson4 libtree-sitter0

   # First startup will install all packages automatically
   emacs

   # After first startup, rebuild for native compilation
   M-x elpaca-rebuild-all
   #+end_src

This configuration provides a complete, optimized Emacs experience with
all the requested features while maintaining excellent performance and
usability.
