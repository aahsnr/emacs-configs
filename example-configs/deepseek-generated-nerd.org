#+TITLE: Ultimate Emacs 30 Configuration
#+AUTHOR: Your Name
#+DATE: 2023-11-15
#+STARTUP: overview

* Installation Instructions

** Requirements
- Emacs 30+ compiled with:
  - Native compilation (--with-native-compilation)
  - JSON support
  - Tree-sitter support
  - XWidgets (optional for web browsing)
  - GTK3 (recommended for better UI integration)
- 8GB+ RAM recommended for best performance
- Nerd Fonts installed (JetBrains Mono Nerd Font recommended)
- Git for package management

** Installation Steps
1. Backup your existing Emacs configuration:
   #+begin_src shell
   mv ~/.config/emacs ~/.config/emacs.bak
   mv ~/.emacs ~/.emacs.bak
   #+end_src

2. Clone this configuration:
   #+begin_src shell
   git clone https://github.com/yourusername/emacs-config.git ~/.config/emacs
   #+end_src

3. Install required system dependencies:
   #+begin_src shell
   # For Debian/Ubuntu
   sudo apt install git ripgrep fd-find build-essential libgccjit0 libjansson4 libtree-sitter0

   # For Arch Linux
   sudo pacman -S git ripgrep fd gcc libgccjit jansson tree-sitter
   #+end_src

4. First startup will automatically install all packages. This may take 10-20 minutes.

5. For optimal performance, compile all packages:
   #+begin_src emacs-lisp
   M-x elpaca-rebuild-all
   #+end_src

* Core Configuration
** Early Optimization
#+begin_src emacs-lisp
;; Set custom user directory
(setq user-emacs-directory "~/.config/emacs/")

;; Disable package.el completely
(setq package-enable-at-startup nil
      package--init-file-ensured t
      package-quickstart nil)

;; Optimize garbage collection
(setq gc-cons-threshold (* 64 1024 1024)
      gc-cons-percentage 0.6
      garbage-collection-messages t)

;; Disable unwanted UI elements
(setq inhibit-startup-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      frame-inhibit-implied-resize t
      frame-resize-pixelwise t
      inhibit-compacting-font-caches t
      warning-minimum-level :error)

;; Faster rendering
(setq bidi-paragraph-direction 'left-to-right
      bidi-inhibit-bpa t
      redisplay-skip-fontification-on-input t)

;; Native compilation settings
(setq native-comp-async-report-warnings-errors 'silent
      native-comp-deferred-compilation t
      native-comp-jit-compilation t
      native-comp-speed 3
      native-compile-target-directory (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

** Elpaca Package Manager
#+begin_src emacs-lisp
;; Bootstrap Elpaca
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                      (plist-get order :repo) repo))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                      (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                      "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
      ((error) (warn "%s" err) (delete-directory repo 'recursive)))))

;; Initialize Elpaca
(elpaca-generate-autoloads (expand-file-name "elpaca/" elpaca-repos-directory) "elpaca-autoloads.el")
(load (expand-file-name "elpaca-autoloads.el" elpaca-repos-directory) nil t)

;; Use-package integration
(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t
        elpaca-verbose-init t))

;; Ensure built-in org is used
(elpaca nil (require 'org))

;; Auto-update packages
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t
        auto-package-update-interval 7
        auto-package-update-prompt-before-update t)
  (auto-package-update-maybe))

;; Doom-like envvar support
(use-package envrc
  :config
  (envrc-global-mode))
#+end_src

** UI Configuration
#+begin_src emacs-lisp
;; Theme
(use-package catppuccin-theme
  :init
  (setq catppuccin-flavor 'mocha
        catppuccin-italic-strings t
        catppuccin-italic-comments t
        catppuccin-highlight-matches t)
  :config
  (load-theme 'catppuccin t)
  (catppuccin-reload))

;; Fonts
(set-face-attribute 'default nil
                   :font "JetBrainsMono Nerd Font-12"
                   :weight 'medium
                   :width 'normal)
(set-face-attribute 'variable-pitch nil
                   :font "Ubuntu Nerd Font-12"
                   :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                   :font "JetBrainsMono Nerd Font-12")
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

;; Disable UI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode 0)
(setq visible-bell nil
      ring-bell-function 'ignore
      use-dialog-box nil
      redisplay-dont-pause t
      frame-title-format "%b"
      icon-title-format "%b")

;; Line numbers
(setq display-line-numbers-type 'relative
      display-line-numbers-width-start t)
(global-display-line-numbers-mode 1)
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; Smooth scrolling
(use-package emacs
  :ensure nil
  :config
  (setq scroll-margin 2
        scroll-conservatively 101
        scroll-preserve-screen-position t
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse t
        fast-but-imprecise-scrolling t
        redisplay-skip-fontification-on-input t))

;; Nerd Icons Configuration
(use-package nerd-icons
  :config
  (setq nerd-icons-font-family "Symbols Nerd Font Mono"
        nerd-icons-color-icons t
        nerd-icons-scale-factor 1.0
        nerd-icons-default-face 'nerd-icons-dsilver))

(use-package nerd-icons-completion
  :after (marginalia nerd-icons)
  :config
  (nerd-icons-completion-mode))

(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

;; Modeline with Nerd Icons
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 25
        doom-modeline-bar-width 4
        doom-modeline-buffer-file-name-style 'relative-from-project
        doom-modeline-icon (nerd-icons-sucicon "nf-seti-emacs")
        doom-modeline-major-mode-icon t
        doom-modeline-minor-modes t
        doom-modeline-buffer-state-icon t
        doom-modeline-buffer-modification-icon t
        doom-modeline-unicode-fallback t
        doom-modeline-enable-word-count nil
        doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
        doom-modeline-buffer-encoding nil
        doom-modeline-indent-info nil
        doom-modeline-checker-simple-format t
        doom-modeline-vcs-max-length 12
        doom-modeline-persp-name t
        doom-modeline-display-default-persp-name nil
        doom-modeline-persp-icon t)
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
    '(misc-info persp-name lsp github debug minor-modes input-method indent-info buffer-encoding major-mode process vcs checker)))
#+end_src

* File Management
** Dired Configuration
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq dired-listing-switches "-alh --group-directories-first"
        dired-auto-revert-buffer t
        dired-dwim-target t
        dired-hide-details-hide-symlink-targets nil
        dired-kill-when-opening-new-dired-buffer t
        dired-recursive-copies 'always
        dired-recursive-deletes 'always
        delete-by-moving-to-trash t
        dired-clean-up-buffers-too t
        dired-clean-confirm-killing-deleted-buffers t))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :general
  (:keymaps 'dired-mode-map
   "." 'dired-hide-dotfiles-mode))

(use-package dired-ranger
  :after dired)

(use-package dired-subtree
  :after dired
  :general
  (:keymaps 'dired-mode-map
   "TAB" 'dired-subtree-toggle))

(use-package diredfl
  :hook (dired-mode . diredfl-mode))

;; Only Nerd Icons for Dired
(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

* Final Initialization
#+begin_src emacs-lisp
;; Load custom settings from custom.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

;; Enable server mode for emacsclient
(server-start)

;; Save session
(use-package desktop
  :config
  (setq desktop-path `(,user-emacs-directory)
        desktop-auto-save-timeout 600
        desktop-restore-frames nil
        desktop-restore-in-current-display t
        desktop-restore-forces-onscreen nil
        desktop-save 'ask-if-new)
  (desktop-save-mode 1))

;; Print startup time
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

