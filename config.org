#+TITLE: Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+STARTUP: overview
#+PROPERTY: :tangle yes :lexical yes

* Emacs Initialization

** Built-in Package Management
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

;; Add package archives
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			 ("melpa" . "https://melpa.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))


(require 'use-package)
(setq use-package-always-ensure t
      use-package-compute-statistics t)
#+end_src

** Add to Path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/lisp/")
#+end_src

** Reload Emacs Configuration
#+begin_src emacs-lisp
(defun reload-config ()
  "Reload the Emacs configuration from config.org."
  (interactive)
  (let ((config-file (expand-file-name "config.org" user-emacs-directory)))
    (if (file-exists-p config-file)
        (progn
          (message "Reloading configuration...")
          (org-babel-load-file config-file)
          (message "Configuration reloaded successfully!"))
      (error "Configuration file %s not found" config-file))))

;; Bind to a convenient key combination
(global-set-key (kbd "C-c r") 'reload-config)
#+end_src

* Org
** Core Setup
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :config
  (org-overview)
  (setq org-src-preserve-indentation t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-src-window-setup 'current-window
	org-confirm-babel-evaluate nil))
#+end_src

** Structure Templates
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("e" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("ltx" . "src latex")))
#+end_src

** Markdown to Org
#+begin_src emacs-lisp
(defun md-to-org (md-file &optional org-file)
  "Convert a Markdown file to Org mode format using pandoc.
MD-FILE is the input Markdown file path.
ORG-FILE is the optional output Org file path. If not provided,
it will use the same name as MD-FILE but with .org extension."
  (interactive "fMarkdown file: ")
  (let* ((input-file (expand-file-name md-file))
         (output-file (or org-file
                         (concat (file-name-sans-extension input-file) ".org")))
         (pandoc-cmd (format "pandoc -f markdown -t org %s -o %s"
                            (shell-quote-argument input-file)
                            (shell-quote-argument output-file))))
    (unless (executable-find "pandoc")
      (error "Pandoc not found. Please install pandoc to use this function"))
    (unless (file-exists-p input-file)
      (error "Input file does not exist: %s" input-file))
    (when (file-exists-p output-file)
      (unless (y-or-n-p "Output file exists. Overwrite? ")
        (error "Conversion cancelled")))
    (message "Converting %s to %s..." input-file output-file)
    (let ((result (shell-command pandoc-cmd)))
      (if (= result 0)
          (progn
            (message "Successfully converted to %s" output-file)
            (when (y-or-n-p "Open the converted file? ")
              (find-file output-file)))
        (error "Pandoc conversion failed with exit code %d" result)))))

(defun md-to-org-current-buffer ()
  "Convert the current Markdown buffer to Org mode format.
Saves the current buffer first if modified, then converts it."
  (interactive)
  (unless (buffer-file-name)
    (error "Buffer is not associated with a file"))
  (when (buffer-modified-p)
    (if (y-or-n-p "Buffer modified. Save before converting? ")
        (save-buffer)
      (error "Please save the buffer before converting")))
  (md-to-org (buffer-file-name)))

(defun md-to-org-region (start end)
  "Convert the selected region from Markdown to Org mode format using pandoc.
START and END define the region boundaries.
The converted text replaces the original region."
  (interactive "r")
  (unless (executable-find "pandoc")
    (error "Pandoc not found. Please install pandoc to use this function"))
  (unless (use-region-p)
    (error "No region selected"))
  (when (= start end)
    (error "Empty region selected"))
  
  (let* ((md-text (buffer-substring-no-properties start end))
         (temp-md-file (make-temp-file "md-to-org-" nil ".md"))
         (temp-org-file (make-temp-file "md-to-org-" nil ".org"))
         (pandoc-cmd (format "pandoc -f markdown -t org %s -o %s"
                            (shell-quote-argument temp-md-file)
                            (shell-quote-argument temp-org-file))))
    (unwind-protect
        (progn
          ;; Write markdown text to temp file with proper encoding
          (with-temp-file temp-md-file
            (insert md-text))
          ;; Convert using pandoc
          (let ((result (shell-command pandoc-cmd)))
            (if (= result 0)
                (if (file-exists-p temp-org-file)
                    (let ((org-text (with-temp-buffer
                                     (insert-file-contents temp-org-file)
                                     (buffer-string))))
                      ;; Remove trailing newline if original text didn't have one
                      (when (and (> (length org-text) 0)
                                 (not (string-suffix-p "\n" md-text))
                                 (string-suffix-p "\n" org-text))
                        (setq org-text (substring org-text 0 -1)))
                      ;; Replace the region
                      (save-excursion
                        (delete-region start end)
                        (goto-char start)
                        (insert org-text))
                      (message "Region converted from Markdown to Org mode"))
                  (error "Pandoc output file not created"))
              (error "Pandoc conversion failed with exit code %d" result))))
      ;; Clean up temp files
      (when (file-exists-p temp-md-file)
        (delete-file temp-md-file))
      (when (file-exists-p temp-org-file)
        (delete-file temp-org-file)))))

(defun md-to-org-region-to-new-buffer (start end)
  "Convert the selected region from Markdown to Org mode and show in new buffer.
START and END define the region boundaries.
Creates a new buffer with the converted content instead of replacing the region."
  (interactive "r")
  (unless (executable-find "pandoc")
    (error "Pandoc not found. Please install pandoc to use this function"))
  (unless (use-region-p)
    (error "No region selected"))
  (when (= start end)
    (error "Empty region selected"))
  
  (let* ((md-text (buffer-substring-no-properties start end))
         (temp-md-file (make-temp-file "md-to-org-" nil ".md"))
         (temp-org-file (make-temp-file "md-to-org-" nil ".org"))
         (pandoc-cmd (format "pandoc -f markdown -t org %s -o %s"
                            (shell-quote-argument temp-md-file)
                            (shell-quote-argument temp-org-file))))
    (unwind-protect
        (progn
          ;; Write markdown text to temp file
          (with-temp-file temp-md-file
            (insert md-text))
          ;; Convert using pandoc
          (let ((result (shell-command pandoc-cmd)))
            (if (= result 0)
                (if (file-exists-p temp-org-file)
                    (let ((org-text (with-temp-buffer
                                     (insert-file-contents temp-org-file)
                                     (buffer-string))))
                      ;; Create new buffer with converted content
                      (with-current-buffer (get-buffer-create "*Markdown to Org Conversion*")
                        (erase-buffer)
                        (insert org-text)
                        (org-mode)
                        (goto-char (point-min))
                        (display-buffer (current-buffer)))
                      (message "Converted text displayed in new buffer"))
                  (error "Pandoc output file not created"))
              (error "Pandoc conversion failed with exit code %d" result))))
      ;; Clean up temp files
      (when (file-exists-p temp-md-file)
        (delete-file temp-md-file))
      (when (file-exists-p temp-org-file)
        (delete-file temp-org-file)))))
#+end_src

* TODO Dired
** Core Setup

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (dired-hide-details-hide-symlink-targets nil)
  (dired-hide-details-hide-information-lines nil)
  (dired-dwim-target t)
  (dired-auto-revert-buffer t)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'top)
  (dired-create-destination-dirs 'ask)
  (dired-vc-rename-file t)
  (dired-do-revert-buffer t)
  (delete-by-moving-to-trash t)
  :config
  ;; Gruvbox-themed dired faces with direct hex codes
  (custom-set-faces
   '(dired-directory ((t (:foreground "#83a598" :weight bold))))
   '(dired-header ((t (:foreground "#fabd2f" :weight bold))))
   '(dired-symlink ((t (:foreground "#8ec07c"))))
   '(dired-marked ((t (:foreground "#fb4934" :weight bold))))
   '(dired-flagged ((t (:foreground "#fb4934" :background "#3c3836"))))
   '(dired-warning ((t (:foreground "#fe8019" :weight bold))))
   '(dired-perm-write ((t (:foreground "#b8bb26"))))
   '(dired-special ((t (:foreground "#d3869b"))))
   '(dired-ignored ((t (:foreground "#928374"))))))
#+end_src

** Dired-x for additional functionality

#+begin_src emacs-lisp
(use-package dired-x
  :ensure nil
  :after dired
  :custom
  (dired-x-hands-off-my-keys nil)
  :config
  ;; Define dired-omit-files to prevent void-variable errors
  (setq dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$")
  (setq dired-omit-verbose nil))
#+end_src

** Nerd Icons Integration

#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :after (dired nerd-icons)
  :hook (dired-mode . nerd-icons-dired-mode)
  :config
  ;; Gruvbox-themed nerd-icons-dired faces
  (custom-set-faces
   '(nerd-icons-dired-dir-face ((t (:foreground "#83a598" :weight bold))))
   '(nerd-icons-dired-file-face ((t (:foreground "#ebdbb2"))))
   '(nerd-icons-dired-symlink-face ((t (:foreground "#8ec07c"))))
   '(nerd-icons-dired-executable-face ((t (:foreground "#b8bb26"))))
   '(nerd-icons-dired-compressed-face ((t (:foreground "#fabd2f"))))
   '(nerd-icons-dired-audio-face ((t (:foreground "#d3869b"))))
   '(nerd-icons-dired-video-face ((t (:foreground "#fb4934"))))
   '(nerd-icons-dired-image-face ((t (:foreground "#fe8019"))))))
#+end_src

** TODO Dirvish - Modern dired interface
=Icons not working in dirvish mode=
#+begin_src emacs-lisp
(use-package dirvish
  :after (dired dired-x nerd-icons-dired)
  :custom
  (dirvish-quick-access-entries
   '(("h" "~/" "Home")
     ("d" "~/Downloads/" "Downloads")
     ("D" "~/Documents/" "Documents")
     ("p" "~/Projects/" "Projects")
     ("/" "/" "Root")))
  (dirvish-mode-line-format
   '(:left (sort symlink) :right (omit yank index)))
  (dirvish-attributes
   '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
  (dirvish-subtree-state-style 'nerd)
  (dirvish-path-separators (list "  " "  " "  "))
  (dirvish-header-line-format
   '(:left (path) :right (free-space)))
  (dirvish-use-header-line t)
  (dirvish-use-mode-line t)
  :config
  ;; Gruvbox-themed dirvish faces with direct hex codes
  (custom-set-faces
   '(dirvish-hl-line ((t (:background "#3c3836"))))
   '(dirvish-emerge-group-title ((t (:foreground "#fabd2f" :weight bold))))
   '(dirvish-emerge-group-separator ((t (:foreground "#928374"))))
   '(dirvish-git-commit-message ((t (:foreground "#bdae93"))))
   '(dirvish-git-commit-author ((t (:foreground "#83a598"))))
   '(dirvish-subtree-guide ((t (:foreground "#928374"))))
   '(dirvish-path-separator ((t (:foreground "#928374"))))
   '(dirvish-free-space ((t (:foreground "#8ec07c"))))
   '(dirvish-yank-line ((t (:background "#504945"))))
   '(dirvish-index-number ((t (:foreground "#fe8019"))))
   '(dirvish-sort-indicator ((t (:foreground "#b8bb26"))))
   '(dirvish-file-size ((t (:foreground "#a89984"))))
   '(dirvish-file-time ((t (:foreground "#a89984")))))

  ;; Initialize dirvish
  (dirvish-override-dired-mode))
  #+end_src

** Dired-subtree for collapsible directory trees

#+begin_src emacs-lisp
(use-package dired-subtree
  :after dired
  :custom
  (dired-subtree-use-backgrounds nil)
  (dired-subtree-line-prefix "  ")
  :config
  ;; Gruvbox-themed dired-subtree
  (custom-set-faces
   '(dired-subtree-depth-1-face ((t (:background "#282828"))))
   '(dired-subtree-depth-2-face ((t (:background "#3c3836"))))
   '(dired-subtree-depth-3-face ((t (:background "#282828"))))
   '(dired-subtree-depth-4-face ((t (:background "#3c3836"))))
   '(dired-subtree-depth-5-face ((t (:background "#282828"))))
   '(dired-subtree-depth-6-face ((t (:background "#3c3836"))))))
#+end_src

** Dired-narrow for filtering

#+begin_src emacs-lisp
(use-package dired-narrow
  :after dired
  :config
  ;; Gruvbox-themed dired-narrow
  (custom-set-faces
   '(dired-narrow-blink ((t (:foreground "#fabd2f" :background "#504945"))))
   '(dired-narrow-rejected ((t (:foreground "#928374" :strike-through t))))
   '(dired-narrow-match ((t (:foreground "#b8bb26" :weight bold))))))
#+end_src

** Dired-ranger for copy/move operations

#+begin_src emacs-lisp
(use-package dired-ranger :after dired)
#+end_src

** Dired-collapse for collapsing single-child directories

#+begin_src emacs-lisp
(use-package dired-collapse
  :after dired
  :hook (dired-mode . dired-collapse-mode)
  :config
  ;; Gruvbox-themed dired-collapse faces with direct hex codes
  (custom-set-faces
   '(dired-collapse-face ((t (:foreground "#83a598" :weight normal))))))
#+end_src

** Additional syntax highlighting for dired

#+begin_src emacs-lisp
(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and directory preview as well
   (dirvish-directory-view-mode . diredfl-mode))
  :config
  (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src

** Misc

#+begin_src emacs-lisp
;; Auto-refresh dired buffers
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Ensure dired-omit-mode is available after dired-x loads
(with-eval-after-load 'dired-x
  (add-hook 'dired-mode-hook 'dired-omit-mode))

(setq delete-by-moving-to-trash t)
#+end_src

* Evil
** Core Setup
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil
        evil-want-Y-yank-to-eol t)
  (evil-mode 1)
  :config
  ;; Evil settings
  (setq evil-respect-visual-line-mode t
        evil-undo-system 'undo-redo
        evil-search-module 'evil-search
        evil-ex-complete-emacs-commands nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-shift-round nil
        evil-want-C-d-scroll t
        evil-want-fine-undo t
        evil-kill-on-visual-paste nil
        evil-move-cursor-back nil
        evil-want-minibuffer-navigation t
        evil-ex-visual-char-range t
        evil-shift-width 2
        evil-symbol-word-search t
        evil-cross-lines t
        evil-auto-indent t
        evil-ex-substitute-global t)

  ;; Enhanced cursor appearance
  (setq evil-normal-state-cursor '(box "#fe8019")
        evil-insert-state-cursor '(bar "#fb4934")
        evil-visual-state-cursor '(hollow "#fe8019")
        evil-replace-state-cursor '(hbar "#fb4934")
        evil-operator-state-cursor '(evil-half-cursor "#fb4934")
        evil-motion-state-cursor '(box "#b8bb26")
        evil-emacs-state-cursor '(hbar "#d3869b"))

  ;; Set initial states for various modes
  (dolist (mode '(messages-buffer-mode dashboard-mode compilation-mode
                  grep-mode occur-mode help-mode Info-mode woman-mode
                  man-mode package-menu-mode))
    (evil-set-initial-state mode 'normal))

  (dolist (mode '(term-mode shell-mode eshell-mode))
    (evil-set-initial-state mode 'emacs))

  ;; Custom functions
  (defun my/save-and-kill-buffer ()
    "Save and kill current buffer."
    (interactive)
    (save-buffer)
    (kill-current-buffer))

  (defun my/evil-scroll-down-center ()
    "Scroll down and center cursor."
    (interactive)
    (evil-scroll-down nil)
    (evil-scroll-line-to-center nil))

  (defun my/evil-scroll-up-center ()
    "Scroll up and center cursor."
    (interactive)
    (evil-scroll-up nil)
    (evil-scroll-line-to-center nil)))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil Extensions
#+begin_src emacs-lisp
;; Evil Surround - Surround text objects
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))

(use-package evil-nerd-commenter :after evil)
(use-package evil-numbers :after evil)
(use-package evil-args :after evil)

;; Evil Exchange - Exchange text regions
(use-package evil-exchange
  :after evil
  :config
  (evil-exchange-install))

;; Evil Indent Plus - Indent text objects
(use-package evil-indent-plus
  :after evil
  :config
  (evil-indent-plus-default-bindings))

;; Evil Visualstar - Search for selected text
(use-package evil-visualstar
  :after evil
  :config
  (global-evil-visualstar-mode))

;; Evil Matchit - Jump between matching tags/parentheses
(use-package evil-matchit
  :after evil
  :config
  (global-evil-matchit-mode 1))

;; Evil Snipe - Enhanced f/t motions
(use-package evil-snipe
  :after evil
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)
  (setq evil-snipe-smart-case t))

;; Evil Lion - Align text
(use-package evil-lion
  :after evil
  :config
  (evil-lion-mode))

;; Evil Multiedit - Multiple cursors for Evil
(use-package evil-multiedit
  :after evil
  :config
  (evil-multiedit-default-keybinds))

;; Evil Goggles - Visual feedback for Evil operations
(use-package evil-goggles
  :after evil
  :config
  (evil-goggles-mode)
  (setq evil-goggles-duration 0.1))

(use-package evil-escape
  :init
  (evil-escape-mode 1)
  :config
  (setq evil-escape-key-sequence "jk"
        evil-escape-delay 0.2
        evil-escape-excluded-modes '(dired-mode)
        evil-escape-excluded-states '()))
#+end_src

* TODO Completion System
** Core Completion Framework
*** Emacs Base Completion 
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :custom
  ;; Enable context menu. `vertico-multiform-mode' adds a menu in the minibuffer
  ;; to switch display modes.
  (context-menu-mode t)
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  (completion-cycle-threshold 3)
  (completions-detailed t)
  ;; TAB cycle if there are only few candidates
  (completion-cycle-threshold 3)
  ;; Check if this messes up 
  (completion-auto-help 'always)
  (completion-auto-select 'second-tab)
  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  ;; see if disabling this allows for tab for cycling corfu selection
  ;; (tab-always-indent 'complete) 
  ;; Emacs 30 and newer: Disable Ispell completion function.
  ;; Try `cape-dict' as an alternative.
  (text-mode-ispell-word-completion nil)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src

*** Vertico - Vertical completion interface

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)
  (vertico-scroll-margin 2)
  (vertico-resize nil)
  (vertico-count 10)
  :config
  ;; Gruvbox theme integration for vertico
  (custom-set-faces
   '(vertico-current ((t (:background "#504945" :foreground "#ebdbb2" :weight bold))))
   '(vertico-group-title ((t (:foreground "#d3869b" :weight bold))))
   '(vertico-group-separator ((t (:foreground "#7c6f64"))))
   '(vertico-multiline ((t (:foreground "#83a598"))))))
#+end_src
*** Corfu - In-buffer completion
#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-delay 0.6)
  (corfu-auto-prefix 2)
  (corfu-quit-at-boundary 'separator)
  (corfu-quit-no-match 'separator)
  (corfu-preview-current 'insert)
  (corfu-preselect 'prompt)
  (corfu-on-exact-match nil)
  (corfu-scroll-margin 5)
  :init
  (global-corfu-mode)
  :config
  ;; Gruvbox theme integration for corfu
  (custom-set-faces
   '(corfu-default ((t (:background "#282828" :foreground "#ebdbb2"))))
   '(corfu-current ((t (:background "#504945" :foreground "#ebdbb2" :weight bold))))
   '(corfu-bar ((t (:background "#b16286"))))
   '(corfu-border ((t (:background "#7c6f64"))))
   '(corfu-annotations ((t (:foreground "#a89984" :italic t))))
   '(corfu-deprecated ((t (:foreground "#7c6f64" :strike-through t))))))
#+end_src

*** Corfu Extensions

#+begin_src emacs-lisp
(use-package corfu-history
  :ensure nil
  :after (corfu savehist)
  :init (corfu-history-mode 1)
  :config (add-to-list 'savehist-additional-variables 'corfu-history))

(use-package corfu-popupinfo
  :ensure nil
  :after corfu
  :init (corfu-popupinfo-mode 1)
  :custom (corfu-popupinfo-delay '(0.5 . 0.2))
  :config
  (custom-set-faces
   '(corfu-popupinfo ((t (:background "#282828" :foreground "#ebdbb2"))))
   '(corfu-popupinfo-documentation ((t (:foreground "#a89984" :italic t))))))
#+end_src

** Annotations, Filtering, and Search
*** Marginalia - Rich annotations in minibuffer

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :init (marginalia-mode)
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right)
  :config
  (custom-set-faces
   '(marginalia-archive ((t (:foreground "#b8bb26"))))
   '(marginalia-char ((t (:foreground "#fe8019"))))
   '(marginalia-date ((t (:foreground "#83a598"))))
   '(marginalia-documentation ((t (:foreground "#a89984" :italic t))))
   '(marginalia-file-name ((t (:foreground "#ebdbb2"))))
   '(marginalia-file-owner ((t (:foreground "#d3869b"))))
   '(marginalia-file-priv-dir ((t (:foreground "#83a598"))))
   '(marginalia-file-priv-exec ((t (:foreground "#b8bb26"))))
   '(marginalia-file-priv-link ((t (:foreground "#8ec07c"))))
   '(marginalia-file-priv-read ((t (:foreground "#fe8019"))))
   '(marginalia-file-priv-write ((t (:foreground "#fb4934"))))
   '(marginalia-function ((t (:foreground "#83a598"))))
   '(marginalia-key ((t (:foreground "#fe8019"))))
   '(marginalia-lighter ((t (:foreground "#7c6f64"))))
   '(marginalia-list ((t (:foreground "#8ec07c"))))
   '(marginalia-mode ((t (:foreground "#d3869b"))))
   '(marginalia-modified ((t (:foreground "#fabd2f"))))
   '(marginalia-null ((t (:foreground "#7c6f64"))))
   '(marginalia-number ((t (:foreground "#fe8019"))))
   '(marginalia-size ((t (:foreground "#b8bb26"))))
   '(marginalia-string ((t (:foreground "#b8bb26"))))
   '(marginalia-symbol ((t (:foreground "#d3869b"))))
   '(marginalia-true ((t (:foreground "#b8bb26"))))
   '(marginalia-type ((t (:foreground "#83a598"))))
   '(marginalia-value ((t (:foreground "#ebdbb2"))))
   '(marginalia-variable ((t (:foreground "#8ec07c"))))
   '(marginalia-version ((t (:foreground "#b8bb26"))))))
#+end_src

*** Orderless - Fuzzy matching completion style

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion))))
  :config
  (custom-set-faces
   '(orderless-match-face-0 ((t (:foreground "#d3869b" :weight bold))))
   '(orderless-match-face-1 ((t (:foreground "#83a598" :weight bold))))
   '(orderless-match-face-2 ((t (:foreground "#b8bb26" :weight bold))))
   '(orderless-match-face-3 ((t (:foreground "#fabd2f" :weight bold))))))
#+end_src

*** Corfu/Orderless Integration
#+begin_src emacs-lisp
(with-eval-after-load 'corfu
  (with-eval-after-load 'orderless
    (orderless-define-completion-style orderless-literal-only
      (orderless-style-dispatchers nil)
      (orderless-matching-styles '(orderless-literal)))
    
    (add-hook 'corfu-mode-hook
              (lambda ()
		(setq-local completion-styles '(orderless-literal-only basic)
                            completion-category-overrides nil
                            completion-category-defaults nil)))))
#+end_src

*** Consult - Enhanced search commands

#+begin_src emacs-lisp
(use-package consult
  :after vertico
  :custom
  ;; Basic consult settings
  (consult-narrow-key "<")
  (consult-line-numbers-widen t)
  (consult-async-min-input 2)
  (consult-async-refresh-delay 0.15)
  (consult-async-input-throttle 0.2)
  (consult-async-input-debounce 0.1)
  
  ;; Use fd-find instead of find
  (consult-find-args "fd --color=never --full-path")
  
  ;; Enhanced ripgrep configuration
  (consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --with-filename --line-number --search-zip --hidden --glob '!.git/'")
  
  ;; Use ripgrep for consult-grep as well
  (consult-grep-args "rg --null --line-buffered --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --with-filename --line-number --search-zip")
  
  :config
  ;; Configure xref and registers
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref
        register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Enhanced project detection
  (when (fboundp 'project-current)
    (setq consult-project-function
          (lambda (_)
            (when-let (project (project-current))
              (if (fboundp 'project-root)
                  (project-root project)
                (car (project-roots project)))))))

  ;; Configure consult preview
  (setq consult-preview-key "M-.")
  
  (custom-set-faces
   '(consult-bookmark ((t (:foreground "#d3869b"))))
   '(consult-buffer ((t (:foreground "#ebdbb2"))))
   '(consult-file ((t (:foreground "#8ec07c"))))
   '(consult-imenu-prefix ((t (:foreground "#7c6f64"))))
   '(consult-key ((t (:foreground "#fe8019"))))
   '(consult-line-number ((t (:foreground "#7c6f64"))))
   '(consult-line-number-prefix ((t (:foreground "#504945"))))
   '(consult-line-number-wrapped ((t (:foreground "#fb4934"))))
   '(consult-narrow-indicator ((t (:foreground "#fabd2f"))))
   '(consult-preview-cursor ((t (:background "#fe8019"))))
   '(consult-preview-error ((t (:foreground "#fb4934"))))
   '(consult-preview-insertion ((t (:background "#b8bb26" :foreground "#282828"))))
   '(consult-preview-line ((t (:background "#504945"))))
   '(consult-preview-match ((t (:background "#d3869b" :foreground "#282828"))))
   '(consult-separator ((t (:foreground "#7c6f64"))))))
#+end_src

*** TODO Keybindings
=separate out the keybindings for their respective setups=
#+begin_src emacs-lisp
;; ;; Buffer operations (SPC b)
;; (global-leader-key
;;  "b" '(:ignore t :which-key "buffer")
;;  "bb" '(consult-buffer :which-key "switch buffer")
;;  "br" '(consult-recent-file :which-key "recent files")
;;  "bB" '(consult-buffer-other-window :which-key "switch buffer other window")
;;  "bi" '(consult-imenu :which-key "imenu")
;;  "bI" '(consult-imenu-multi :which-key "imenu multi")
;;  "bo" '(consult-outline :which-key "outline")
;;  "bm" '(consult-bookmark :which-key "bookmarks")
;;  "by" '(consult-yank-pop :which-key "yank ring"))

;; ;; File operations (SPC f)

;; ;; Search operations (SPC s)
;; (global-leader-key
;;  "s" '(:ignore t :which-key "search")
;;  "ss" '(consult-line :which-key "search line")
;;  "sS" '(consult-line-multi :which-key "search line multi")
;;  "sp" '(consult-ripgrep :which-key "ripgrep project")
;;  "sP" '(consult-git-grep :which-key "git grep")
;;  "sd" '(consult-find :which-key "find file")
;;  "sk" '(consult-keep-lines :which-key "keep lines")
;;  "sK" '(consult-flush-lines :which-key "flush lines")
;;  "sf" '(consult-focus-lines :which-key "focus lines"))

;; ;; Jump/Go operations (SPC j)
;; (global-leader-key
;;  "j" '(:ignore t :which-key "jump")
;;  "jj" '(consult-line :which-key "jump to line")
;;  "jm" '(consult-mark :which-key "jump to mark")
;;  "jM" '(consult-global-mark :which-key "jump to global mark")
;;  "jo" '(consult-outline :which-key "jump to outline")
;;  "ji" '(consult-imenu :which-key "jump to imenu")
;;  "jI" '(consult-imenu-multi :which-key "jump to imenu multi"))

;; ;; Help operations (SPC h)
;; (global-leader-key
;;  "h" '(:ignore t :which-key "help")
;;  "ha" '(consult-apropos :which-key "apropos")
;;  "hm" '(consult-man :which-key "man pages")
;;  "hi" '(consult-info :which-key "info"))

;; ;; Project operations (SPC p)
;; (global-leader-key
;;  "p" '(:ignore t :which-key "project")
;;  "pf" '(consult-find :which-key "find file in project")
;;  "pp" '(consult-project-buffer :which-key "project buffers")
;;  "ps" '(consult-ripgrep :which-key "search in project"))

;; ;; Register operations (SPC r)
;; (global-leader-key
;;  "r" '(:ignore t :which-key "register")
;;  "rr" '(consult-register :which-key "registers")
;;  "rs" '(consult-register-store :which-key "store register")
;;  "rl" '(consult-register-load :which-key "load register"))

;; ;; Error/Compilation operations (SPC e)
;; (global-leader-key
;;  "e" '(:ignore t :which-key "error")
;;  "ee" '(consult-flymake :which-key "flymake errors")
;;  "ec" '(consult-compile-error :which-key "compilation errors"))

;; ;; Version control operations (SPC g)
;; (global-leader-key
;;  "g" '(:ignore t :which-key "git")
;;  "gs" '(consult-git-grep :which-key "git grep"))

;; ;; Alternative single-key bindings for frequently used commands
;; (general-define-key
;;  :keymaps 'override
;;  "C-s" 'consult-line
;;  "C-x b" 'consult-buffer
;;  "C-x C-r" 'consult-recent-file
;;  "M-y" 'consult-yank-pop
;;  "M-g g" 'consult-goto-line
;;  "M-g m" 'consult-mark
;;  "M-g M" 'consult-global-mark
;;  "M-g o" 'consult-outline
;;  "M-g i" 'consult-imenu
;;  "C-c h" 'consult-history
;;  "C-c k" 'consult-kmacro
;;  "C-c m" 'consult-mode-command
;;  "C-c c" 'consult-complex-command)
#+end_src

*** Consult Extensions

#+begin_src emacs-lisp
(use-package consult-flymake :ensure nil :after (consult flymake))
(use-package consult-dir :after consult)
#+end_src

*** Wgrep - Editable grep buffers

#+begin_src emacs-lisp
(use-package wgrep
  :after consult
  :custom
  (wgrep-auto-save-buffer t)
  (wgrep-enable-key "r")
  (wgrep-change-readonly-file t)
  :config
  ;; Gruvbox theme for wgrep
  (custom-set-faces
   '(wgrep-face ((t (:background "#504945" :foreground "#ebdbb2"))))
   '(wgrep-file-face ((t (:foreground "#83a598" :weight bold))))
   '(wgrep-reject-face ((t (:foreground "#fb4934" :weight bold))))
   '(wgrep-done-face ((t (:foreground "#b8bb26" :weight bold))))))
#+end_src

** Actions and Completion-at-Point
*** Embark - Context-aware actions

#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :after (vertico consult)
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings))
  :init
  ;; Use Embark for prefix help
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  (custom-set-faces
   '(embark-keybinding ((t (:foreground "#fe8019" :weight bold))))
   '(embark-collect-marked ((t (:background "#504945" :foreground "#ebdbb2"))))
   '(embark-collect-group-title ((t (:foreground "#d3869b" :weight bold))))
   '(embark-collect-group-separator ((t (:foreground "#7c6f64")))))
  
  ;; which-key integration
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (when (fboundp 'which-key--hide-popup-ignore-command)
            (which-key--hide-popup-ignore-command))
        (when (fboundp 'which-key--show-keymap)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if prefix (format " with <%s>" prefix) "")))
           (if prefix
               (pcase (lookup-key keymap (kbd prefix))
                 ((and (pred keymapp) km) km)
                 (_ (key-binding (kbd prefix))))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding)))))))))
  (when (fboundp 'which-key--show-keymap)
    (setq embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))))
#+end_src

*** Embark-Consult Integration

#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Cape - Completion at point extensions

#+begin_src emacs-lisp
(use-package cape
  :after corfu
  :bind (("C-c p p" . completion-at-point)
         ("C-c p t" . complete-tag)
         ("C-c p d" . cape-dabbrev)
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c p a" . cape-abbrev)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p :" . cape-emoji)
         ("C-c p \\" . cape-tex))
  :init
  ;; Add useful defaults to completion-at-point-functions
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  :config
  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  ;; Ensure that pcomplete does not write to the buffer
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

** Custom Functions

#+begin_src emacs-lisp
;;; Custom search functions
(defun my/consult-line-symbol-at-point ()
  "Run consult-line with symbol at point as initial input."
  (interactive)
  (let ((symbol (thing-at-point 'symbol)))
    (consult-line symbol)))

(defun my/consult-ripgrep-symbol-at-point ()
  "Run consult-ripgrep with symbol at point as initial input."
  (interactive)
  (let ((symbol (thing-at-point 'symbol)))
    (when symbol
      (consult-ripgrep nil symbol))))

;;; Helper function for migrating from Company
(defun my/cape-company-to-capf (backend)
  "Convert company BACKEND to cape completion-at-point-function."
  (when (and (fboundp backend) (fboundp 'cape-company-to-capf))
    (cape-company-to-capf backend)))
#+end_src

* UI and Theming
** Fonts
#+begin_src emacs-lisp
(defun efs/set-font-faces ()
  (message "Setting faces!")
  (set-face-attribute 'default nil
		      :font "JetBrainsMono Nerd Font"
		      :height 145
		      :weight 'medium)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
		      :font "JetBrainsMono Nerd Font"
		      :height 145
		      :weight 'medium)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
		      :font "JetBrainsMono Nerd Font"
		      :height 145
		      :weight 'medium))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (efs/set-font-faces))))
  (efs/set-font-faces))

;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.02)
#+end_src
** All the Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** Line Numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode -1)

(setq-default display-line-numbers-grow-only t
              display-line-numbers-width 2)

;; Enable line numbers for some modes
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))
#+end_src
** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t)
  (nerd-icons-scale-factor 1.1)
  (nerd-icons-default-file-color "#ebdbb2")
  (nerd-icons-default-dir-color "#83a598")
  :config
  ;; Color mappings for different file types
  (add-to-list 'nerd-icons-extension-icon-alist
               '("org" nerd-icons-sucicon "nf-custom-orgmode" :face (:foreground "#b8bb26")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("el" nerd-icons-sucicon "nf-custom-emacs" :face (:foreground "#d3869b")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("py" nerd-icons-devicon "nf-dev-python" :face (:foreground "#8ec07c")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("js" nerd-icons-devicon "nf-dev-javascript" :face (:foreground "#fabd2f")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("json" nerd-icons-devicon "nf-dev-javascript" :face (:foreground "#fe8019")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("md" nerd-icons-octicon "nf-oct-markdown" :face (:foreground "#8ec07c")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("yaml" nerd-icons-octicon "nf-oct-gear" :face (:foreground "#fb4934")))
  (add-to-list 'nerd-icons-extension-icon-alist
               '("yml" nerd-icons-octicon "nf-oct-gear" :face (:foreground "#fb4934"))))
#+end_src

** Nerd Icons Completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :after (marginalia nerd-icons)
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Nerd Icons Corfu
#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :ensure t
  :after (corfu nerd-icons)
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
  ;; Gruvbox colors for corfu icons
  (setq nerd-icons-corfu-mapping
        '((array :style "cod" :icon "symbol_array" :face (:foreground "#8ec07c"))
          (boolean :style "cod" :icon "symbol_boolean" :face (:foreground "#b8bb26"))
          (class :style "cod" :icon "symbol_class" :face (:foreground "#d3869b"))
          (color :style "cod" :icon "symbol_color" :face (:foreground "#fe8019"))
          (command :style "cod" :icon "terminal" :face (:foreground "#83a598"))
          (constant :style "cod" :icon "symbol_constant" :face (:foreground "#fabd2f"))
          (constructor :style "cod" :icon "triangle_right" :face (:foreground "#8ec07c"))
          (enummember :style "cod" :icon "symbol_enum_member" :face (:foreground "#b8bb26"))
          (enum-member :style "cod" :icon "symbol_enum_member" :face (:foreground "#b8bb26"))
          (enum :style "cod" :icon "symbol_enum" :face (:foreground "#d3869b"))
          (event :style "cod" :icon "symbol_event" :face (:foreground "#fb4934"))
          (field :style "cod" :icon "symbol_field" :face (:foreground "#8ec07c"))
          (file :style "cod" :icon "symbol_file" :face (:foreground "#ebdbb2"))
          (folder :style "cod" :icon "folder" :face (:foreground "#83a598"))
          (interface :style "cod" :icon "symbol_interface" :face (:foreground "#d3869b"))
          (keyword :style "cod" :icon "symbol_keyword" :face (:foreground "#fe8019"))
          (macro :style "cod" :icon "symbol_misc" :face (:foreground "#fabd2f"))
          (magic :style "cod" :icon "wand" :face (:foreground "#d3869b"))
          (method :style "cod" :icon "symbol_method" :face (:foreground "#83a598"))
          (function :style "cod" :icon "symbol_method" :face (:foreground "#83a598"))
          (module :style "cod" :icon "file_submodule" :face (:foreground "#b8bb26"))
          (numeric :style "cod" :icon "symbol_numeric" :face (:foreground "#fe8019"))
          (operator :style "cod" :icon "symbol_operator" :face (:foreground "#fb4934"))
          (param :style "cod" :icon "symbol_parameter" :face (:foreground "#8ec07c"))
          (property :style "cod" :icon "symbol_property" :face (:foreground "#b8bb26"))
          (reference :style "cod" :icon "references" :face (:foreground "#8ec07c"))
          (snippet :style "cod" :icon "symbol_snippet" :face (:foreground "#fabd2f"))
          (string :style "cod" :icon "symbol_string" :face (:foreground "#b8bb26"))
          (struct :style "cod" :icon "symbol_structure" :face (:foreground "#d3869b"))
          (text :style "cod" :icon "symbol_key" :face (:foreground "#ebdbb2"))
          (typeparameter :style "cod" :icon "list_unordered" :face (:foreground "#8ec07c"))
          (type-parameter :style "cod" :icon "list_unordered" :face (:foreground "#8ec07c"))
          (unit :style "cod" :icon "symbol_ruler" :face (:foreground "#b8bb26"))
          (value :style "cod" :icon "symbol_field" :face (:foreground "#ebdbb2"))
          (variable :style "cod" :icon "symbol_variable" :face (:foreground "#8ec07c"))
          (t :style "cod" :icon "code" :face (:foreground "#ebdbb2")))))
#+end_src

** Doom Themes
#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  ;; Global settings (defaults)
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (doom-themes-treemacs-theme "doom-miramare") ; use "doom-colors" for less minimal icon theme
  :config
  (load-theme 'doom-miramare t)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  (doom-themes-treemacs-config)
  (doom-themes-org-config))
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 28)
  (setq doom-modeline-bar-width 3)
  (setq doom-modeline-icon (display-graphic-p))
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-enable-word-count nil)
  (setq doom-modeline-buffer-encoding t)
  (setq doom-modeline-indent-info nil)
  (setq doom-modeline-checker-simple-format t)
  (setq doom-modeline-vcs-max-length 12)
  (setq doom-modeline-env-version t)
  (setq doom-modeline-irc-stylize 'identity)
  (setq doom-modeline-github-timer nil)
  (setq doom-modeline-gnus-timer nil))
#+end_src

** Solaire Mode 
#+begin_src emacs-lisp
;; Solaire Mode Configuration for Emacs 30
;; Provides visual distinction between "real" buffers and popups/sidebars

(use-package solaire-mode
  :ensure t
  :config
  ;; Enable solaire-mode globally
  (solaire-global-mode +1)
  
  ;; Integration with corfu popups
  (with-eval-after-load 'corfu
    ;; Apply solaire styling to corfu's completion buffer
    (advice-add 'corfu--make-buffer :after
                (lambda (candidates &rest _)
                  (when-let ((buffer (get-buffer " *corfu*")))
                    (with-current-buffer buffer
                      (solaire-mode +1)))))
    
    ;; Ensure corfu popup inherits proper background
    (setq corfu-auto-delay 0.2
          corfu-auto-prefix 2))
  
  ;; Integration with vertico minibuffer completion
  (with-eval-after-load 'vertico
    (advice-add 'vertico--display-candidates :after
                (lambda (&rest _)
                  (when (minibufferp)
                    (with-selected-window (minibuffer-window)
                      (solaire-mode +1))))))
  
  ;; Enable solaire-mode for ediff control panels
  (with-eval-after-load 'ediff
    (advice-add 'ediff-setup-control-buffer :after
                (lambda (&rest _)
                  (solaire-mode +1))))
  
  ;; Integration with org-mode source blocks
  (with-eval-after-load 'org
    (add-hook 'org-src-mode-hook #'solaire-mode))
  
  ;; Integration with which-key popups
  (with-eval-after-load 'which-key
    (advice-add 'which-key--show-buffer-side-window :after
                (lambda (&rest _)
                  (when-let ((buffer (get-buffer which-key--buffer)))
                    (with-current-buffer buffer
                      (solaire-mode +1))))))
  
  ;; Apply to help and info buffers
  (dolist (mode '(help-mode-hook info-mode-hook))
    (add-hook mode #'solaire-mode))
  
  )
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  ;; Core timing settings
  (setq which-key-idle-delay 0.05
	which-key-idle-secondary-delay 0.00)
 
  ;; Display configuration
  (setq which-key-min-display-lines 6
	which-key-max-display-columns nil
	which-key-max-description-length 32
	which-key-allow-imprecise-window-fit t
	which-key-separator " → "
	which-key-unicode-correction 3)
  
  ;; Popup and display behavior
  (setq which-key-popup-type 'minibuffer
	which-key-show-prefix 'echo
	which-key-show-remaining-keys t
	which-key-show-early-on-C-h t
	which-key-enable-extended-define-key t)
  
  ;; Sorting and organization
  (setq which-key-sort-order 'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-side-window-max-width 0.33
	which-key-side-window-max-height 0.25)
  
  ;; Performance and compatibility settings
  (setq which-key-compute-remaps nil
	which-key-use-C-h-commands t
	which-key-show-operator-state-maps t
	which-key-preserve-window-configuration t)

  ;; Gruvbox theme for which-key
  (custom-set-faces
   '(which-key-key-face ((t (:foreground "#83a598" :weight bold))))
   '(which-key-description-face ((t (:foreground "#ebdbb2"))))
   '(which-key-group-description-face ((t (:foreground "#d3869b"))))
   '(which-key-command-description-face ((t (:foreground "#b8bb26"))))
   '(which-key-local-map-description-face ((t (:foreground "#8ec07c"))))
   '(which-key-separator-face ((t (:foreground "#7c6f64"))))
   '(which-key-note-face ((t (:foreground "#7c6f64"))))
   '(which-key-note-face ((t (:foreground "#7c6f64"))))))
#+end_src

* Emacs Behavior and Enhancements
** Minibuffer Enhancements

#+begin_src emacs-lisp
(use-package minibuffer
  :ensure nil
  :custom
  (enable-recursive-minibuffers t)
  :config
  (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;; (add-hook 'minibuffer-setup-hook #'(lambda () (setq-local completion-at-point-functions
  ;;                                                         (list #'cape-history #'cape-file #'cape-dabbrev))))
  ;; Gruvbox theme for minibuffer
  (custom-set-faces
   '(minibuffer-prompt ((t (:foreground "#83a598" :weight bold))))
   '(completions-annotations ((t (:foreground "#a89984" :italic t))))
   '(completions-first-difference ((t (:foreground "#fabd2f" :weight bold))))
   '(completions-first-difference ((t (:foreground "#fabd2f" :weight bold))))))
#+end_src

** Savehist - persist history over Emacs restarts

#+begin_src emacs-lisp
(use-package savehist
  :ensure nil ; built-in
  :init (savehist-mode 1)
  :custom
  (history-length 25)
  (history-delete-duplicates t)
  (savehist-save-minibuffer-history t)
  (savehist-additional-variables
   '(kill-ring
     search-ring
     regexp-search-ring
     last-kbd-macro
     kmacro-ring
     shell-command-history
     extended-command-history)))
#+end_src

** Recentf - track recently opened files

#+begin_src emacs-lisp
(use-package recentf
  :ensure nil ; built-in
  :init (recentf-mode 1)
  :custom
  (recentf-max-menu-items 100)
  (recentf-max-saved-items 100)
  (recentf-exclude '("\\elpa" "\\straight" "/tmp/" "/ssh:" "/sudo:" "COMMIT_EDITMSG")))
#+end_src

** Abbrev mode enhancements

#+begin_src emacs-lisp
(use-package abbrev
  :ensure nil
  :diminish abbrev-mode
  :custom
  (save-abbrevs 'silently)
  :config
  (setq abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
  (add-hook 'text-mode-hook #'abbrev-mode)
  (add-hook 'prog-mode-hook #'abbrev-mode))
#+end_src

** Dabbrev (Dynamic Abbreviation)

#+begin_src emacs-lisp
(use-package dabbrev
  :ensure nil
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  (add-to-list 'dabbrev-ignored-buffer-modes 'authinfo-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode) 
  (dabbrev-case-distinction nil)
  (dabbrev-case-fold-search t)
  (dabbrev-case-replace nil)
  (dabbrev-upcase-means-case-search t))
#+end_src

* Programming
** Treesit
*** Basic tree-sitter configuration

#+begin_src emacs-lisp
(use-package treesit
  :ensure nil 
  :when (treesit-available-p)
  :config
  (setq treesit-font-lock-level 4) ; Maximum syntax highlighting
  
  ;; Performance optimizations for tree-sitter
  (setq treesit-max-buffer-size (* 1024 1024)) ; 1MB limit
  
  ;; Function to toggle tree-sitter debugging
  (defun my/treesit-debug-toggle ()
    "Toggle tree-sitter debugging."
    (interactive)
    (if (bound-and-true-p treesit--indent-verbose)
        (progn
          (setq treesit--indent-verbose nil)
          (message "Tree-sitter debugging disabled"))
      (setq treesit--indent-verbose t)
      (message "Tree-sitter debugging enabled")))
  
  ;; Function to show tree-sitter information
  (defun my/treesit-info ()
    "Show tree-sitter information for current buffer."
    (interactive)
    (if (treesit-parser-list)
        (let ((parsers (treesit-parser-list)))
          (message "Tree-sitter parsers: %s"
                   (mapconcat (lambda (parser)
                               (symbol-name (treesit-parser-language parser)))
                             parsers ", ")))
      (message "No tree-sitter parsers in current buffer")))
  
  ;; Keybindings
  (global-set-key (kbd "C-c t d") #'my/treesit-debug-toggle)
  (global-set-key (kbd "C-c t i") #'my/treesit-info))
#+end_src

*** Automatic tree-sitter mode management

#+begin_src emacs-lisp
(use-package treesit-auto
  :when (treesit-available-p)
  :config
  ;; Configure which modes to auto-enable
  (setq treesit-auto-langs '(bash c cpp css json python rust toml yaml))
  
  ;; Install and configure tree-sitter modes automatically
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

*** Language-specific configurations
treesit-auto handles mode associations automatically
#+begin_src emacs-lisp
;; Python setup
(defun my/python-ts-mode-setup ()
  "Setup for Python tree-sitter mode."
  (setq-local indent-tabs-mode nil)
  (setq-local python-indent-offset 4)
  (setq-local tab-width 4))

;; C/C++ setup
(defun my/c-ts-mode-setup ()
  "Setup for C tree-sitter mode."
  (setq-local c-ts-mode-indent-offset 4)
  (setq-local tab-width 4))

(defun my/c++-ts-mode-setup ()
  "Setup for C++ tree-sitter mode."
  (setq-local c-ts-mode-indent-offset 4)
  (setq-local tab-width 4))

(defun my/json-ts-mode-setup ()
  "Setup for JSON tree-sitter mode."
  (setq-local js-indent-level 2)
  (setq-local tab-width 2))

(defun my/yaml-ts-mode-setup ()
  "Setup for YAML tree-sitter mode."
  (setq-local yaml-indent-offset 2)
  (setq-local tab-width 2))

(defun my/css-ts-mode-setup ()
  "Setup for CSS tree-sitter mode."
  (setq-local css-indent-offset 2)
  (setq-local tab-width 2))

(defun my/bash-ts-mode-setup ()
  "Setup for Bash tree-sitter mode."
  (setq-local sh-basic-offset 2)
  (setq-local tab-width 2))

;; Apply hooks for language-specific setups
(add-hook 'python-ts-mode-hook #'my/python-ts-mode-setup)
(add-hook 'c-ts-mode-hook #'my/c-ts-mode-setup)
(add-hook 'c++-ts-mode-hook #'my/c++-ts-mode-setup)
(add-hook 'json-ts-mode-hook #'my/json-ts-mode-setup)
(add-hook 'yaml-ts-mode-hook #'my/yaml-ts-mode-setup)
(add-hook 'css-ts-mode-hook #'my/css-ts-mode-setup)
(add-hook 'html-ts-mode-hook #'my/html-ts-mode-setup)
(add-hook 'bash-ts-mode-hook #'my/bash-ts-mode-setup)
#+end_src

#+begin_src emacs-lisp
(use-package treesit-fold
  :when (treesit-available-p)
  :hook ((prog-mode . treesit-fold-mode))
  :bind (("C-c C-f" . treesit-fold-toggle)
         ("C-c C-o" . treesit-fold-open-all)
         ("C-c C-c" . treesit-fold-close-all)))
#+end_src

*** Tree-sitter folding

#+begin_src emacs-lisp 
(use-package treesit-fold
  :when (treesit-available-p)
  :hook ((prog-mode . treesit-fold-mode))
  :bind (("C-c C-f" . treesit-fold-toggle)
         ("C-c C-o" . treesit-fold-open-all)
         ("C-c C-c" . treesit-fold-close-all)))
#+end_src

*** Electric Pair Mode

#+begin_src emacs-lisp
;; Tree-sitter based electric pair inhibition
(defun my/treesit-in-string-or-comment-p ()
  "Check if point is inside a string or comment using tree-sitter.
Returns t if inside string or comment, nil otherwise."
  (when (and (treesit-available-p) 
             (treesit-parser-list))
    (condition-case nil
      (let* ((node (treesit-node-at (point)))
             (node-type (when node (treesit-node-type node)))
             (parent-node (when node (treesit-node-parent node)))
             (parent-type (when parent-node (treesit-node-type parent-node))))
        (when node  ; Only proceed if we have a valid node
          (or
           ;; Check current node type for strings and comments
           (and node-type
                (or (string-match-p "\\(?:^\\|_\\)string\\(?:$\\|_\\)" node-type)
                    (string-match-p "\\(?:^\\|_\\)comment\\(?:$\\|_\\)" node-type)
                    (string-match-p "\\(?:^\\|_\\)literal\\(?:$\\|_\\)" node-type)
                    (string-match-p "\\(?:^\\|_\\)quoted\\(?:$\\|_\\)" node-type)))
           ;; Check parent node type (sometimes strings are nested)
           (and parent-type
                (or (string-match-p "\\(?:^\\|_\\)string\\(?:$\\|_\\)" parent-type)
                    (string-match-p "\\(?:^\\|_\\)comment\\(?:$\\|_\\)" parent-type)))
           ;; Language-specific checks
           (my/treesit-language-specific-string-comment-check node))))
      (error nil))))  ; Return nil on any error

(defun my/treesit-language-specific-string-comment-check (node)
  "Language-specific checks for strings and comments.
NODE is the tree-sitter node at point."
  (when node
    (let ((node-type (treesit-node-type node))
          (lang (when (treesit-parser-list)
                  (treesit-parser-language (car (treesit-parser-list))))))
      (pcase lang
        ;; Python-specific node types
        ('python
         (member node-type '("string" "comment" "string_content" "interpolation" 
                            "f_string" "raw_string_literal")))
        ;; JavaScript/TypeScript
        ((or 'javascript 'typescript)
         (member node-type '("string" "comment" "template_string" "regex" 
                            "string_fragment" "template_literal")))
        ;; C/C++
        ((or 'c 'cpp)
         (member node-type '("string_literal" "comment" "char_literal" 
                            "raw_string_literal" "string_content")))
        ;; Rust
        ('rust
         (member node-type '("string_literal" "comment" "char_literal" 
                            "raw_string_literal" "string_content")))
        ;; JSON
        ('json
         (member node-type '("string" "string_content")))
        ;; CSS
        ('css
         (member node-type '("string_value" "comment" "plain_value")))
        ;; HTML
        ('html
         (member node-type '("text" "comment" "attribute_value" "quoted_attribute_value")))
        ;; Bash
        ('bash
         (member node-type '("string" "comment" "raw_string" "string_expansion"
                            "command_substitution" "string_content")))
        ;; YAML
        ('yaml
         (member node-type '("string_scalar" "comment" "plain_scalar" 
                            "single_quote_scalar" "double_quote_scalar")))
        ;; Default fallback
        (_ nil)))))

(defun my/electric-pair-inhibit-predicate (char)
  "Predicate function to inhibit electric pairing in strings and comments.
CHAR is the character being inserted."
  (or
   ;; Use tree-sitter to check context
   (my/treesit-in-string-or-comment-p)
   ;; Fallback to default inhibition logic
   (electric-pair-default-inhibit char)))

;; Function to enable tree-sitter based electric pair inhibition
(defun my/enable-treesit-electric-pair-inhibition ()
  "Enable tree-sitter based electric pair inhibition."
  (interactive)
  (when (treesit-available-p)
    (setq-local electric-pair-inhibit-predicate #'my/electric-pair-inhibit-predicate)
    (message "Tree-sitter electric pair inhibition enabled")))

;; Function to disable tree-sitter based electric pair inhibition
(defun my/disable-treesit-electric-pair-inhibition ()
  "Disable tree-sitter based electric pair inhibition."
  (interactive)
  (setq-local electric-pair-inhibit-predicate #'electric-pair-default-inhibit)
  (message "Tree-sitter electric pair inhibition disabled"))

;; Utility function to show current context information
(defun my/treesit-show-context ()
  "Show tree-sitter context information at point."
  (interactive)
  (if (and (treesit-available-p) (treesit-parser-list))
      (let* ((node (treesit-node-at (point)))
             (node-type (when node (treesit-node-type node)))
             (parent (when node (treesit-node-parent node)))
             (parent-type (when parent (treesit-node-type parent)))
             (in-string-comment (my/treesit-in-string-or-comment-p)))
        (message "Node: %s | Parent: %s | In string/comment: %s"
                 (or node-type "nil")
                 (or parent-type "nil")
                 (if in-string-comment "YES" "NO")))
    (message "Tree-sitter not available or no parsers active")))

;; Hook to automatically enable for tree-sitter modes
(defun my/setup-treesit-electric-pair ()
  "Setup tree-sitter electric pair inhibition for current buffer."
  (when (and (treesit-available-p)
             (treesit-parser-list)
             electric-pair-mode)
    (my/enable-treesit-electric-pair-inhibition)))

;; Add to your existing language setup hooks
(add-hook 'python-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'c-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'c++-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'json-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'yaml-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'css-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'html-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'bash-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'javascript-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'typescript-ts-mode-hook #'my/setup-treesit-electric-pair)
(add-hook 'rust-ts-mode-hook #'my/setup-treesit-electric-pair)

;; Keybindings (add to your existing treesit keybindings)
(global-set-key (kbd "C-c t c") #'my/treesit-show-context)
(global-set-key (kbd "C-c t e") #'my/enable-treesit-electric-pair-inhibition)
(global-set-key (kbd "C-c t E") #'my/disable-treesit-electric-pair-inhibition)
#+end_src

*** Combobulate
#+begin_src emacs-lisp
(use-package combobulate
  :when (treesit-available-p)
  :hook ((python-ts-mode
          js-ts-mode
          typescript-ts-mode
          tsx-ts-mode
          css-ts-mode
          yaml-ts-mode
          json-ts-mode) . combobulate-mode)
  :bind (:map combobulate-key-map
              ("C-c o u" . combobulate-splice-up)
              ("C-c o d" . combobulate-splice-down)
              ("C-c o c" . combobulate-clone-node-dwim)
              ("C-c o k" . combobulate-kill-node-dwim)
              ("C-c o f" . combobulate-navigate-next)
              ("C-c o b" . combobulate-navigate-previous))
  :load-path ("~/.config/emacs/lisp/combobulate"))
#+end_src

** LSP
*** Eglot
=Add eldoc setup separately=
#+begin_src emacs-lisp 
(use-package eglot
  :ensure nil
  :hook ((c-ts-mode c++-ts-mode python-ts-mode bash-ts-mode json-ts-mode yaml-mode) . eglot-ensure)
  :custom
  ;; Performance optimizations
  (eglot-events-buffer-size 0)  ; Disable event logging for performance
  (eglot-sync-connect nil)      ; Don't block on connection
  (eglot-connect-timeout 10)
  (eglot-autoshutdown t)        ; Shutdown server when last buffer is killed
  (eglot-send-changes-idle-time 0.1)
  
  ;; UI preferences
  (eglot-report-progress nil)   ; Don't spam minibuffer with progress
  (eglot-confirm-server-initiated-edits nil)
  
  :config
  ;; Enhanced server configurations
  (add-to-list 'eglot-server-programs
               '((c-ts-mode c++-ts-mode) . ("clangd"
                                            "--background-index"
                                            "--clang-tidy"
                                            "--completion-style=detailed"
                                            "--header-insertion=iwyu"
                                            "--header-insertion-decorators")))
  
  ;; Python language server configuration
  (add-to-list 'eglot-server-programs
               '(python-ts-mode . ("pyright-langserver" "--stdio")))
  
  ;; Workspace configuration for better performance
  (defun eglot/configure-workspace ()
    "Configure workspace settings for better performance."
    (when (eglot-current-server)
      (eglot--signal-textDocument/didChangeConfiguration
       (eglot-current-server)
       (list :settings (eglot-workspace-configuration (eglot-current-server))))))
  
  (add-hook 'eglot-managed-mode-hook #'eglot/configure-workspace)
   
  ;; Doom Modeline integration
  (with-eval-after-load 'doom-modeline
    ;; Define custom eglot segment for doom-modeline
    (doom-modeline-def-segment eglot-status
      "Display eglot LSP server status."
      (when (and (bound-and-true-p eglot--managed-mode)
                 (eglot-current-server))
        (let* ((server (eglot-current-server))
               (nick (eglot-project-nickname server))
               (running-p (eglot-running-p server))
               (face (if running-p 'doom-modeline-lsp-success 'doom-modeline-lsp-error))
               (icon (if running-p
                        (doom-modeline-icon 'codicon "nf-cod-server" "◉" "◉" :face face)
                      (doom-modeline-icon 'codicon "nf-cod-server_error" "◌" "◌" :face face))))
          (concat
           (doom-modeline-display-icon icon)
           (propertize (format " %s" nick) 'face face)))))
    
    ;; Override existing LSP segment when eglot is active
    (defun doom-modeline--eglot-or-lsp ()
      "Show eglot status if active, otherwise show LSP status."
      (if (and (bound-and-true-p eglot--managed-mode)
               (eglot-current-server))
          (doom-modeline-segment--eglot-status)
        (doom-modeline-segment--lsp)))
    
    ;; Replace the default LSP segment
    (advice-add 'doom-modeline-segment--lsp :override #'doom-modeline--eglot-or-lsp)))
#+end_src

*** Eglot Booster
#+begin_src emacs-lisp
(use-package eglot-booster
  :vc (:url "https://github.com/jdtsmith/eglot-booster"
       :branch "master")
  :after eglot
  :config
  (eglot-booster-mode 1))
#+end_src

** TODO Eldoc
*** Core Configuration

#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :custom
  ;; Eldoc behavior
  (eldoc-idle-delay 0.2)
  (eldoc-print-after-edit t)
  (eldoc-echo-area-use-multiline-p 3)
  (eldoc-echo-area-display-truncation-message nil)
  (eldoc-echo-area-prefer-doc-buffer t)
  (eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
  
  :config
  ;; Global eldoc mode
  (global-eldoc-mode 1)
  
  ;; Gruvbox dark theme faces
  (defface eldoc-highlight-function-argument
    '((t (:foreground "#fabd2f" :weight bold)))
    "Face for highlighting function arguments in eldoc."
    :group 'eldoc)
  
  ;; Hook to ensure eldoc works properly with eglot
  (add-hook 'eglot-managed-mode-hook
            (lambda ()
              (setq-local eldoc-documentation-functions
                          (cons #'eglot-signature-eldoc-function
                                (cons #'eglot-hover-eldoc-function
                                      (remove #'eglot-signature-eldoc-function
                                              (remove #'eglot-hover-eldoc-function
                                                      eldoc-documentation-functions))))))))
#+end_src

*** Eldoc Box

#+begin_src emacs-lisp
(use-package eldoc-box
  :after eldoc
  :custom
  ;; Box appearance
  (eldoc-box-max-pixel-width 800)
  (eldoc-box-max-pixel-height 400)
  (eldoc-box-clear-with-C-g t)
  (eldoc-box-only-multi-line t)
  (eldoc-box-cleanup-interval 1.0)
  (eldoc-box-offset '(16 . 16))
  
  ;; Position and behavior
  (eldoc-box-position-function #'eldoc-box--default-upper-corner-position-function)
  (eldoc-box-fringe-use-same-bg t)
  
  :config
  ;; Gruvbox dark theme faces
  (defface eldoc-box-border
    '((t (:background "#504945")))
    "Face for eldoc-box border."
    :group 'eldoc-box)
  
  (defface eldoc-box-body
    '((t (:background "#32302f" :foreground "#ebdbb2")))
    "Face for eldoc-box body."
    :group 'eldoc-box)
  
  (defface eldoc-box-markdown-separator
    '((t (:foreground "#665c54" :height 1.0)))
    "Face for eldoc-box markdown separator."
    :group 'eldoc-box)
  
  ;; Custom eldoc-box frame parameters for gruvbox theme
  (setq eldoc-box-frame-parameters
        '((left . -1)
          (top . -1)
          (width . 0)
          (height . 0)
          (no-accept-focus . t)
          (no-focus-on-map . t)
          (min-width . 0)
          (min-height . 0)
          (internal-border-width . 2)
          (vertical-scroll-bars . nil)
          (horizontal-scroll-bars . nil)
          (left-fringe . 8)
          (right-fringe . 8)
          (menu-bar-lines . 0)
          (tool-bar-lines . 0)
          (line-spacing . 0.1)
          (unsplittable . t)
          (undecorated . t)
          (visibility . nil)
          (mouse-wheel-frame . nil)
          (no-other-frame . t)
          (cursor-type . nil)
          (inhibit-double-buffering . t)
          (drag-internal-border . t)
          (no-special-glyphs . t)
          (background-color . "#32302f")
          (foreground-color . "#ebdbb2")))
  
  ;; Enable hover mode in programming modes
  (add-hook 'prog-mode-hook #'eldoc-box-hover-at-point-mode)
  
  ;; Keybindings
  :bind (("C-h ." . eldoc-box-help-at-point)))
#+end_src

** Flymake
*** Core Configuration
#+begin_src emacs-lisp
(use-package flymake
  :ensure nil
  :diminish flymake-mode
  :hook (eglot-managed-mode . flymake-mode)
  :custom
  ;; Performance optimizations
  (flymake-no-changes-timeout 0.5)
  (flymake-start-on-save-buffer t)
  (flymake-suppress-zero-counters t)
  (flymake-wrap-around nil)
  
  :config
  ;; Gruvbox dark theme faces
  (custom-set-faces
   '(flymake-error ((t (:underline (:color "#fb4934" :style wave)))))
   '(flymake-warning ((t (:underline (:color "#fabd2f" :style wave)))))
   '(flymake-note ((t (:underline (:color "#83a598" :style wave))))))
  
  ;; Eldoc integration for flymake diagnostics
  (defun flymake-eldoc-function (callback)
    "Eldoc function for flymake diagnostics."
    (when-let* ((diags (flymake-diagnostics (point)))
                (diag (car diags)))
      (funcall callback
               (format "[%s] %s"
                       (propertize
                        (pcase (flymake-diagnostic-type diag)
                          ('error "ERROR")
                          ('warning "WARN")
                          ('note "NOTE")
                          (_ "INFO"))
                        'face
                        (pcase (flymake-diagnostic-type diag)
                          ('error '(:foreground "#fb4934" :weight bold))
                          ('warning '(:foreground "#fabd2f" :weight bold))
                          ('note '(:foreground "#83a598" :weight bold))
                          (_ '(:foreground "#ebdbb2" :weight bold))))
                       (flymake-diagnostic-text diag)))))
  
  (add-hook 'flymake-mode-hook
            (lambda ()
              (add-hook 'eldoc-documentation-functions
                        #'flymake-eldoc-function nil t)))
  
  :bind (("C-c f n" . flymake-goto-next-error)
         ("C-c f p" . flymake-goto-prev-error)
         ("C-c f l" . flymake-show-buffer-diagnostics)
         ("C-c f d" . flymake-show-project-diagnostics)))
#+end_src

*** Doom Modeline Integration
#+begin_src emacs-lisp
(with-eval-after-load 'doom-modeline
  ;; Configure doom-modeline for detailed flymake display
  (setq doom-modeline-checker-simple-format nil)
  
  ;; Gruvbox faces for doom-modeline checker
  (custom-set-faces
   '(doom-modeline-checker-error ((t (:foreground "#fb4934" :weight bold))))
   '(doom-modeline-checker-warning ((t (:foreground "#fabd2f" :weight bold))))
   '(doom-modeline-checker-info ((t (:foreground "#83a598" :weight bold))))
   '(doom-modeline-checker-success ((t (:foreground "#b8bb26" :weight bold))))))
#+end_src

*** Flymake Diagnostics At Point
#+begin_src emacs-lisp
(use-package flymake-diagnostic-at-point
  :after flymake
  :hook (flymake-mode . flymake-diagnostic-at-point-mode)
  :custom
  (flymake-diagnostic-at-point-timer-delay 0.5)
  (flymake-diagnostic-at-point-error-prefix "➤ ")
  (flymake-diagnostic-at-point-warning-prefix "⚠ ")
  
  :config
  ;; Custom minibuffer display with gruvbox theming
  (defun flymake-diagnostic-at-point-display-minibuffer (text)
    "Display flymake diagnostic TEXT in minibuffer with gruvbox colors."
    (when (and text (stringp text) (> (length text) 0))
      (let* ((diags (flymake-diagnostics (point)))
             (diag (car diags))
             (diagnostic-type (when diag (flymake-diagnostic-type diag))))
        (message "%s"
                 (propertize (string-trim text)
                             'face
                             (pcase diagnostic-type
                               ('error '(:foreground "#fb4934" :background "#3c1f1e"))
                               ('warning '(:foreground "#fabd2f" :background "#473d29"))
                               ('note '(:foreground "#83a598" :background "#0d1011"))
                               (_ '(:foreground "#ebdbb2" :background "#32302f"))))))))
  
  (setq flymake-diagnostic-at-point-display-diagnostic-function
        'flymake-diagnostic-at-point-display-minibuffer))
#+end_src

** TODO Origami like lsp-origami
** TODO Dape
* Programming Tools
** Imenu
** Project.el
** iBuffer with bufler style

* General Keybindings

#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
  (general-evil-setup)
  (general-create-definer global-leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")
  
  (general-create-definer local-leader-key
    :states '(normal visual)
    :keymaps 'override
    :prefix "SPC m"
    :global-prefix "C-SPC m")
 
  (general-create-definer my/alt-leader-def
    :keymaps '(normal visual)
    :prefix ";"
    :global-prefix "C-;")

  ;; Direed 
  (global-leader-key
    "d"   '(:ignore t :which-key "dired")
    "d d"  '(dired :which-key "dired")
    "d j"  '(dired-jump :which-key "dired jump")
    "d D"  '(dired-other-window :which-key "dired other window")
    "d J"  '(dired-jump-other-window :which-key "dired jump other window"))

  ;; Dired-specific keybindings
  (general-define-key
   :keymaps 'dired-mode-map
   :states 'normal
   "h"  'dired-up-directory
   "l"  'dired-find-file
   "j"  'dired-next-line
   "k"  'dired-previous-line
   "gg" 'beginning-of-buffer
   "G"  'end-of-buffer
   "q"  'quit-window
   "R"  'dired-do-rename
   "D"  'dired-do-delete
   "C"  'dired-do-copy
   "+"  'dired-create-directory
   "m"  'dired-mark
   "u"  'dired-unmark
   "U"  'dired-unmark-all-marks
   "t"  'dired-toggle-marks
   "%"  'dired-mark-files-regexp
   "s"  'dired-sort-toggle-or-edit
   "gr" 'revert-buffer)
  
  ;; Additional dired-x keybindings
  (general-define-key
   :keymaps 'dired-mode-map
   :states 'normal
   "o" 'dired-omit-mode
   "(" 'dired-hide-details-mode)

  ;; Dirvish Keybindings
  (global-leader-key
    "df"  '(dirvish-fd :wk "find file")
    "ds"  '(dirvish-side :wk "side panel")
    "dq"  '(dirvish-quicksort :wk "quicksort")
    "dy"  '(dirvish-yank :wk "yank")
    "dY"  '(dirvish-yank-menu :wk "yank menu")
    "dt"  '(dirvish-subtree-toggle :wk "toggle subtree")
    "dT"  '(dirvish-subtree-remove :wk "remove subtree")
    "de"  '(dirvish-emerge-menu :wk "emerge menu")
    "dm"  '(dirvish-mark-menu :wk "mark menu")
    "dc"  '(dirvish-copy-menu :wk "copy menu")
    "dr"  '(dirvish-rename-menu :wk "rename menu")
    "dD"  '(dirvish-delete-menu :wk "delete menu")
    "dz"  '(dirvish-zip :wk "zip")
    "dZ"  '(dirvish-unzip :wk "unzip")
    "dg"  '(dirvish-goto-menu :wk "goto menu")
    "dG"  '(dirvish-layout-toggle :wk "layout toggle")
    "dv"  '(dirvish-vc-menu :wk "vc menu")
    "dH"  '(dirvish-history-menu :wk "history menu")
    "dA"  '(dirvish-quick-access :wk "quick access")
    "dL"  '(dirvish-ls-switches-menu :wk "ls switches")
    "do"  '(dired-omit-mode :wk "toggle omit mode")
    "dh"  '(dired-hide-details-mode :wk "toggle details"))
  
  ;; Dirvish-specific keybindings
  (general-define-key
   :keymaps 'dirvish-mode-map
   :states 'normal
   "TAB" 'dirvish-subtree-toggle
   "S-TAB" 'dirvish-subtree-remove
   "M-j" 'dirvish-fd-jump
   "M-s" 'dirvish-quicksort
   "M-y" 'dirvish-yank-menu
   "M-e" 'dirvish-emerge-menu
   "M-m" 'dirvish-mark-menu
   "M-c" 'dirvish-copy-menu
   "M-r" 'dirvish-rename-menu
   "M-d" 'dirvish-delete-menu
   "M-g" 'dirvish-goto-menu
   "M-v" 'dirvish-vc-menu
   "M-h" 'dirvish-history-menu
   "M-a" 'dirvish-quick-access
   "M-l" 'dirvish-ls-switches-menu
   "f" 'dirvish-file-info-menu
   "F" 'dirvish-toggle-fullscreen
   "y" 'dirvish-yank
   "Y" 'dirvish-yank-menu
   "p" 'dirvish-paste
   "P" 'dirvish-paste-menu
   "z" 'dirvish-zip
   "Z" 'dirvish-unzip
   "v" 'dirvish-vc-menu
   "?" 'dirvish-dispatch
   "SPC" 'dirvish-show-history
   "RET" 'dirvish-find-file-true)
  
  ;; Dired-subtree keybindings
  (general-define-key
   :keymaps 'dired-mode-map
   :states 'normal
   "TAB" 'dired-subtree-toggle
   "S-TAB" 'dired-subtree-cycle
   "C-TAB" 'dired-subtree-remove)

  ;; Dired narrow
  (general-define-key
   :keymaps 'dired-mode-map
   :states 'normal
   "/" 'dired-narrow-fuzzy
   "n" 'dired-narrow
   "N" 'dired-narrow-regexp)

  ;; Dired ranger
  (general-define-key
   :keymaps 'dired-mode-map
   :states 'normal
   "Y" 'dired-ranger-copy
   "X" 'dired-ranger-move
   "P" 'dired-ranger-paste)

  ;; File navigation 
  (global-leader-key
    "f"    '(:ignore t :wk "files")
    "f d"  '(dired :wk "dired")
    "f f"  '(find-file :wk "find file")
    "f r"  '(consult-recent-file :wk "recent files")
    "f l"  '(consult-locate :wk "locate")
    "f j"  '(dired-jump :wk "dired jump")
    "f D"  '(dired-other-window :wk "dired other window")
    "f J"  '(dired-jump-other-window :wk "dired jump other window"))
 
  ;; Window Management
  (global-leader-key
    "w"   '(:ignore t :wk "windows")
    "w h"  '(evil-window-left :wk "window left")
    "w j"  '(evil-window-down :wk "window down")
    "w k"  '(evil-window-up :wk "window up")
    "w l"  '(evil-window-right :wk "window right")
    "w s"  '(evil-window-split :wk "split below")
    "w v"  '(evil-window-vsplit :wk "split right")
    "w d"  '(evil-window-delete :wk "delete window")
    "w o"  '(delete-other-windows :wk "delete other windows")
    "w ="  '(balance-windows :wk "balance windows")
    "w x"  '(evil-window-exchange :wk "exchange windows"))

  ;; Evil keybindings
  (general-define-key
   :states 'normal
   ;; Use visual lines for j/k, logical lines for gj/gk
   "j" 'evil-next-visual-line
   "k" 'evil-previous-visual-line
   "gj" 'evil-next-line
   "gk" 'evil-previous-line
   ;; Centered scrolling
   "C-d" 'my/evil-scroll-down-center
   "C-u" 'my/evil-scroll-up-center)
  
  ;; Evil Numbers
  (general-define-key
   :states '(normal visual)
   "C-a" 'evil-numbers/inc-at-pt
   "C-x" 'evil-numbers/dec-at-pt)

  ;; Evil Args
  (general-define-key
    :keymaps 'evil-inner-text-objects-map
    "a" 'evil-inner-arg
    :keymaps 'evil-outer-text-objects-map
    "a" 'evil-outer-arg
    :states 'normal
    "]a" 'evil-forward-arg
    "[a" 'evil-backward-arg)

  (general-define-key
   :states '(normal visual)
   "gc" 'evilnc-comment-or-uncomment-lines)

(global-leader-key
  ;; Evil-specific operations
  "e"   '(:ignore t :wk "evil")
  "eh"  '(evil-ex-nohighlight :wk "clear search highlight")
  "er"  '(evil-show-registers :wk "show registers")
  "em"  '(evil-show-marks :wk "show marks")
  "ej"  '(evil-join :wk "join lines")
  "ex"  '(evil-exchange :wk "exchange")
  "eX"  '(evil-exchange-cancel :wk "cancel exchange"))

  ;; Corfu
  (general-define-key
   :keymaps 'corfu-map
   "TAB" 'corfu-next
   "S-TAB" 'corfu-previous)



  )
#+end_src

** Keybindings
#+begin_src emacs-lisp
; (global-leader-key
;  ;; File operations
;  "f"    '(:ignore t :wk "files")
;  "f f"  '(find-file :wk "find file")
;  "f r"  '(consult-recent-file :wk "recent files")
;  "f s"  '(save-buffer :wk "save file")
;  "f S"  '(save-some-buffers :wk "save all")
;  "f d"  '((lambda () (interactive) (find-file user-init-file)) :wk "open config")
;
;  ;; Buffer operations
;  "b"    '(:ignore t :which-key "buffers")
;  "b b"  '(consult-buffer :wk "switch buffer")
;  "b k"  '(kill-this-buffer :wk "kill buffer")
;  "b K"  '(kill-buffer :which-key "kill buffer (choose)")
;  "b r"  '(revert-buffer :which-key "revert buffer")
;  "b s"  '(consult-buffer-other-window :which-key "switch buffer other window")
;
;  ;; Search operations
;  "s"    '(:ignore t :which-key "search")
;  "s l"  '(consult-line :which-key "search in buffer")
;  "s L"  '(consult-line-multi :which-key "search in all buffers")
;  "s r"  '(consult-ripgrep :which-key "ripgrep")
;  "s g"  '(consult-grep :which-key "grep")
;  "s f"  '(consult-find :which-key "find files")
;  "s F"  '(consult-locate :which-key "locate files")
;  "s i"  '(consult-imenu :which-key "imenu")
;  "s I"  '(consult-imenu-multi :which-key "imenu multi")
;  "s o"  '(consult-outline :which-key "outline")
;  "s m"  '(consult-mark :which-key "marks")
;  "s M"  '(consult-global-mark :which-key "global marks")
;  "s *"  '(my/consult-line-symbol-at-point :which-key "search symbol at point")
;  "s 8"  '(my/consult-ripgrep-symbol-at-point :which-key "ripgrep symbol at point")
;  "s s"  '(evil-ex-search-forward :wk "search forward")
;  "s S"  '(evil-ex-search-backward :wk "search backward")
;
;  ;; Navigation
;  "j"    '(:ignore t :which-key "jump")
;  "j j"  '(consult-goto-line :which-key "goto line")
;  "j m"  '(consult-mark :which-key "jump to mark")
;  "j M"  '(consult-global-mark :which-key "jump to global mark")
;  "j i"  '(consult-imenu :which-key "jump to imenu")
;  "j o"  '(consult-outline :which-key "jump to outline")
;
;  ;; Help operations
;  "h"   '(:ignore t :which-key "help")
;  "h f"  '(describe-function :which-key "describe function")
;  "h v"  '(describe-variable :which-key "describe variable")
;  "h k"  '(describe-key :which-key "describe key")
;  "h m"  '(describe-mode :which-key "describe mode")
;  "h p"  '(describe-package :which-key "describe package")
;  "h i"  '(info :which-key "info")
;  "h a"  '(consult-apropos :which-key "apropos")
;  "h C"  '(my/completion-tips :which-key "completion tips")
;
;  ;; Embark actions
;  "a"   '(:ignore t :which-key "actions")
;  "a a"  '(embark-act :which-key "embark act")
;  "a d"  '(embark-dwim :which-key "embark dwim")
;  "a b"  '(embark-bindings :which-key "embark bindings")
;
;  ;; Completion operations
;  "c"   '(:ignore t :which-key "completion")
;  "c p"  '(completion-at-point :which-key "complete at point")
;  "c d"  '(cape-dabbrev :which-key "dabbrev")
;  "c f"  '(cape-file :which-key "file")
;  "c s"  '(cape-elisp-symbol :which-key "elisp symbol")
;  "c k"  '(cape-keyword :which-key "keyword")
;  "c l"  '(cape-line :which-key "line")
;  "c h"  '(cape-history :which-key "history")
;  "c a"  '(cape-abbrev :which-key "abbreviation")
;  "c e"  '(cape-emoji :which-key "emoji")
;  "c t"  '(cape-tex :which-key "tex")
;
;     ;; Window management
;  "w" '(:ignore t :which-key "windows")
;  "w h" '(windmove-left :which-key "move left")
;  "w j" '(windmove-down :which-key "move down")
;  "w k" '(windmove-up :which-key "move up")
;  "w l" '(windmove-right :which-key "move right")
;  "w d" '(delete-window :which-key "delete window")
;  "w s" '(split-window-below :which-key "split below")
;  "w v" '(split-window-right :which-key "split right")
;  "w m" '(delete-other-windows :which-key "maximize")
;
;  ;; Toggles
;  "t" '(:ignore t :which-key "toggles")
;  "t l" '(display-line-numbers-mode :which-key "line numbers")
;  "t w" '(whitespace-mode :which-key "whitespace")
;  "t r" '(read-only-mode :which-key "read only")
;  "t t" '(consult-theme :which-key "theme")
;
;  ;; Quit operations
;  "q" '(:ignore t :which-key "quit")
;  "q q" '(save-buffers-kill-terminal :which-key "quit emacs")
;  "q f" '(delete-frame :which-key "delete frame")
;
;  ;; Quick Access
;  "SPC" '(execute-extended-command :which-key "M-x")
;  ":"   '(eval-expression :which-key "eval expression"))
;
;; Org-mode specific (when in org buffers)
;; (general-define-key
;;  :keymaps 'org-mode-map
;;  :states '(normal visual)
;;  :prefix "SPC"
;;  "m"   '(:ignore t :which-key "org")
;;  "m l"  '(org-insert-link :which-key "insert link")
;;  "m t"  '(org-todo :which-key "todo")
;;  "m T"  '(org-show-todo-tree :which-key "todo tree")
;;  "m s"  '(org-schedule :which-key "schedule")
;;  "m d"  '(org-deadline :which-key "deadline")
;;  "m e"  '(org-export-dispatch :which-key "export")
;;  "m a"  '(org-agenda :which-key "agenda")
;;  "m c"  '(org-capture :which-key "capture")
;;  "m r"  '(org-refile :which-key "refile")
;;  "m A"  '(org-archive-subtree :which-key "archive subtree"))
#+end_src

* Miscellaneous
** Zooming In/Out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
