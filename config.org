#+TITLE: Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

* Core Emacs Configuration
This section incorporates the sensible defaults and settings from the minimal-emacs.d project. This provides a robust and well-optimized foundation.
** Lexical Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

** Kill Unused Buffers on Launch
Causes sentinel errors
This function, which runs once when Emacs starts, cleans up transient buffers from previous sessions.
#+begin_src emacs-lisp
(defun ar/kill-star-buffers-on-startup ()
  "Kill all transient buffers that start with an asterisk."
  (interactive)
  (dolist (buffer (buffer-list))
    (let ((buffer-name (buffer-name buffer)))
      (when (and (buffer-live-p buffer)
                 (string-prefix-p "*" buffer-name)
                 (not (buffer-file-name buffer)))
        (with-current-buffer buffer
          (kill-buffer (current-buffer)))))))
;;(add-hook 'emacs-startup-hook #'ar/kill-star-buffers-on-startup 99)
#+end_src

** General Behaviour
#+begin_src emacs-lisp
;; Allow for shorter "y" or "n" responses.
(defalias 'yes-or-no-p 'y-or-n-p)

;; Allow nested minibuffers.
(setq enable-recursive-minibuffers t)

;; Keep the cursor out of the read-only portions of the minibuffer.
(setq minibuffer-prompt-properties
      '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; No beeping or blinking on errors.
(setq ring-bell-function 'ignore)
(setq visible-bell nil)

;; Disable the obsolete practice of end-of-line spacing from the typewriter era.
(setq sentence-end-double-space nil)

;; According to POSIX, a line should end with a newline.
(setq require-final-newline t)

;; Move point to top/bottom of buffer before signaling a scrolling error.
(setq scroll-error-top-bottom t)

;; If `scroll-conservatively' is set above 100, the window is never
;; automatically recentered.
(setq scroll-conservatively 101)

;; Number of lines of margin at the top and bottom of a window.
(setq scroll-margin 0)

;; Prefer vertical splits over horizontal ones.
(setq split-width-threshold 170
      split-height-threshold nil)

;; Uniquify buffer names by adding a directory prefix.
(setq uniquify-buffer-name-style 'forward)

;; Delete files by moving them to the system trash.
(setq delete-by-moving-to-trash t)

;; Disable automatic backups and lockfiles.
(setq make-backup-files nil
      create-lockfiles nil)

;; Auto-revert buffers when the underlying file changes.
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq revert-without-query '(".")) ; Do not prompt for revert.

;; Ask the user whether to terminate async compilations on exit.
(setq native-comp-async-query-on-exit t)

;; Skip confirmation prompts when creating a new file or buffer
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

** Setup User
#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")
#+end_src

** Source Scripts
#+begin_src emacs-lisp
(require 'reload-config)
(require 'garbage-collect)
(require 'update-packages)
#+end_src
** Editing and Indentation
#+begin_src emacs-lisp
;; Set default indentation.
(setq-default indent-tabs-mode nil
              tab-width 2
              fill-column 80)

;; Enable multi-line commenting.
(setq comment-multi-line t)
(setq comment-empty-lines t)

;; Continue wrapped lines at whitespace.
(setq-default word-wrap t)
;; But truncate lines by default for performance. (visual-line-mode will override this)
(setq-default truncate-lines t)

;; Improve `show-paren-mode` behavior.
(setq show-paren-delay 0.1
      show-paren-when-point-inside-paren t)
(setq blink-matching-paren nil) ; Don't blink, it's distracting.

;; Delete selected text when typing.
(delete-selection-mode 1)
#+end_src

** Save/History Management
#+begin_src emacs-lisp
;; Saveplace: Remember the last location within a file.
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))

;; Recentf: Maintain a list of recently accessed files.
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :init
  (setq recentf-max-saved-items 300
        recentf-max-menu-items 15
        recentf-auto-cleanup 'mode)
  (setq recentf-exclude ; Combine user's list with minimal-emacs.d's
        '("^/\\(?:ssh\\|su\\|sudo\\)?:" ; From minimal-emacs.d
          "\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
          "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
          "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
          "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
          (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))

;; Savehist: Preserve minibuffer history between sessions.
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :init
  (setq history-length 300)
  (setq savehist-additional-variables
        '(kill-ring
          register-alist
          mark-ring global-mark-ring
          search-ring regexp-search-ring)))

#+end_src

* UI & Theming
** Fonts
#+begin_src emacs-lisp
(defun ar/set-font-faces ()
  "Set all font faces for the current frame."
  ;; Set default, fixed-pitch, and variable-pitch faces to JetBrainsMono Nerd Font
  ;; Height 145 corresponds to 14.5pt. Adjust as needed.
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  ;; Apply italic slant to comments and keywords for visual distinction
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
  (set-language-environment "UTF-8")
  (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'append)
  (set-fontset-font t 'symbol "JetBrainsMono Nerd Font" nil 'append))


(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame) (with-selected-frame frame (ar/set-font-faces))))
  (ar/set-font-faces))

(setq font-lock-maximum-decoration t)
#+end_src

** Line Numbers 
#+begin_src emacs-lisp
;; probably redundant
;;(global-display-line-numbers-mode -1)
(setq-default display-line-numbers-grow-only t
              display-line-numbers-width 2)

;; Enable line numbers for some modes
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))
#+end_src

** Frame title Formatting
#+begin_src emacs-lisp
(setq-default
 frame-title-format
 '(:eval (format "[%%b%s] - %s"
           (if (buffer-modified-p)
                      " •"
             "")
           system-name)))
#+end_src

** 📥 TODO Theming
*Use distinct different colors for bold, italic and underline texts*
#+begin_src emacs-lisp
(use-package doom-themes
  :demand t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-tokyo-night")
  :config
  (load-theme 'doom-tokyo-night t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  (doom-themes-org-config))
#+end_src

#+begin_src emacs-lisp
;; (use-package catppuccin-theme
;;   :demand t  ; Automatically installs the theme if it's not already present
;;   :config
;;   ;; Set the theme variant to 'macchiato' before loading
;;   (setq catppuccin-flavor 'macchiato)
;;   (load-theme 'catppuccin t))
#+end_src

** Solaire Mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :init (solaire-global-mode)
  :config
  ;; Differentiate popups from "real" buffers
  (add-hook 'completion-list-mode-hook #'solaire-mode)
  (add-hook 'which-key-mode-hook #'solaire-mode)
  (add-hook 'help-mode-hook #'solaire-mode)
  (add-hook 'info-mode-hook #'solaire-mode)
  (add-hook 'org-src-mode-hook #'solaire-mode)
  (advice-add 'vertico--display-candidates :after
              (lambda (&rest _)
                (when (minibufferp)
                  (with-selected-window (minibuffer-window) (solaire-mode +1))))))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t))
#+end_src

** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  ;; Set the icons and other aesthetic features
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-enable-word-count t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-modal-icon t)
  (doom-modeline-lsp-icon t)
  :config
  ;; Set the left and right segments of the modeline
  (setq doom-modeline-segments-left
        '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position parrot selection-info))
  (setq doom-modeline-segments-right
        '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug lsp minor-modes input-method indent-info buffer-encoding major-mode word-count  process vcs checker)))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init (dashboard-setup-startup-hook)
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (dashboard-center-content t)
  (dashboard-items '((recents . 5) (projects . 5) (agenda . 5)))
  (dashboard-startup-banner 'logo)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode 1)
  :custom
  (which-key-idle-delay 0.1)
  (which-key-separator " → ")
  (which-key-popup-type 'minibuffer))
#+end_src

** Hide Modeline

#+begin_src emacs-lisp
#+end_src

* General Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
  :after evil
  :config
  (general-create-definer ar/global-leader
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (ar/global-leader
   ;; Core
   "SPC" '(execute-extended-command :wk "M-x")
   "q q" '(save-buffers-kill-terminal :wk "Quit Emacs")
   "q r" '(ar/reload-config :wk "Reload Config")))
#+end_src

* Evil (Vim Emulation)
** Core Evil
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t)
  :config (evil-mode 1))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config (evil-collection-init))
#+end_src

** Evil Extensions
#+begin_src emacs-lisp
(use-package evil-surround :hook (evil-mode . global-evil-surround-mode))
(use-package evil-nerd-commenter :after evil)

(use-package evil-numbers :after evil)
(use-package evil-args :after evil)
(use-package evil-anzu :after evil)
(use-package evil-exchange :after evil :config (evil-exchange-install))
(use-package evil-indent-plus :after evil :config (evil-indent-plus-default-bindings))
(use-package evil-visualstar :hook (evil-mode . global-evil-visualstar-mode))
(use-package evil-matchit :hook (evil-mode . global-evil-matchit-mode))
(use-package evil-snipe :after evil :config (evil-snipe-mode 1) (evil-snipe-override-mode 1))
(use-package evil-lion :after evil :config (evil-lion-mode))
(use-package evil-multiedit :after evil :config (evil-multiedit-default-keybinds))
(use-package evil-goggles :hook (evil-mode . evil-goggles-mode) :custom (evil-goggles-duration 0.1))

(use-package evil-escape
  :hook (evil-mode . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.2)
  (evil-escape-excluded-modes '(dired-mode)))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (evil-define-key '(normal visual) 'global "gc" 'evilnc-comment-or-uncomment-lines))
#+end_src

* Editor Behaviour
** Lines Behaviour
#+begin_src emacs-lisp
;; Highlight the current line
(global-hl-line-mode 1)
;; Use visual line mode for soft wrapping instead of truncating lines
(global-visual-line-mode 1)
#+end_src

** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :after evil
  :hook ((prog-mode . smartparens-mode)
         (text-mode . smartparens-mode)
         ;;(markdown-mode . smartparens-mode)
         (org-mode . smartparens-mode))
  :config
   (smartparens-global-strict-mode 1)
   ;; --- Doom Emacs-style Keybindings ---

 (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map ">" 'sp-slurp-sexp)
    (define-key evil-normal-state-map "<" 'sp-barf-sexp)
    ;; Also bind in visual mode for consistency when selecting a region.
    (define-key evil-visual-state-map ">" 'sp-slurp-sexp)
    (define-key evil-visual-state-map "<" 'sp-barf-sexp))

  ;; --- UI and Behavior Customizations ---
  (setq sp-show-pair-delay 0.1
        sp-show-pair-from-inside t)

)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :demand t
  :hook ((text-mode . rainbow-delimiters-mode)
         (prog-mode . rainbow-delimiters-mode)
         (org-src-mode-hook . rainbow-delimiters-mode))

  ;; Custom faces updated for the Tokyonight color palette.
  :custom-face
  (rainbow-delimiters-depth-1-face ((t (:foreground "#7aa2f7"))))  ; Blue
  (rainbow-delimiters-depth-2-face ((t (:foreground "#bb9af7"))))  ; Magenta
  (rainbow-delimiters-depth-3-face ((t (:foreground "#e0af68"))))  ; Yellow
  (rainbow-delimiters-depth-4-face ((t (:foreground "#73daca"))))  ; Cyan
  (rainbow-delimiters-depth-5-face ((t (:foreground "#f7768e"))))  ; Red
  (rainbow-delimiters-depth-6-face ((t (:foreground "#9ece6a"))))  ; Green
  (rainbow-delimiters-depth-7-face ((t (:foreground "#ff9e64"))))  ; Orange
  (rainbow-delimiters-depth-8-face ((t (:foreground "#c0caf5"))))  ; Foreground
  (rainbow-delimiters-depth-9-face ((t (:foreground "#a9b1d6"))))) ; Sub-Foreground
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook ((prog-mode . rainbow-mode)
         (org-mode . rainbow-mode)))
#+end_src

** Scrolling
#+begin_src emacs-lisp
(use-package ultra-scroll
  :init
  (setq scroll-conservatively 3 ; or whatever value you prefer, since v0.4
        scroll-margin 0)        
  :config
  (ultra-scroll-mode 1))
#+end_src

* Completion Framework
*Match the completion framework with my other configurations*
** Base Completion
#+begin_src emacs-lisp 
(use-package emacs
  :ensure nil
  :custom
  ;; Enable recursive minibuffers, allowing completion within completion.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x that are not relevant to the current mode.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt.
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  ;; Set a threshold for when to start cycling through completions.
  (completion-cycle-threshold 3)
  ;; Enable detailed completions.
  (completions-detailed t)
  ;; Automatically select the second candidate on the second TAB press.
  (completion-auto-select 'second-tab)
  ;; Always show completion help.
  (completion-auto-help 'always)
  ;; In Emacs 29+, disable the default Ispell completion function in text modes.
  ;; We will use a more capable backend via Cape.
  (text-mode-ispell-word-completion nil)) 
#+end_src

** Orderless for Advanced Filtering
#+begin_src emacs-lisp
(use-package orderless
  :custom
  ;; Use orderless as the primary completion style.
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  ;; Use standard completion for file paths for a more predictable experience.
  (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico: The Vertical Completion UI
#+begin_src emacs-lisp
(use-package vertico
  :demand t
  :init (vertico-mode)
  :custom
  (vertico-resize nil)
  (vertico-cycle t)
  (vertico-count 10))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src

** Nerd Icons Completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :demand t
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
  (nerd-icons-completion-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
(use-package consult
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Tell Consult how to find the root of a project. We use the built-in
  ;; `project.el` functionality.
  ;;(setq consult-project-function #'project-roots)
  ;; Keep the preview advice from the original configuration
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)
  (setq consult-prompt-margin 0)
  (setq consult-preview-key 'any)

  :custom
  (consult-narrow-key "<")
  (consult-find-args "fd --hidden --strip-cwd --type f --color=never --follow --exclude .git")
  (consult-ripgrep-args "rg --null --line-buffered --color=never --smart-case --no-heading --line-number --hidden --glob '!.git/'")
  ;; Augment the default consult-buffer sources to include recent files and
  ;; project-specific recent files for a more powerful buffer switcher.
  (consult-buffer-sources
   '(;;consult--source-buffer
     consult--source-recent-file
     consult--source-project-recent-file
     consult--source-bookmark))

  :config
  ;; Configure preview keys for various commands.
  ;; A delayed preview is used to avoid performance issues.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.05 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.1 any)))
#+end_src

** Embark
#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (define-key embark-collect-mode-map (kbd "e") #'embark-export)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

** Embark Consult
#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** 📥 TODO Corfu: The Core UI
*Use different accents for corfu completion and their documentation*
#+begin_src emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode)
  ;; Enable Corfu's extensions
  (corfu-popupinfo-mode)
  (corfu-history-mode)
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-delay 0.06)
  (corfu-quit-at-boundary 'separator)
  (corfu-quit-no-match 'separator)
  ;; Configure popupinfo delay
  ;; TODO: show documentation on key input
  (corfu-popupinfo-delay '(0.5 . 0.2))
  :config
  ;; Persist history
  (add-to-list 'savehist-additional-variables 'corfu-history))
#+end_src

** Nerd Icons for Corfu
#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :after (corfu nerd-icons)
  :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape: Completion Backends
#+begin_src emacs-lisp
(use-package cape
  :commands (cape-dabbrev cape-file cape-keyword)
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  :config
  ;; Silence the noisy pcomplete capf
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent))
#+end_src

** Dabbrev
#+begin_src emacs-lisp
(use-package dabbrev
  :ensure nil
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  :config
  (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
  ;; Available since Emacs 29 (Use `dabbrev-ignored-buffer-regexps' on older Emacs)
  (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
  (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

* Org Mode
** Directory Structure
#+begin_src emacs-lisp
(defvar my/org-directory "~/org/"
  "Base directory for all org files.")

(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory)
  "Directory for org-roam files.")

(defvar my/org-downloads-directory (expand-file-name "downloads/" my/org-directory)
  "Directory for org-download files.")

(defvar my/org-noter-directory (expand-file-name "noter/" my/org-directory)
  "Directory for org-noter files.")

(defvar my/org-archive-directory (expand-file-name "archive/" my/org-directory)
  "Directory for archived org files.")

;; Create necessary directories, including subdirectories for Org Roam templates
(dolist (dir (list my/org-directory
                   my/org-roam-directory
                   my/org-downloads-directory
                   my/org-noter-directory
                   my/org-archive-directory
                   (expand-file-name "projects/" my/org-roam-directory)
                   (expand-file-name "literature/" my/org-roam-directory)
                   (expand-file-name "ideas/" my/org-roam-directory)
                   (expand-file-name "zettel/" my/org-roam-directory)
                   (expand-file-name "attachments/" my/org-directory)
                   (expand-file-name "reviews/" my/org-directory)
                   (expand-file-name "backups/" my/org-directory)))
  (unless (file-directory-p dir)
    (make-directory dir t)))

;; Helper function to find project files for the dynamic capture template.
(defun ar/find-org-projects ()
  "Return a list of all Org files with a \"project\" tag for capture."
  (let ((project-files ()))
    (dolist (file (directory-files-recursively "~/org/" "\\.org$"))
      (with-temp-buffer
        (insert-file-contents file)
        (when (re-search-forward "^#\\+filetags:.*:project:.*" nil t)
          (add-to-list 'project-files (list (file-name-nondirectory file) file)))))
    project-files))
#+end_src

** Better Font Faces
#+begin_src emacs-lisp
(defun ar/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.13)
                  (org-level-3 . 1.10)
                  (org-level-4 . 1.07)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.03)
                  (org-level-7 . 1.02)
                  (org-level-8 . 1)))
    (set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'bold :height (cdr face))))
#+end_src

** Core Configuration
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook
  ;; Hooks for org-mode itself.
  ((org-mode . org-indent-mode)
   (org-mode . visual-line-mode)
   (org-mode . auto-fill-mode)
   (org-mode . ar/org-font-setup)
   (org-mode . (lambda ()
                 "Set evil-mode TAB behavior and other buffer-local settings for Org."
                 (setq-local electric-indent-local-mode nil)
                 (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)))

   ;; Hooks for specialized Org buffers to provide a focused, distraction-free UI.
   (org-agenda-mode . (lambda ()
                        "Configure display for Org Agenda."
                        (visual-line-mode -1)
                        (toggle-truncate-lines 1)
                        (display-line-numbers-mode 0)
                        (setq mode-line-format nil) ; Hide modeline in agenda
                        (setq header-line-format nil)))
   (org-capture-mode . (lambda ()
                         "Hide modeline in capture buffers."
                         (setq mode-line-format nil)
                         (setq header-line-format nil))))

  :custom
  (org-directory my/org-directory)
  ;; Speed up agenda generation by specifying files.
  (org-agenda-files '("~/org/inbox.org"
                      "~/org/projects.org"
                      "~/org/habits.org"
                      "~/org/goals.org"))
  (org-default-notes-file (expand-file-name "inbox.org" my/org-directory))
  ;;(org-use-property-inheritance t) ; Allow property inheritance
  (org-log-done 'time) ; Log time when tasks are marked DONE
  (org-log-into-drawer t)
  (org-return-follows-link t) ; RET follows links
  (org-src-fontify-natively t) ; Better fontification for source blocks
  (org-pretty-entities t)  ; Display LaTeX-like entities
  (org-ellipsis " ⤵")  ; Custom ellipsis for folded headings
  (org-cycle-separator-lines 2) ; Two blank lines between headings when cycling
  (org-startup-indented t) ; Start Org buffers indented
  (org-startup-folded 'content) ; Fold content by default
  (org-hide-leading-stars t) ; Hide leading stars for a cleaner look
  (org-confirm-babel-evaluate nil) ; Do not ask for confirmation to run code blocks
  (org-hide-emphasis-markers t) ; Hide the *, /, _, etc. emphasis markers
  (org-src-tab-acts-natively t)  ; TAB in source blocks acts like it would in that language's mode
  (org-src-preserve-indentation t) ; Preserve indentation in source blocks
  (org-startup-with-inline-images t) ; Show images inline by default
  (org-image-actual-width 600) ;  adjust them to an appropriate size
  (org-tag-alist '(("@work"      . ?w)
                   ("@home"      . ?h)
                   ("@computer"  . ?c)
                   ("@errands"   . ?e)
                   ("read"       . ?r)
                   ("meeting"    . ?m)
                   ("urgent"     . ?u)
                   ("someday"    . ?s)))
  
  (org-todo-keywords
   '((sequence "📥 TODO(t)" "⚡ NEXT(n)" "⚙️ PROG(p)" "⏳ WAIT(w@/!)" "|" "✅ DONE(d!)" "❌ CANCEL(c@)")
     (sequence "📝 PLAN(P)" "🚀 ACTIVE(A)" "⏸️ PAUSED(x)" "|" "🏆 ACHIEVED(a)" "🗑️ DROPPED(D)")))
  (org-todo-keyword-faces
   '(("📥 TODO"      . (:foreground "#f7768e" :weight bold))      ; Red
     ("⚡ NEXT"      . (:foreground "#ff9e64" :weight bold))      ; Orange
     ("⚙️ PROG"      . (:foreground "#7aa2f7" :weight bold))      ; Blue
     ("⏳ WAIT"      . (:foreground "#e0af68" :weight bold))      ; Yellow
     ("✅ DONE"      . (:foreground "#9ece6a" :weight bold))      ; Green
     ("❌ CANCEL"    . (:foreground "#565f89" :weight bold))      ; Comment Grey
     ("📝 PLAN"      . (:foreground "#73daca" :weight bold))      ; Cyan
     ("🚀 ACTIVE"    . (:foreground "#bb9af7" :weight bold))      ; Magenta
     ("⏸️ PAUSED"    . (:foreground "#c0caf5" :weight bold))      ; Foreground
     ("🏆 ACHIEVED"  . (:foreground "#9ece6a" :weight bold))      ; Green
     ("🗑️ DROPPED"   . (:foreground "#565f89" :weight bold)))))  ; Comment Grey
#+end_src

** Babel & Structure Templates
Configure code block execution and create handy shortcuts for inserting common structures.
#+begin_src emacs-lisp
;; (with-eval-after-load 'org
;;   (org-babel-do-load-languages
;;    'org-babel-load-languages
;;    '((emacs-lisp . t)
;;      (python . t)))
;; 
;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))
;; 
;; (with-eval-after-load 'org
;;   (require 'org-tempo)
;;   (add-to-list 'org-structure-template-alist '("jpy" . "src jupyter-python"))
;;   (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
;;   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
;;   (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; Load common languages for Babel.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)))

  ;; Set default header arguments for all src blocks.
  (setq-default org-babel-default-header-args
                '((:session . "none")
                  (:results . "output replace")
                  (:exports . "code")
                  (:cache . "no")
                  (:noweb . "no")
                  (:hlines . "no")
                  (:tangle . "no")))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Visual Enhancements
This section makes Org mode beautiful and ergonomic, with modern styling and seamless Vim keybindings. The `org-modern` configuration complements the base `org-todo-keyword-faces` for a rich, thematic look.
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  ;; This package provides a cleaner, more modern look for Org buffers.
  (setq org-modern-hide-stars "· "
        org-modern-star '("◉" "○" "◈" "◇" "◆" "▷")
        org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.1
        org-modern-block-name
        '(("src" "»" "«")
          ("example" "»" "«")
          ("quote" "❝" "❞"))

        ;; Style TODO keywords directly in the headline.
        ;; This complements the main `org-todo-keyword-faces`.
        org-modern-todo-faces
        '(("📥 TODO"      . (:foreground "#f7768e" :weight bold))
          ("⚡ NEXT"      . (:foreground "#ff9e64" :weight bold))
          ("⚙️ PROG"      . (:foreground "#7aa2f7" :weight bold))
          ("⏳ WAIT"      . (:foreground "#e0af68" :weight bold))
          ("✅ DONE"      . (:background "#2f3c22" :foreground "#9ece6a" :weight bold))
          ("❌ CANCEL"    . (:strike-through t :foreground "#565f89"))
          ("📝 PLAN"      . (:foreground "#73daca" :weight bold))
          ("🚀 ACTIVE"    . (:foreground "#bb9af7" :weight bold))
          ("⏸️ PAUSED"    . (:foreground "#c0caf5" :weight bold))
          ("🏆 ACHIEVED"  . (:background "#364a5c" :foreground "#9ece6a" :weight bold :box t))
          ("🗑️ DROPPED"   . (:strike-through t :foreground "#565f89")))
    
        ;; Style tags with a subtle box, inspired by Doom Emacs.
        org-modern-tag-faces
        `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#3b4261")))
        org-modern-checkbox '((todo . "☐") (done . "☑") (cancel . "☒") (priority . "⚑") (on . "◉") (off . "○"))))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t))
#+end_src

** Agenda: The Command Center
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :custom
  (org-agenda-window-setup 'current-window)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-span 'week)
  (org-agenda-start-on-weekday nil)
  (org-agenda-start-day "today")
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-include-deadlines t)
  (org-agenda-block-separator ?─)
  (org-agenda-compact-blocks t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-log-mode-items '(closed clock state))
  (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2))
  (org-agenda-time-grid '((daily today require-timed)
                          (800 1000 1200 1400 1600 1800 2000)
                          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────")

  :config
  (setq org-agenda-custom-commands
        '(("d" "📅 Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)
                        (org-agenda-overriding-header "📅 Agenda")))
            (todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))
            (tags-todo "project/🚀 ACTIVE" ((org-agenda-overriding-header "🚀 Active Projects")))
            (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "🔥 High Priority")))
            (todo "⏳ WAIT" ((org-agenda-overriding-header "⏳ Waiting On")))
            (tags-todo "+habit" ((org-agenda-overriding-header "🔄 Habits")))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects")))))

          ("n" "⚡ Next Tasks"
           ((todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))))

          ("w" "💼 Work Context"
           ((tags-todo "@work/⚡ NEXT" ((org-agenda-overriding-header "💼 Work Next")))
            (tags-todo "@work/📥 TODO" ((org-agenda-overriding-header "💼 Work Tasks")))
            (tags-todo "@work+project/🚀 ACTIVE" ((org-agenda-overriding-header "💼 Work Projects")))))

          ("h" "🏠 Home Context"
           ((tags-todo "@home/⚡ NEXT" ((org-agenda-overriding-header "🏠 Home Next")))
            (tags-todo "@home/📥 TODO" ((org-agenda-overriding-header "🏠 Home Tasks")))))

          ("p" "📋 Projects Overview"
           ((tags "project" ((org-agenda-overriding-header "📋 All Projects")))))

          ("g" "🎯 Goals Review"
           ((tags-todo "goal" ((org-agenda-overriding-header "🎯 Goals")))))

          ("r" "🔍 Review"
           ((agenda "" ((org-agenda-span 'day) (org-agenda-overriding-header "📅 Today")))
            (todo "✅ DONE" ((org-agenda-overriding-header "✅ Completed Today")
                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottoday))))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects"))))))))

(use-package org-super-agenda
  :after org-agenda
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
        '((:name "🔥 Overdue" :deadline past)
          (:name "📅 Today" :time-grid t :scheduled today)
          (:name "⚡ Next" :todo "⚡ NEXT")
          (:name "🔥 Important" :priority "A")
          (:name "📋 Projects" :tag "project")
          (:name "🏠 Home" :tag "@home")
          (:name "💼 Work" :tag "@work")
          (:name "⏳ Waiting" :todo "⏳ WAIT")
          (:name "📚 Reading" :tag "read")
          (:name "🎯 Goals" :tag "goal")
          (:name "🔄 Habits" :tag "habit")
          (:discard (:anything t)))))
#+end_src

** Org Roam: The Knowledge Graph
Org Roam is configured for rapid, Zettelkasten-style note-taking. Templates are minimal and flexible, and the UI is integrated to feel like a natural extension of Emacs.
#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :init
  (setq org-roam-directory my/org-roam-directory)
  (setq org-roam-db-location (expand-file-name "org-roam.db" user-emacs-directory))
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:20}" 'face 'org-tag)))
  :config
  (org-roam-db-autosync-mode)

  ;; Configure the backlinks buffer to appear in a right-hand sidebar.
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; Templates for different kinds of notes (Zettelkasten).
  (setq org-roam-capture-templates
      '(("d" "default" plain "* %?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+filetags: \n\n")
         :unnarrowed t)
        ("p" "project" plain "* Goal\n\n%?\n\n* Tasks\n\n* Notes\n\n* Log\n"
         :target (file+head "projects/${slug}.org"
                            "#+title: Project: ${title}\n#+filetags: project\n")
         :unnarrowed t)
        ("l" "literature note" plain "* Source\n  - Author: \n  - Title: \n  - Year: \n\n* Summary\n\n%?\n\n* Key Takeaways\n\n* Quotes\n"
         :target (file+head "literature/${slug}.org"
                            "#+title: ${title}\n#+filetags: literature\n")
         :unnarrowed t)
        ("i" "idea" plain "* %?"
         :target (file+head "ideas/${slug}.org"
                            "#+title: ${title}\n#+filetags: idea fleeting\n")
         :unnarrowed t)
        ("z" "zettel" plain "* %?\n\n* References\n\n"
         :target (file+head "zettel/${slug}.org"
                            "#+title: ${title}\n#+filetags: zettel permanent\n")
         :unnarrowed t)
        ("j" "journal" plain "* Log\n\n%?"
         :target (file+datetree (expand-file-name "journal.org" my/org-roam-directory))
         :unnarrowed t))))

(use-package org-roam-ui
  :after org-roam
  :commands (org-roam-ui-mode org-roam-ui-open)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start nil))

(use-package consult-org-roam
  :after (consult org-roam)
  :init (consult-org-roam-mode 1))
#+end_src
** 📥 TODO Capture: The Gateway to Org
Your central inbox for capturing tasks, notes, and ideas, now featuring the
advanced dynamic project task template.
*Use dynamic directory*
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :custom
  (org-capture-templates
   '(("t" "📥 Task" entry (file+headline "~/org/inbox.org" "Tasks")
      "* 📥 TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n")

     ("n" "📝 Note" entry (file+headline "~/org/inbox.org" "Notes")
      "* %? :note:\n  :PROPERTIES:\n  :CREATED: %U\n  :SOURCE: \n  :END:\n")

     ("j" "📔 Journal" entry (file+datetree "~/org/journal.org")
      "* %U %?\n")

     ("m" "🤝 Meeting" entry (file+headline "~/org/inbox.org" "Meetings")
      "* Meeting: %? :meeting:\n  :PROPERTIES:\n  :CREATED: %U\n  :ATTENDEES: \n  :END:\n** Agenda\n** Notes\n** Action Items\n")

     ("p" "📝 Project" entry (file+headline "~/org/projects.org" "Projects")
      "* 📝 PLAN %? :project:\n  :PROPERTIES:\n  :CREATED: %U\n  :GOAL: \n  :DEADLINE: \n  :END:\n** Goals\n** Tasks\n*** 📥 TODO Define project scope\n** Resources\n** Notes\n")
     ;;New template to add tasks directly to existing projects.
     ("P" "📌 Project Task" entry
      (file (lambda ()
              (let* ((project-list (ar/find-org-projects))
                     (project-name (completing-read "Select Project: " project-list)))
                (cdr (assoc project-name project-list)))))
      "* 📥 TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
      :prepend t
      :headline "Tasks")

     ("b" "📚 Book" entry (file+headline "~/org/reading.org" "Reading List")
      "* %? :book:read:\n  :PROPERTIES:\n  :CREATED: %U\n  :AUTHOR: \n  :GENRE: \n  :PAGES: \n  :STARTED: \n  :FINISHED: \n  :RATING: \n  :END:\n** Summary\n** Key Takeaways\n** Quotes\n")

     ("h" "🔄 Habit" entry (file+headline "~/org/habits.org" "Habits")
      "* 📥 TODO %? :habit:\n  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n  :PROPERTIES:\n  :CREATED: %U\n  :STYLE: habit\n  :END:\n")

     ("g" "🎯 Goal" entry (file+headline "~/org/goals.org" "Goals")
      "* 🎯 GOAL %? :goal:\n  DEADLINE: %(org-read-date nil nil \"+1y\")\n  :PROPERTIES:\n  :CREATED: %U\n  :TYPE: \n  :END:\n** Why this goal?\n** Success criteria\n** Action steps\n*** 📥 TODO Break down into smaller tasks\n** Resources needed\n** Potential obstacles\n** Progress tracking\n"))))
#+end_src

** Org Habit
#+begin_src emacs-lisp
(use-package org-habit
  :ensure nil
  :after org
  :custom
  ;; Display the habit consistency graph starting in column 60 of the agenda.
  (org-habit-graph-column 60)
  ;; Keep the agenda clean by only showing graphs for habits due today.
  (org-habit-show-habits-only-for-today t)
  ;; Represent habit states with clear emojis.
  (org-habit-pregraph-format "  ")
  (org-habit-graph-mature-star "✅")
  (org-habit-graph-fresh-star "👌")
  (org-habit-graph-ready-star "👍")
  (org-habit-graph-early-star "🌱")
  (org-habit-graph-late-star "👎")
  (org-habit-graph-future-star "…"))
#+end_src

** Evil Integration
#+begin_src emacs-lisp
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
  (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
  ;; Org-mode specific bindings
  "o" '(:ignore t :which-key "org")
  "o a" '(org-agenda :wk "agenda")
  "o c" '(org-capture :wk "capture")
  "o s" '(org-schedule :wk "schedule")
  "o d" '(org-deadline :wk "deadline")
  "o t" '(org-set-tags-command :wk "🏷️ set tags")

  ;; Org-roam specific bindings
  "n" '(:ignore t :which-key "notes")
  "n f" '(org-roam-node-find :wk "find node")
  "n i" '(org-roam-node-insert :wk "insert node")
  "n c" '(org-roam-capture :wk "roam capture")
  "n g" '(org-roam-graph :wk "show graph")
  "n t" '(org-roam-tag-add :wk "add tag"))
#+end_src

* Workflow Management
** Dired/Dirvish
** Workspaces
#+begin_src emacs-lisp
(use-package perspective
  :init
  ;; Set the state file location before enabling the mode.
  (setq persp-state-default-file (expand-file-name "perspectives" user-emacs-directory))
  
  ;; REQUIRED for Emacs 28+: Set a native prefix key for perspective's own commands.
  (setq persp-mode-prefix-key (kbd "C-c p"))

  ;; Now, enable the mode.
  (persp-mode +1)

  :custom
  ;; Automatically kill empty perspectives to keep the list clean.
  (persp-auto-kill-on-last-buffer-close t)

  :config
  ;; Custom function to automatically create or switch to a project-specific perspective.
  (defun ar/perspective-switch-or-create ()
    "Switch to a perspective named after the current project, creating it if needed."
    (interactive)
    (let ((project-name (projectile-project-name)))
      (unless (string= project-name "-") ; Ignore if not in a project
        (if (get-perspective project-name)
            (persp-switch project-name)
          (persp-add-new project-name)
          (persp-switch project-name)))))

  ;; Hook this function into projectile to run after switching projects.
  (add-hook 'projectile-after-switch-project-hook #'ar/perspective-switch-or-create)

  ;; Load the saved perspectives when Emacs starts.
  (when (file-exists-p persp-state-default-file)
    (persp-load-state-from-file persp-state-default-file))

  ;; Define your custom leader keybindings for workspace management.
  (ar/global-leader
   "w" '(:ignore t :which-key "workspaces")
   "w n" '(persp-next :wk "next workspace")
   "w p" '(persp-prev :wk "previous workspace")
   "w s" '(persp-switch :wk "switch workspace")
   "w b" '(persp-switch-to-buffer :wk "switch buffer in workspace")
   "w c" '(persp-add-new :wk "create workspace")
   "w r" '(persp-rename :wk "rename workspace")
   "w k" '(persp-kill :wk "kill workspace")))
#+end_src

** Popup Management: Taming Special Buffers
#+begin_src emacs-lisp
;; This alist defines rules for how certain buffers should be displayed.
;; We are creating a "popup" rule for transient, non-file buffers.
(setq display-buffer-alist
      '(;; Match buffers whose names start with a '*' (e.g., *Help*, *Messages*).
        ("^\\*.*\\*$"
         (display-buffer-in-side-window)
         ;; Display at the bottom of the frame.
         (side . bottom)
         ;; The popup should occupy 25% of the frame's height.
         (window-height . 0.25)
         ;; Do not select the popup window after displaying it.
         (inhibit-same-window . t)
         ;; Do not let the popup window become dedicated.
         (inhibit-switch-frame . t))))

;; Additionally, configure `which-key` to use a smaller, less intrusive popup.
(setq which-key-side-window-max-height 0.25)

;; Ensure Embark's collector buffers are also treated as popups.
(add-to-list 'display-buffer-alist
             '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
               (display-buffer-in-side-window)
               (side . bottom)
               (window-height . 0.25)
               (inhibit-same-window . t)))
#+end_src

** Project Management: Deep `projectile` Integration
#+begin_src emacs-lisp
(use-package projectile
  :init
  ;; Enable projectile globally.
  (projectile-mode +1)

  :custom
  ;; Use the default completion system, which will be powered by Vertico/Consult.
  (projectile-completion-system 'default)
  ;; Define where Projectile should look for your projects.
  (projectile-project-search-path '("~/Code/" "~/Projects/"))
  ;; Enable caching for significant performance improvements.
  (projectile-enable-caching t)
  ;; When switching projects, immediately open a file prompt within that project.
  (projectile-switch-project-action #'projectile-find-file)

  :config
  ;; Define our extensive project-management keybindings under the "p" prefix.
  (ar/global-leader
    "p" '(:ignore t :wk "project")
    "p p" '(projectile-switch-project :wk "switch project")
    "p f" '(consult-projectile :wk "find file in project")
    "p d" '(projectile-find-dir :wk "find directory in project")
    "p b" '(projectile-switch-to-buffer :wk "find buffer in project")
    "p g" '(consult-ripgrep :wk "grep in project")
    "p s" '(:ignore t :wk "save/kill")
    "p s s" '(projectile-save-project-buffers :wk "save project buffers")
    "p s k" '(projectile-kill-buffers :wk "kill project buffers")
    "p c" '(projectile-compile-project :wk "compile project")
    "p t" '(projectile-run-tests :wk "run project tests")
    "p R" '(projectile-replace :wk "replace in project")))

;; A `consult` source specifically for projectile, if not already provided
;; by another package. This provides the `consult-projectile` command.
(use-package consult-projectile
  :after (consult projectile))
#+end_src

** Buffer Management: A Project-Aware `ibuffer`
#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :after (ibuffer projectile)
  :config
  ;; This hook automatically creates project-based groups in ibuffer.
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-projectile-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'project-file-relative)
                (ibuffer-do-sort-by-project-file-relative)))))

;; Integrate nerd-icons for a more modern look, similar to Doom's setup.
(use-package nerd-icons-ibuffer
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(ar/global-leader
  ;; Buffer management
  "b" '(:ignore t :which-key "buffers")
  "b b" '(consult-buffer :which-key "switch buffer")
  ;; This keybinding now opens the project-aware ibuffer.
  "b i" '(ibuffer :which-key "ibuffer (by project)")
  "b k" '(kill-current-buffer :which-key "kill buffer")
  "b n" '(next-buffer :which-key "next buffer")
  "b p" '(previous-buffer :which-key "previous buffer")
  "b r" '(revert-buffer :which-key "revert buffer")
  "b s" '(save-buffer :which-key "save buffer"))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  ;; This allows you to jump to the treemacs window with M-0 (if you use winum).
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))

  :custom
  ;; --- Replicating the Doom Emacs Treemacs aesthetic and behavior ---
  (treemacs-position 'left)
  (treemacs-width 35)
  (treemacs-indentation 2)
  (treemacs-is-never-other-window t)
  (treemacs-collapse-dirs t)
  (treemacs-silent-refresh nil)
  (treemacs-change-root-on-project-switch t)
  (treemacs-follow-after-init t)
  (treemacs-expand-after-init t)
  (treemacs-show-hidden-files t)
  (treemacs-git-mode 'deferred) ; Use deferred git mode for performance

  :config
  (treemacs-resize-icons 22)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t))

;; (use-package treemacs
;;   :after nerd-icons
;;   :config
;;   (treemacs-follow-mode t)
;;   (treemacs-filewatch-mode t)
;;   (treemacs-fringe-indicator-mode 'always)
;;   (treemacs-git-mode 'deferred)
;;   (pcase (cons (executable-find "git") treemacs-python-executable)
;;     (`(t . t) (treemacs-git-mode 'deferred))
;;     (`(t . nil) (treemacs-git-mode 'simple)))
;;   :bind
;;   (:map global-map
;;         ("M-0" . treemacs-select-window)
;;         ("C-x t t" . treemacs)))


;; Evil mode integration for vim-like navigation.
(use-package treemacs-evil
  :after (treemacs evil))

;; Projectile integration.
(use-package treemacs-projectile
  :after (treemacs projectile))

;; Magit integration.
(use-package treemacs-magit
  :after (treemacs magit))
#+end_src

* Development Environment
** Language Server Protocol
This setup uses `lsp-mode` as the core client and `lsp-ui` for the user interface, with a focus on performance and deep integration with the completion
framework.

*** Core Setup with Performance Booster
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((prog-mode . lsp-deferred)
         (org-src-mode . lsp-deferred))
  :init
  ;; Performance Settings.
  (setq lsp-idle-delay 0.500
        lsp-log-io nil
        lsp-enable-snippet nil ; Rely on the main completion framework (Corfu).
        lsp-enable-file-watchers nil ; Resource-intensive; global-auto-revert-mode is sufficient.
        lsp-enable-semantic-tokens nil) ; Use Tree-sitter for semantic highlighting.

  :custom
  (lsp-headerline-breadcrumb-enable t)
  (lsp-eldoc-render-all nil) ; Keep eldoc clean.
  (lsp-signature-render-documentation nil) ; Avoid overly large signature popups.
  (lsp-completion-provider :none)

  :config
  (defun lsp-booster--advice (old-fn &rest args)
    "Advice to boost LSP server communication."
    (let ((proc (apply old-fn args)))
      (when (and proc (derived-mode 'lsp-mode))
        (let* ((command (process-command proc))
               (booster-command (cons "emacs-lsp-booster" command)))
          (when (executable-find (car booster-command))
            (message "LSP Booster: Boosting %s" command)
            (let ((new-proc (apply #'start-process (process-name proc) (process-buffer proc) booster-command)))
              (set-process-sentinel proc (lambda (p e) nil))
              (kill-process proc)
              (setq proc new-proc)))))
      proc))
  (advice-add 'lsp--open-socket :around #'lsp-booster--advice)

  ;; Remap standard keys to their LSP counterparts for ergonomic navigation.
  (define-key lsp-mode-map (kbd "M-.") #'lsp-find-definition)
  (define-key lsp-mode-map (kbd "M-,") #'lsp-find-references))
#+end_src

*** LSP User Interface
This provides the sidebars, documentation popups, and code peeking functionality. Icons are configured manually.
#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-peek-enable t)
  (lsp-ui-sideline-enable t)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-delay 2)
  (lsp-ui-sideline-delay 0.5)
  (lsp-ui-peek-always-show t)
  (lsp-ui-imenu-enable t)
  (lsp-ui-flycheck-enable t)
  (lsp-ui-flycheck-list-position 'right))
#+end_src

*** LSP Integrations
#+begin_src emacs-lisp
;; Treemacs integration for LSP symbols.
(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list)

;; Consult integration for LSP.
(use-package consult-lsp
  :after (consult lsp-mode))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
  "l" '(:ignore t :which-key "lsp")
  "l a" '(lsp-execute-code-action :wk "code action")
  "l d" '(lsp-find-definition :wk "go to definition")
  "l D" '(lsp-find-declaration :wk "go to declaration")
  "l i" '(lsp-find-implementation :wk "go to implementation")
  "l r" '(lsp-find-references :wk "find references")
  "l R" '(lsp-rename :wk "rename")
  "l s" '(lsp-treemacs-symbols :wk "workspace symbols")
  "l e" '(lsp-treemacs-errors-list :wk "workspace errors")
  "l f" '(lsp-format-buffer :wk "format buffer")
  "l h" '(:ignore t :which-key "help")
  "l h h" '(lsp-describe-thing-at-point :wk "describe at point")
  "l h s" '(lsp-signature-help :wk "signature help"))
#+end_src

** Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  :custom
  ;; Check syntax on newline and after a short idle period.
  (flycheck-check-syntax-automatically '(newline idle-change))
  (flycheck-idle-change-delay 0.4)
  :config
  ;;(flycheck-multiple-checkers-enable)
  )

;; Use a popup frame for displaying Flycheck errors, which is less intrusive.
(use-package flycheck-posframe
  :after flycheck
  :hook (flycheck-mode . flycheck-posframe-mode))
#+end_src

** Formatting
#+begin_src emacs-lisp
(use-package apheleia
  :init (apheleia-global-mode +1)
  :config
  ;; Enable formatting on save. Apheleia is smart enough not to interfere
  ;; if the buffer is already clean or being handled by another process like LSP.
  (add-hook 'before-save-hook #'apheleia-format-buffer))
#+end_src

** Debug Adapter Protocol
#+begin_src emacs-lisp
#+end_src

*** Keybindins
#+begin_src emacs-lisp
#+end_src

** Treesitter
* File Management
** Dired
This setup enhances the built-in Dired, turning it into a fast, modern, and feature-rich file manager that integrates perfectly with Evil mode and your other packages.
#+begin_src emacs-lisp
(use-package fd-dired
  :config
  (setq fd-dired-use-gnu-find-syntax t))

;; Provides commands to open files with external applications.
(use-package dired-open
  :config
  (setq dired-open-extensions '(("png" . "imv") ("mp4" . "mpv"))))

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  :config
  ;; Enable git gutter information asynchronously.
  (add-hook 'dired-mode-hook 'dired-git-info-mode)

  ;; Define evil-mode keys for a vim-like experience.
  (evil-define-key 'normal dired-mode-map
    ;; Navigation
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file-other-window ; Open in other window is often more useful
    (kbd "j") 'dired-next-line
    (kbd "k") 'dired-previous-line
    (kbd "G") 'dired-goto-file
    (kbd "gg") 'dired-first-line
    (kbd "^") 'dired-goto-root-directory
    (kbd "~") 'dired-home
    (kbd "RET") 'dired-find-file
    (kbd "i") 'dired-maybe-insert-subdir
    ;; Marking
    (kbd "m") 'dired-mark
    (kbd "u") 'dired-unmark
    (kbd "U") 'dired-unmark-all-marks
    (kbd "t") 'dired-toggle-marks
    ;; File Operations
    (kbd "C-n") 'dired-create-file
    (kbd "C-d") 'dired-create-directory
    (kbd "R") 'dired-do-rename
    (kbd "D") 'dired-do-delete
    (kbd "C") 'dired-do-copy
    (kbd "X") 'dired-open-file ; Use dired-open to open externally
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown))

;; dired-x for additional functionality
(use-package dired-x
  :ensure nil
  :after dired
  :custom (dired-x-hands-off-my-keys nil)
  :config
  ;; Define dired-omit-files to prevent void-variable errors
  (setq dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$")
  (setq dired-omit-verbose nil))

;; Asynchronously display git status in Dired. Highly performant.
(use-package dired-git-info
  :commands dired-git-info-mode)

;; Adds Nerd Font icons to Dired.
(use-package nerd-icons-dired
  :hook (dired-mode . nerd-icons-dired-mode))

;; Hide dotfiles by default.
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (define-key dired-mode-map (kbd "H") 'dired-hide-dotfiles-mode))

;; Allows editing directory listings directly (wdired) with ranger-like keys.
(use-package dired-ranger
  :after dired
  :config
  (define-key dired-mode-map (kbd "y") 'dired-ranger-copy)
  (define-key dired-mode-map (kbd "p") 'dired-ranger-paste)
  (define-key dired-mode-map (kbd "x") 'dired-ranger-move))
#+end_src

** Dirvish
A highly-optimized, preview-focused file manager inspired by yazi.
#+begin_src emacs-lisp
#+end_src

#+RESULTS:

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
  "f" '(:ignore t :which-key "file")
  "f f" '(find-file :wk "find file")
  "f e" '(dired (or (buffer-file-name) default-directory) :wk "explore directory")
  "f r" '(consult-recent-file :wk "find recent file")
  "f t" '(treemacs-find-file :wk "find file in treemacs")
  "f d" '(treemacs-find-dir :wk "find directory in treemacs"))
#+end_src

* General Tools
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :defer t
  ;; Remap the standard help keys to use Helpful instead
  :bind
  (([remap describe-function] . helpful-function)
   ([remap describe-command] . helpful-command)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-key] . helpful-key)))
#+end_src

** Wgrep: Writable Grep
#+begin_src emacs-lisp
(use-package wgrep
  :commands (wgrep-change-to-wgrep-mode)
  :config
  ;; evil-collection provides bindings like :wq to save and :q! to abort.
  (setq wgrep-auto-save-buffer t))
#+end_src

** Version Control
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-blame)
  :custom
  ;; For a focused view, display the Magit status buffer in its own frame.
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  ;; Automatically save file-visiting buffers before staging changes.
  (magit-save-repository-buffers 'dont-confirm)
  :config
  ;; When quitting Magit, this ensures the previous window configuration is restored.
  ;; The `magit-display-buffer-fullframe-status-v1` function saves the layout
  ;; to the `:magit-fullscreen` register, which we jump back to.
  (defun ar/magit-quit-and-restore-windows ()
    "Kill the Magit buffer and restore the previous window configuration."
    (interactive)
    (kill-buffer (current-buffer))
    (when (get-register :magit-fullscreen)
      (jump-to-register :magit-fullscreen)))

  ;; Bind "q" in the status buffer to our custom quitting function.
  (define-key magit-status-mode-map (kbd "q") #'ar/magit-quit-and-restore-windows))
#+end_src

*** Forge
`forge` provides integration with online Git forges (e.g., GitHub, GitLab).
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

*** Magit Todos
`magit-todos` displays TODO items from your project files in the status buffer.
#+begin_src emacs-lisp
(use-package magit-todos
  :after magit
  :hook (magit-mode . magit-todos-mode))
#+end_src

*** Git Timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 "g" '(:ignore t :wk "git")
 "g s" '(magit-status :wk "status")
 "g c" '(magit-commit :wk "commit")
 "g C" '(magit-commit-amend :wk "commit amend")
 "g p" '(magit-push-current-to-pushremote :wk "push")
 "g P" '(magit-pull-from-upstream :wk "pull")
 "g b" '(magit-branch :wk "branches")
 "g l" '(magit-log-buffer-file :wk "log current file")
 "g L" '(magit-log-current :wk "log current branch")
 "g d" '(magit-diff-unstaged :wk "diff")
 "g f" '(magit-fetch :wk "fetch")
 "g m" '(magit-merge :wk "merge")
 "g r" '(magit-rebase :wk "rebase"))
#+end_src

** PDF-Tools
*** Core

#+begin_src emacs-lisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)

  ;; Hooks to activate modes and theming automatically.
  :hook (pdf-view-mode . pdf-view-midnight-minor-mode)
  ;; Theme customization to match doom-tokyo-night.
  :custom
  ;; Use the specific Tokyonight background and foreground colors for the PDF view.
  (pdf-view-midnight-colors '("#1a1b26" . "#c0caf5"))
  ;; Enable continuous scrolling for a smoother experience.
  (pdf-view-continuous t)

  :custom-face
  ;; Customize other faces to match the Tokyonight aesthetic.
  (pdf-view-highlight-face ((t (:background "#e0af68" :foreground "#1a1b26")))) ; Yellow
  (pdf-view-link-face ((t (:foreground "#7aa2f7"))))      ; Blue
  (pdf-view-active-link-face ((t (:foreground "#bb9af7")))); Magenta

  :config
  ;; Define Evil-friendly keybindings for pdf-view-mode.
  (evil-define-key 'normal pdf-view-mode-map
    ;; Navigation
    "j"         'pdf-view-next-line-or-next-page
    "k"         'pdf-view-previous-line-or-previous-page
    "H"         'pdf-view-history-backward
    "L"         'pdf-view-history-forward
    "gg"        'pdf-view-first-page
    "G"         'pdf-view-last-page
    (kbd "C-f") 'pdf-view-scroll-down-or-next-page
    (kbd "C-b") 'pdf-view-scroll-up-or-previous-page

    ;; Sizing and Fitting
    "="         'pdf-view-fit-height-to-window
    "-"         'pdf-view-fit-width-to-window
    "0"         'pdf-view-scale-reset

    ;; Actions
    "s"         'pdf-view-search
    "o"         'pdf-outline
    "a"         'pdf-annot-minor-mode)

  ;; Define leader keys for document-related actions.
  (ar/global-leader
    "d" '(:ignore t :which-key "documents")
    "d p" '(:ignore t :which-key "pdf")
    "d p o" '(pdf-outline :wk "PDF outline")
    "d p s" '(consult-ripgrep :wk "Search in PDFs")))
#+end_src

*** Org pdf-tools
#+begin_src emacs-lisp
(use-package org-pdftools
  :after org
  :config
  ;; This ensures that when you call `org-open-at-point` on a pdf link,
  ;; it opens the pdf and highlights the linked region.
  (add-to-list 'org-open-link-functions 'org-pdftools-open-link)
  
  ;; Set the prefix for pdftools links in Org mode.
  (setq org-pdftools-link-prefix "pdf"))
#+end_src

*** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :after (org pdf-view)
  :custom
  ;; Store all notes inside the dedicated `noter` directory.
  (org-noter-notes-search-path (list my/org-noter-directory))
  ;; Use a consistent naming scheme for note files.
  (org-noter-notes-file-name "%s.org")
  ;; Automatically create a new heading for each note.
  (org-noter-insert-note-no-questions t)
  ;; Keep the notes window focused after creating a note.
  (org-noter-always-focus-on-notes-buffer t)
  ;; Customize the note heading template.
  (org-noter-heading-application-function 'org-noter-insert-heading-at-point)
  (org-noter-note-heading-template "* %s\n:PROPERTIES:\n:NOTER_PAGE: %p\n:NOTER_LEFT: %l\n:NOTER_RIGHT: %r\n:END:\n\n")

  :config
  ;; Custom function to create a new notes file if one doesn't exist
  ;; or find the existing one and open it side-by-side.
  (defun ar/org-noter-find-or-create-notes ()
    "Find the notes for the current PDF or create a new notes file.
Opens the notes in a split window to the right."
    (interactive)
    (let ((pdf-path (buffer-file-name)))
      (unless pdf-path
        (error "Current buffer is not visiting a file"))
      (let* ((pdf-name (file-name-nondirectory pdf-path))
             (notes-file (expand-file-name (format "%s.org" (file-name-sans-extension pdf-name)) my/org-noter-directory)))
        (if (file-exists-p notes-file)
            (find-file notes-file)
          (progn
            (find-file notes-file)
            (insert (format "#+title: Notes on %s\n\n" pdf-name))))
        (delete-other-windows)
        (split-window-right)
        (windmove-right)
        (find-file pdf-path))))

  ;; Keybinding for `org-noter`
  (ar/global-leader
    "n" '(:ignore t :which-key "notes")
    "n n" '(ar/org-noter-find-or-create-notes :wk "Open/Create PDF Notes")
    "n i" '(org-noter-insert-note :wk "Insert Note")))
#+end_src

* Envrc
#+begin_src emacs-lisp
(use-package envrc
  :hook (after-init . envrc-global-mode))
#+end_src

* Perform Garbage Collection When Idle
This is a good practice to keep Emacs responsive.
#+begin_src emacs-lisp
(add-hook 'after-focus-change-hook
          (lambda ()
            (unless (frame-focus-state)
              (garbage-collect))))
#+end_src
