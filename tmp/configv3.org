#+TITLE: Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+STARTUP: overview
#+PROPERTY: :tangle yes :lexical yes

* Core Setup & Initialization
This section handles package management, restores garbage collection settings, defines global behaviors, and sets up fonts.

** Package Management
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)
;; It's generally good practice to call package-initialize before setting package-archives
(package-initialize)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("melpa" . "https://melpa.org/packages/")))

;; Refresh package contents if they are not already available
;; This can be blocking on startup, consider a non-blocking approach for faster startup if needed.
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t
      use-package-compute-statistics t)

;; Add custom lisp directory to load-path
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Performance & Behavior
#+begin_src emacs-lisp
;; Manually setting up core Emacs settings that were previously in 'use-package emacs'

;; After startup, restore the GC to a more interactive setting.
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 2 1024 1024)) ;; 2 MB
            (setq gc-cons-percentage 0.1)
            (message "Garbage collection threshold restored.")))

;; Native Compilation Pruning
(when (fboundp 'native-compile-prune-cache)
  (add-hook 'after-init-hook #'native-compile-prune-cache))

;; Reload config function
(defun ar/reload-config ()
  "Reload the Emacs configuration."
  (interactive)
  ;; Assuming config.org is the main configuration file and this config.el is tangled from it.
  ;; If config.el is the primary config, change to: (load-file (expand-file-name "config.el" user-emacs-directory))
  (let ((config-file (expand-file-name "config.org" user-emacs-directory)))
    (if (file-exists-p config-file)
        (progn
          (message "Reloading Emacs configuration from config.org...")
          (org-babel-load-file config-file)
          (message "Configuration reloaded successfully!"))
      (error "Configuration file %s not found" config-file))))

;; Bind ar/reload-config globally
(global-set-key (kbd "C-c r") 'ar/reload-config)

;; General UI & Behavior
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
(setq sentence-end-double-space nil)
(setq fill-column 80)
(setq delete-by-moving-to-trash t)
(defalias 'yes-or-no-p 'y-or-n-p)

;; Display & Scrolling
(global-visual-line-mode 1)
(setq scroll-conservatively 101)
(setq scroll-margin 3)
(setq-default line-spacing 0.02)
(setq-default cursor-type 'box)
(when (display-graphic-p)
  (setq x-stretch-cursor t))

;; Minibuffer
(setq enable-recursive-minibuffers t)
(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))

;; Basic Modes
(save-place-mode 1)
(column-number-mode 1)
(global-auto-revert-mode 1)
(delete-selection-mode 1)
(auto-save-visited-mode 1)

;; Global keybindings for text scaling
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

;; Enable auto-fill for text-based modes
(add-hook 'text-mode-hook 'auto-fill-mode)
(add-hook 'prog-mode-hook 'auto-fill-mode)

;; Unicode and Ligatures Setup
(set-language-environment "UTF-8")
(set-fontset-font t 'unicode "Noto Color Emoji" nil 'append)
(set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
(global-prettify-symbols-mode 1)
(global-auto-composition-mode 1)
#+end_src

** Line Numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode -1)
(setq-default display-line-numbers-grow-only t
              display-line-numbers-width 2)

;; Enable line numbers for some modes
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))
#+end_src

** Fonts & Ligatures
#+begin_src emacs-lisp
(defun ar/set-font-faces ()
  "Set all font faces for the current frame."
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame) (with-selected-frame frame (ar/set-font-faces))))
  (ar/set-font-faces))
#+end_src

* UI & Theme
This section configures the overall look and feel, including the theme, modeline, icons, and pop-up windows.

#+begin_src emacs-lisp
(use-package doom-themes
  :demand t
  :config
  (load-theme 'doom-tokyo-night t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t))

(use-package doom-modeline
  :demand t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 28)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-project-detection 'auto)
  (doom-modeline-lsp t)
  (doom-modeline-minor-modes nil))

(use-package solaire-mode
  :init (solaire-global-mode)
  :config
  ;; Differentiate popups from "real" buffers
  (add-hook 'completion-list-mode-hook #'solaire-mode)
  (add-hook 'which-key-mode-hook #'solaire-mode)
  (add-hook 'help-mode-hook #'solaire-mode)
  (add-hook 'info-mode-hook #'solaire-mode)
  (add-hook 'org-src-mode-hook #'solaire-mode)
  (advice-add 'vertico--display-candidates :after
              (lambda (&rest _)
                (when (minibufferp)
                  (with-selected-window (minibuffer-window) (solaire-mode +1))))))

(use-package nerd-icons
  :if (display-graphic-p)
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t))

(use-package which-key
  :init (which-key-mode 1)
  :custom
  (which-key-idle-delay 0.1)
  (which-key-separator " → ")
  (which-key-popup-type 'minibuffer))

(use-package dashboard
  :init (dashboard-setup-startup-hook)
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (dashboard-center-content t)
  (dashboard-items '((recents . 5) (projects . 5) (agenda . 5)))
  (dashboard-startup-banner 'logo)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons))
#+end_src

* Evil Mode (Vim Emulation)
This section configures Evil and its ecosystem of packages for a complete Vim-like experience.

** Core Evil Setup
#+begin_src emacs-lisp
(use-package evil
  :demand t
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-Y-yank-to-eol t)
  :config
  (evil-mode 1)
  (setq evil-undo-system 'undo-redo
        evil-respect-visual-line-mode t
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-shift-width 2)

  ;; Cursor Colors
  (setq evil-normal-state-cursor '(box "#fe8019")
        evil-insert-state-cursor '(bar "#fb4934")
        evil-visual-state-cursor '(hollow "#fe8019"))

  ;; Set initial states for various modes
  (dolist (mode '(messages-buffer-mode dashboard-mode compilation-mode grep-mode help-mode Info-mode))
    (evil-set-initial-state mode 'normal))
  (dolist (mode '(term-mode shell-mode eshell-mode))
    (evil-set-initial-state mode 'emacs)))
#+end_src

** Evil Extensions
#+begin_src emacs-lisp
(use-package evil-collection :after evil :init (evil-collection-init))
(use-package evil-surround :hook (evil-mode . global-evil-surround-mode))
(use-package evil-nerd-commenter :after evil)
(use-package evil-numbers :after evil)
(use-package evil-args :after evil)
(use-package evil-exchange :after evil :config (evil-exchange-install))
(use-package evil-indent-plus :after evil :config (evil-indent-plus-default-bindings))
(use-package evil-visualstar :hook (evil-mode . global-evil-visualstar-mode))
(use-package evil-matchit :hook (evil-mode . global-evil-matchit-mode))
(use-package evil-snipe :after evil :config (evil-snipe-mode 1) (evil-snipe-override-mode 1))
(use-package evil-lion :after evil :config (evil-lion-mode))
(use-package evil-multiedit :after evil :config (evil-multiedit-default-keybinds))
(use-package evil-goggles :hook (evil-mode . evil-goggles-mode) :custom (evil-goggles-duration 0.1))

(use-package evil-escape
  :hook (evil-mode . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.2)
  (evil-escape-excluded-modes '(dired-mode)))
#+end_src

* Completion Framework
This section configures the entire completion system, built around Vertico, Corfu, Consult, and Embark.

#+begin_src emacs-lisp
(use-package orderless
  :demand t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package vertico
  :init (vertico-mode)
  :custom
  (vertico-resize nil)
  (vertico-cycle t)
  (vertico-count 10))

(use-package corfu
  :init (global-corfu-mode)
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-delay 0.2)
  :config
  (corfu-popupinfo-mode)
  (corfu-history-mode 1))

(use-package nerd-icons-corfu
  :after (corfu nerd-icons)
  :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package cape
  :commands (cape-dabbrev cape-file cape-keyword)
  :init
  ;; Add the yasnippet CAPF before other completion sources.
  (add-to-list 'completion-at-point-functions #'yasnippet-capf)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  :config
  ;; Silence the noisy pcomplete capf
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent))

(use-package marginalia
  :after vertico
  :init (marginalia-mode))

(use-package nerd-icons-completion
  :after (nerd-icons marginalia)
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup))

(use-package consult
  :after vertico
  :bind (("C-s" . consult-line)
         ("C-x b" . consult-buffer)
         ("C-x C-r" . consult-recent-file)
         ("M-y" . consult-yank-pop)
         ("M-g g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g i" . consult-imenu))
  :custom
  (consult-narrow-key "<")
  (consult-find-args "fd --hidden --strip-cwd --type f --color=never")
  (consult-ripgrep-args "rg --null --line-buffered --color=never --smart-case --no-heading --line-number --hidden --glob '!.git/'")
  :config
  ;; Use consult for xref
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))

(use-package consult-flymake :ensure nil :after (consult flymake))
(use-package consult-dir :after consult)

(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark
  :after (vertico consult)
  :bind (("C-." . embark-act)
         ("C-;" . embark-dwim)))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* File Management
This section configures Dired and Dirvish for powerful file management.

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook ((dired-mode . auto-revert-mode)
         (dired-mode . diredfl-mode))
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (dired-dwim-target t)
  (dired-recursive-copies 'always)
  (dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$"))

(use-package dired-x :ensure nil :after dired)
(use-package nerd-icons-dired :hook (dired-mode . nerd-icons-dired-mode))

(use-package dirvish
  :after (dired dired-x nerd-icons-dired)
  :init (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries
   '(("h" "~/" "Home")
     ("d" "~/Downloads/" "Downloads")
     ("D" "~/Documents/" "Documents")
     ("p" "~/Projects/" "Projects")
     ("/" "/" "Root")))
  (dirvish-attributes '(nerd-icons file-time file-size collapse subtree-state vc-state))
  :config
  (dirvish-side))

(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and directory preview as well
   (dirvish-directory-view-mode . diredfl-mode))
  :config
  (set-face-attribute 'diredfl-dir-name nil :bold t))

(use-package dired-collapse :hook (dired-mode . dired-collapse-mode))
(use-package dired-subtree :after dired)
(use-package dired-narrow :after dired)
(use-package dired-ranger :after dired)
#+end_src

* Workflow & Project Management
This section handles window layouts, project navigation, and buffer management.

#+begin_src emacs-lisp
(use-package winner
  :ensure nil
  :init (winner-mode 1)
  :bind (("C-c <left>" . winner-undo)
         ("C-c <right>" . winner-redo)))

(use-package perspective
  :init (persp-mode)
  :custom
  (persp-mode-prefix-key (kbd "C-c l")) ; Changed prefix to avoid clash
  (persp-state-default-file (expand-file-name "perspective-session" user-emacs-directory))
  :config
  (add-hook 'kill-emacs-hook #'persp-state-save))

(use-package project
  :ensure nil
  :after (consult perspective)
  :custom
  (project-switch-commands
   '((project-find-file "Find file") (consult-ripgrep "Ripgrep")
     (project-dired "Dired") (project-shell "Shell")
     (project-switch-to-buffer "Switch buffer"))))

(use-package ibuffer
  :ensure nil
  :bind (("C-x C-b" . ibuffer))
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package treemacs
  :after nerd-icons
  :config
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (treemacs-git-mode 'deferred)
  (pcase (cons (executable-find "git") treemacs-python-executable)
    (`(t . t) (treemacs-git-mode 'deferred))
    (`(t . nil) (treemacs-git-mode 'simple)))
  :bind
  (:map global-map
        ("M-0" . treemacs-select-window)
        ("C-x t t" . treemacs)))

(use-package treemacs-evil :after (treemacs evil))
(use-package treemacs-perspective :after (treemacs perspective))
#+end_src

* Development
This section configures tools for programming, including Tree-sitter for parsing, Eglot for LSP, linters, formatters, and debuggers.

** Tree-sitter & Parsing
#+begin_src emacs-lisp
(use-package treesit-auto
  :if (treesit-available-p)
  :hook (prog-mode . global-treesit-auto-mode)
  :custom (treesit-auto-langs '(bash c cpp css json python rust toml yaml)))

(use-package combobulate
  :if (treesit-available-p)
  :hook ((python-ts-mode js-ts-mode typescript-ts-mode) . combobulate-mode)
  :load-path ("~/.config/emacs/lisp/combobulate"))
#+end_src

** LSP, Diagnostics, and Formatting
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :hook ((c-ts-mode c++-ts-mode python-ts-mode) . eglot-ensure)
  :custom
  (eglot-events-buffer-size 0) ; Disable logging for performance
  (eglot-connect-timeout 20)
  (eglot-autoshutdown t)
  :config
  (add-to-list 'eglot-server-programs '((c-ts-mode c++-ts-mode) . ("clangd")))
  (add-to-list 'eglot-server-programs '(python-ts-mode . ("pyright-langserver" "--stdio"))))

(use-package eglot-booster
  :vc (:url "https://github.com/jdtsmith/eglot-booster"
       :branch "master")
  :after eglot
  :config
  (eglot-booster-mode 1))

(use-package flymake
  :ensure nil
  :hook (eglot-managed-mode . flymake-mode)
  :bind (("C-c f n" . flymake-goto-next-error)
         ("C-c f p" . flymake-goto-prev-error))
  :custom (flymake-no-changes-timeout 0.5))

(use-package apheleia
  :hook (prog-mode . apheleia-mode))

(use-package eldoc
  :ensure nil
  :init (global-eldoc-mode 1))
#+end_src

** Debugging
#+begin_src emacs-lisp
(use-package dape
  :commands dape
  :custom (dape-key-prefix "\C-c d"))
#+end_src

** Code Folding
#+begin_src emacs-lisp
(use-package hideshow
  :ensure nil
  :hook (prog-mode . hs-minor-mode)
  :bind (("C-c h t" . hs-toggle-hiding)
         ("C-c h H" . hs-hide-all)
         ("C-c h S" . hs-show-all)))

(use-package treesit-fold
  :if (treesit-available-p)
  :hook (prog-mode . treesit-fold-mode))
#+end_src

* Snippets
This section configures the YASnippet engine and its integration with the completion framework.

#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs
        (list (expand-file-name "snippets" user-emacs-directory)))
  ;; Create the custom snippets directory if it doesn't exist
  (unless (file-directory-p (car yas-snippet-dirs))
    (make-directory (car yas-snippet-dirs) t))
  (yas-reload-all))

(use-package yasnippet-snippets
  :after yasnippet)

(use-package yasnippet-capf
  :ensure nil
  :after (yasnippet cape)
  :config
  ;; This function is added to `completion-at-point-functions` in the Cape setup.
  ;; It allows snippets to appear as candidates in the Corfu completion popup.
  (setq yasnippet-capf-yas-trigger-as-primary-key t))

(use-package consult-yasnippet
  :after (consult yasnippet)
  :config
  ;; This package provides a Consult interface for searching and inserting snippets.
  ;; The keybinding is set in the "General Keybindings" section.
  (setq consult-yasnippet-category-icon-alist
        '((t . "»")
          ("Emacs Lisp" . "λ")
          ("Text" . "¶")
          ("Org" . "★")
          ("Python" . "🐍"))))
#+end_src

* Org Mode

** Directory and Path Setup
#+begin_src emacs-lisp
(defvar my/org-directory "~/org/"
  "Base directory for all org files.")

(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory)
  "Directory for org-roam files.")

(defvar my/org-downloads-directory (expand-file-name "downloads/" my/org-directory)
  "Directory for org-download files.")

(defvar my/org-noter-directory (expand-file-name "noter/" my/org-directory)
  "Directory for org-noter files.")

(defvar my/org-archive-directory (expand-file-name "archive/" my/org-directory)
  "Directory for archived org files.")

;; Create necessary directories
(dolist (dir (list my/org-directory
                   my/org-roam-directory
                   my/org-downloads-directory
                   my/org-noter-directory
                   my/org-archive-directory
                   (expand-file-name "attachments/" my/org-directory)
                   (expand-file-name "projects/" my/org-directory)
                   (expand-file-name "reviews/" my/org-directory)
                   (expand-file-name "backups/" my/org-directory)))
  (unless (file-directory-p dir)
    (make-directory dir t)))
#+end_src

** Core Org Setup
A comprehensive configuration for Org as a life-management system.

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode)
         (org-mode . auto-fill-mode)
         (org-mode . flyspell-mode))

  :custom
  ;; Basic settings
  (org-directory my/org-directory)
  (org-default-notes-file (expand-file-name "inbox.org" my/org-directory))
  (org-agenda-files (list my/org-directory))
  (org-archive-location (concat my/org-archive-directory "%s_archive::"))

  (org-startup-folded 'overview)
  (org-ellipsis " ⤵")
  (org-hide-emphasis-markers t)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-confirm-babel-evaluate nil)
  (org-pretty-entities t)
  (org-startup-with-inline-images t)
  (org-startup-with-latex-preview t)

  ;; Source blocks
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
  (org-src-window-setup 'current-window)
  (org-edit-src-content-indentation 0)
  (org-confirm-babel-evaluate nil)

  (org-todo-keywords
   '((sequence "☛ TODO(t)" "⚡ NEXT(n)" "🔄 PROG(p)" "⏳ WAIT(w@/!)"
               "|" "✅ DONE(d!)" "❌ CANCELLED(c@)")
     (sequence "📋 PLAN(P)" "🔍 RESEARCH(R)" "📝 DRAFT(D)"
               "|" "📤 PUBLISHED(u)" "🗑 TRASH(T)")
     (sequence "🎯 GOAL(G)" "🚀 ACTIVE(A)" "⏸ PAUSED(x)"
               "|" "🏆 ACHIEVED(a)" "🚫 DROPPED(X)")))
  (org-todo-keyword-faces
   '(("☛ TODO" . (:foreground "#fb4934" :weight bold))
     ("⚡ NEXT" . (:foreground "#fabd2f" :weight bold))
     ("🔄 PROG" . (:foreground "#83a598" :weight bold))
     ("⏳ WAIT" . (:foreground "#d3869b" :weight bold))
     ("✅ DONE" . (:foreground "#b8bb26" :weight bold))
     ("❌ CANCELLED" . (:foreground "#928374" :weight bold))
     ("📋 PLAN" . (:foreground "#8ec07c" :weight bold))
     ("🔍 RESEARCH" . (:foreground "#fe8019" :weight bold))
     ("📝 DRAFT" . (:foreground "#d65d0e" :weight bold))
     ("📤 PUBLISHED" . (:foreground "#689d6a" :weight bold))
     ("🗑 TRASH" . (:foreground "#928374" :weight bold))
     ("🎯 GOAL" . (:foreground "#b16286" :weight bold))
     ("🚀 ACTIVE" . (:foreground "#d79921" :weight bold))
     ("⏸ PAUSED" . (:foreground "#7c6f64" :weight bold))
     ("🏆 ACHIEVED" . (:foreground "#689d6a" :weight bold))
     ("🚫 DROPPED" . (:foreground "#665c54" :weight bold))))

  :config
  ;; Load babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))

  ;; Add structure templates for easy source block insertion
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Org Roam
This is the core of the setup, turning Org Roam into a visual and interactive knowledge graph.

#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :init
  (setq org-roam-directory my/org-roam-directory)
  (setq org-roam-db-location (expand-file-name "org-roam.db" user-emacs-directory))
  ;; Keybindings are defined under the "General Keybindings" section using general.el
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:20}" 'face 'org-tag)))
  :config
  (org-roam-db-autosync-mode)

  ;; Configure the backlinks buffer to act like TheBrain's connection panel
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; Templates focused on rapid "thought" creation
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+created: %U\n#+modified: %U\n#+filetags:\n\n")
           :unnarrowed t)
          ("p" "project" plain "* Goal\n\n%?\n\n* Tasks\n\n* Notes\n"
           :target (file+head "project-${slug}.org"
                              "#+title: Project: ${title}\n#+created: %U\n#+modified: %U\n#+filetags: project\n\n")
           :unnarrowed t)))

  ;; Hook to update modification times, keeping the graph fresh
  (defun my/org-roam-update-modified-timestamp ()
    "Update modified timestamp in org-roam files before saving."
    (when (and (eq major-mode 'org-mode) (org-roam-file-p))
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^#\\+modified:" nil t)
          (delete-region (point) (line-end-position))
          (insert (format " %s" (format-time-string "[%Y-%m-%d %a %H:%M]")))))))
  (add-hook 'before-save-hook #'my/org-roam-update-modified-timestamp))

(use-package org-roam-ui
  :after org-roam
  :commands (org-roam-ui-mode org-roam-ui-open)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t)) ; Key change: Open the graph on startup

(use-package consult-org-roam
  :after (consult org-roam)
  :init (consult-org-roam-mode 1))
#+end_src

** Org Capture
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :custom
  (org-capture-templates
   '(("t" "Task" entry (file+headline "~/org/inbox.org" "Tasks")
      "* ☛ TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n")

     ("n" "Note" entry (file+headline "~/org/inbox.org" "Notes")
      "* %? :note:\n  :PROPERTIES:\n  :CREATED: %U\n  :SOURCE: \n  :END:\n")

     ("j" "Journal" entry (file+datetree "~/org/journal.org")
      "* %U %?\n")

     ("m" "Meeting" entry (file+headline "~/org/inbox.org" "Meetings")
      "* Meeting: %? :meeting:\n  :PROPERTIES:\n  :CREATED: %U\n  :ATTENDEES: \n  :END:\n** Agenda\n** Notes\n** Action Items\n")

     ("p" "Project" entry (file+headline "~/org/projects.org" "Projects")
      "* 📋 PLAN %? :project:\n  :PROPERTIES:\n  :CREATED: %U\n  :GOAL: \n  :DEADLINE: \n  :END:\n** Goals\n** Tasks\n*** ☛ TODO Define project scope\n** Resources\n** Notes\n")

     ("b" "Book" entry (file+headline "~/org/reading.org" "Reading List")
      "* %? :book:read:\n  :PROPERTIES:\n  :CREATED: %U\n  :AUTHOR: \n  :GENRE: \n  :PAGES: \n  :STARTED: \n  :FINISHED: \n  :RATING: \n  :END:\n** Summary\n** Key Takeaways\n** Quotes\n")

     ("h" "Habit" entry (file+headline "~/org/habits.org" "Habits")
      "* ☛ TODO %? :habit:\n  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n  :PROPERTIES:\n  :CREATED: %U\n  :STYLE: habit\n  :END:\n")

     ("g" "Goal" entry (file+headline "~/org/goals.org" "Goals")
      "* 🎯 GOAL %? :goal:\n  DEADLINE: %(org-read-date nil nil \"+1y\")\n  :PROPERTIES:\n  :CREATED: %U\n  :TYPE: \n  :END:\n** Why this goal?\n** Success criteria\n** Action steps\n*** ☛ TODO Break down into smaller tasks\n** Resources needed\n** Potential obstacles\n** Progress tracking\n"))))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :custom
  (org-agenda-window-setup 'current-window)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-span 'week)
  (org-agenda-start-on-weekday nil)
  (org-agenda-start-day "today")
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-include-deadlines t)
  (org-agenda-block-separator ?─)
  (org-agenda-compact-blocks t)
  (org-agenda-start-with-log-mode t)
  (org-agenda-log-mode-items '(closed clock state))
  (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2))
  (org-agenda-time-grid '((daily today require-timed)
                          (800 1000 1200 1400 1600 1800 2000)
                          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-current-time-string "◀── now ─────────────────────────────────────────────────")

  :config
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)
                        (org-agenda-overriding-header "📅 Agenda")))
            (todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))
            (tags-todo "project/🚀 ACTIVE" ((org-agenda-overriding-header "🚀 Active Projects")))
            (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "🔥 High Priority")))
            (todo "⏳ WAIT" ((org-agenda-overriding-header "⏳ Waiting On")))
            (tags-todo "+habit" ((org-agenda-overriding-header "🔄 Habits")))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects")))))

          ("n" "Next Tasks"
           ((todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))))

          ("w" "Work Context"
           ((tags-todo "@work/⚡ NEXT" ((org-agenda-overriding-header "💼 Work Next")))
            (tags-todo "@work/☛ TODO" ((org-agenda-overriding-header "💼 Work Tasks")))
            (tags-todo "@work+project/🚀 ACTIVE" ((org-agenda-overriding-header "💼 Work Projects")))))

          ("h" "Home Context"
           ((tags-todo "@home/⚡ NEXT" ((org-agenda-overriding-header "🏠 Home Next")))
            (tags-todo "@home/☛ TODO" ((org-agenda-overriding-header "🏠 Home Tasks")))))

          ("p" "Projects Overview"
           ((tags "project" ((org-agenda-overriding-header "📋 All Projects")))))

          ("g" "Goals Review"
           ((tags-todo "goal" ((org-agenda-overriding-header "🎯 Goals")))))

          ("r" "Review"
           ((agenda "" ((org-agenda-span 'day) (org-agenda-overriding-header "📅 Today")))
            (todo "✅ DONE" ((org-agenda-overriding-header "✅ Completed Today")
                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottoday))))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects"))))))))

(use-package org-super-agenda
  :after org-agenda
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
        '((:name "🔥 Overdue" :deadline past)
          (:name "📅 Today" :time-grid t :scheduled today)
          (:name "⚡ Next" :todo "⚡ NEXT")
          (:name "🔴 Important" :priority "A")
          (:name "📋 Projects" :tag "project")
          (:name "🏠 Home" :tag "@home")
          (:name "💼 Work" :tag "@work")
          (:name "⏳ Waiting" :todo "⏳ WAIT")
          (:name "📚 Reading" :tag "read")
          (:name "🎯 Goals" :tag "goal")
          (:name "🔄 Habits" :tag "habit")
          (:discard (:anything t)))))
#+end_src

** Org Extensions
#+begin_src emacs-lisp
(use-package org-download
  :after org
  :custom
  (org-download-method 'directory)
  (org-download-image-dir (expand-file-name "downloads/" org-directory))
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  (org-download-image-attr-list '("#+ATTR_HTML: :width 80%" "#+ATTR_ORG: :width 400")))

(use-package org-noter
  :after org
  :custom
  (org-noter-notes-search-path (list my/org-noter-directory)))

(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))

;;;; --- Modern UI for Org Mode (Doom-inspired) ---

(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  ;; This package provides a cleaner, more modern look for Org buffers.
  (setq
   ;; Hide the leading stars, replacing them with a subtle character.
   org-modern-hide-stars "· "

   ;; Customize the headline bullets. More levels can be added.
   org-modern-star '("◉" "○" "◈" "◇" "◆" "▷")

   ;; Use more pleasant bullets for lists.
   org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))

   ;; Prettify Org table styles to be more minimal.
   org-modern-table-vertical 1
   org-modern-table-horizontal 0.1

   ;; Prettify block delimiters. The second element is the end marker.
   org-modern-block-name
   '(("src" "»" "«")
     ("example" "»" "«")
     ("quote" "❝" "❞"))

   ;; Style TODO keywords directly in the headline.
   ;; This complements the main `org-todo-keyword-faces`.
   org-modern-todo-faces
   '(("☛ TODO" . (:foreground "#fb4934" :weight bold))
     ("⚡ NEXT" . (:foreground "#fabd2f" :weight bold))
     ("🔄 PROG" . (:foreground "#83a598" :weight bold))
     ("⏳ WAIT" . (:foreground "#d3869b" :weight bold))
     ;; Use a background for completed states to make them stand out.
     ("✅ DONE" . (:background "#b8bb26" :foreground "#3c3836" :weight bold))
     ("❌ CANCELLED" . (:strike-through t :foreground "#928374"))
     ("🎯 GOAL" . (:foreground "#b16286" :weight bold :box t))
     ("🏆 ACHIEVED" . (:background "#689d6a" :foreground "#3c3836" :weight bold :box t)))

   ;; Style tags with a subtle box, inspired by Doom Emacs.
   org-modern-tag-faces
   `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#504945")))))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  ;; This package toggles the visibility of emphasis markers and links
  ;; when the point is on them, providing a cleaner look while editing.
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t)
  ;; Add a keybinding to manually toggle all markers on/off.
  ;; Useful for presentations or a distraction-free reading mode.
  (general-define-key
   :keymaps 'org-mode-map
   "C-c C-x a" #'org-appear-toggle))
#+end_src

* Spelling
#+begin_src emacs-lisp
(use-package flyspell
  :ensure nil
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :config
  (setq ispell-program-name "hunspell"
        ispell-dictionary "en_US"))
#+end_src

* Scrolling
#+begin_src emacs-lisp
(use-package ultra-scroll
  :init
  (setq scroll-conservatively 3 ; or whatever value you prefer, since v0.4
        scroll-margin 0)        ; important: scroll-margin>0 not yet supported
  :config
  (ultra-scroll-mode 1))
#+end_src
* General Keybindings
This section defines the leader-key based command system using `general.el`.

#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
  (general-evil-setup t)

  ;; Define Leader Keys
  (general-create-definer global-leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer local-leader-key
    :states '(normal visual)
    :keymaps 'override
    :prefix "SPC m")

  ;; --- Global Leader Bindings ---
  (global-leader-key
    ;; Core
    "SPC" '(execute-extended-command :wk "M-x")
    "q q" '(save-buffers-kill-terminal :wk "Quit Emacs")
    "q r" '(ar/reload-config :wk "Reload Config")

    ;; Buffers
    "b" '(:ignore t :wk "Buffer")
    "b b" '(consult-buffer :wk "Switch buffer")
    "b k" '(kill-current-buffer :wk "Kill buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b i" '(ibuffer :wk "Ibuffer")

    ;; Files
    "f" '(:ignore t :wk "File")
    "f f" '(find-file :wk "Find file")
    "f s" '(save-buffer :wk "Save file")
    "f r" '(consult-recent-file :wk "Recent files")
    "f d" '(dired :wk "Dired")

    ;; Project
    "p" '(:ignore t :wk "Project")
    "p p" '(project-switch-project :wk "Switch Project")
    "p f" '(project-find-file :wk "Find File in Project")
    "p s" '(consult-ripgrep :wk "Search in Project")

    ;; Snippets
    "s" '(:ignore t :wk "Snippets")
    "s i" '(consult-yasnippet :wk "Insert Snippet")

    ;; Windows
    "w" '(:ignore t :wk "Window")
    "w s" '(evil-window-split :wk "Split Below")
    "w v" '(evil-window-vsplit :wk "Split Right")
    "w d" '(evil-window-delete :wk "Delete Window")
    "w h" '(evil-window-left :wk "Window Left")
    "w j" '(evil-window-down :wk "Window Down")
    "w k" '(evil-window-up :wk "Window Up")
    "w l" '(evil-window-right :wk "Window Right")
    "w o" '(delete-other-windows :wk "Delete Other Windows")

    ;; Org
    "o" '(:ignore t :wk "Org")
    "o a" '(org-agenda :wk "Agenda")
    "o c" '(org-capture :wk "Capture")
    "o r f" '(org-roam-node-find :wk "Roam Find")
    "o r i" '(org-roam-node-insert :wk "Roam Insert"))

  ;; --- Evil State Bindings ---
  (general-define-key :states 'normal
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line
    "C-d" 'evil-scroll-down
    "C-u" 'evil-scroll-up)

  ;; --- Corfu Bindings ---
  (general-define-key :keymaps 'corfu-map
    "TAB" 'corfu-next
    "S-TAB" 'corfu-previous
    ;; Add yasnippet expansion to the Corfu map.
    ;; This allows expanding a snippet by pressing TAB when it's selected.
    [remap corfu-insert] #'yas-expand))
#+end_src
