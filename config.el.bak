;; Ensure lexical binding is enabled for all Elisp files.
;; This helps with performance and prevents common issues.
;; This line is already in the header, but good to reiterate.
;; (setq lexical-binding t)

(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Enable use-package support for Elpaca and ensure packages by default.
(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq use-package-always-ensure t))

;; Wait for Elpaca to be ready before proceeding with other configurations.
;; This ensures all packages declared with :ensure t are installed.
;;(elpaca-wait)

;; Restore garbage collection threshold to a more reasonable value after startup.
;; This value can be adjusted based on your system's memory and usage.
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold (* 50 1024 1024)))) ; 50 MB

;; Reload config function
(defun ar/reload-config ()
  "Reload the Emacs configuration."
  (interactive)
  ;; Assuming config.org is the main configuration file and this config.el is tangled from it.
  ;; If config.el is the primary config, change to: (load-file (expand-file-name "config.el" user-emacs-directory))
  (let ((config-file (expand-file-name "config.org" user-emacs-directory)))
    (if (file-exists-p config-file)
        (progn
          (message "Reloading Emacs configuration from config.org...")
          (org-babel-load-file config-file)
          (message "Configuration reloaded successfully!"))
      (error "Configuration file %s not found" config-file))))

;; Bind ar/reload-config globally
(global-set-key (kbd "C-c r") 'ar/reload-config)

;; Disable native compile warnings
(setq native-comp-async-report-warnings-errors nil)

;; Disable the scratch buffer on startup.
(setq initial-buffer-choice nil)

;; Set default-directory to user-emacs-directory
(setq default-directory user-emacs-directory)

;; Remove the welcome message in the *Messages* buffer
(setq initial-scratch-message nil)

;; Disable bell
(setq ring-bell-function #'ignore)

;; Show column number
(column-number-mode 1)

;; Highlight current line
(global-hl-line-mode 1)

;; Enable visual-line-mode for word wrapping in all buffers.
(global-visual-line-mode 1)

;; Ensure smooth scrolling
(setq scroll-step 1
      scroll-conservatively 100000
      scroll-preserve-screen-position t)

;; Disable resize-mini-windows to prevent minibuffer from resizing
(setq resize-mini-windows nil)

;; Disable tooltips
(setq tooltip-delay 0
      tooltip-hide-delay 0
      tooltip-mode nil)

;; Hide the echo area message after a short delay
(setq message-log-max 100
      message-truncate-lines t)

;; Show parentheses matching
(show-paren-mode 1)

(use-package general
  :demand t 
  :config
  (general-evil-setup t) ; Integrate with Evil mode
  ;; Define Leader Keys
  (general-create-definer global-leader
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer local-leader
    :states '(normal visual)
    :keymaps 'override
    :prefix "SPC m")

  ;; Buffer Management Keybindings (Doom-like)
  (global-leader
   ;; Core
   "SPC" '(execute-extended-command :wk "M-x")
   "q q" '(save-buffers-kill-terminal :wk "Quit Emacs")
   "q r" '(ar/reload-config :wk "Reload Config")
   
   "b" '(:ignore t :wk "Buffer")
   "b" '(consult-buffer :wk "switch buffer") ; Switch buffer
   "d" '(kill-current-buffer :wk "kill buffer") ; Kill current buffer
   "D" '(ibuffer-do-kill-buffers :wk "kill marked buffers") ; Kill marked buffers in ibuffer
   "i" '(ibuffer :wk "open ibuffer") ; Open ibuffer
   "n" '(next-buffer :wk "next buffer") ; Next buffer
   "p" '(previous-buffer :wk "previous buffer") ; Previous buffer
   "s" '(save-buffer :wk "save buffer") ; Save current buffer
   "k" '(kill-buffer :wk "kill buffer (current)") ; Alias for kill-current-buffer
   "r" '(revert-buffer :wk "revert buffer"))) ; Revert buffer
    
  

(use-package hide-mode-line :demand t)

(defun ar/set-font-faces ()
  "Set all font faces for the current frame."
  ;; Set default, fixed-pitch, and variable-pitch faces to JetBrainsMono Nerd Font
  ;; Height 145 corresponds to 14.5pt. Adjust as needed.
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'medium)
  ;; Apply italic slant to comments and keywords for visual distinction
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
  (set-language-environment "UTF-8")
  (set-fontset-font t 'unicode "JetBrainsMono Nerd Font" nil 'append)
  (set-fontset-font t 'symbol "JetBrainsMono Nerd Font" nil 'append))


(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame) (with-selected-frame frame (ar/set-font-faces))))
  (ar/set-font-faces))(setq font-lock-maximum-decoration t) ; For better syntax highlighting

(global-display-line-numbers-mode -1)
(setq-default display-line-numbers-grow-only t
              display-line-numbers-width 2)

;; Enable line numbers for some modes
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))

(use-package nerd-icons
  :if (display-graphic-p)
  :demand t
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t))

(use-package catppuccin-theme
  :demand t
  :config
  ;; Set the desired flavor before loading the theme for optimal startup.
  (setq catppuccin-flavor 'mocha)
  (load-theme 'catppuccin t))

(use-package doom-modeline
  :demand t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 28)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-project-detection 'auto)
  (doom-modeline-lsp t)
  (doom-modeline-minor-modes nil))

(use-package solaire-mode
  :init (solaire-global-mode)
  :config
  ;; Differentiate popups from "real" buffers
  (add-hook 'completion-list-mode-hook #'solaire-mode)
  (add-hook 'which-key-mode-hook #'solaire-mode)
  (add-hook 'help-mode-hook #'solaire-mode)
  (add-hook 'info-mode-hook #'solaire-mode)
  (add-hook 'org-src-mode-hook #'solaire-mode)
  (advice-add 'vertico--display-candidates :after
              (lambda (&rest _)
                (when (minibufferp)
                  (with-selected-window (minibuffer-window) (solaire-mode +1))))))

(use-package which-key
  :init (which-key-mode 1)
  :custom
  (which-key-idle-delay 0.1)
  (which-key-separator " â†’ ")
  (which-key-popup-type 'minibuffer))

(use-package dashboard
  :init (dashboard-setup-startup-hook)
  :config
  (add-hook 'dashboard-mode-hook #'hide-mode-line-mode)
  :custom
  (initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
  (dashboard-center-content t)
  (dashboard-items '((recents . 5) (projects . 5) (agenda . 5)))
  (dashboard-startup-banner 'logo)
  (dashboard-display-icons-p t)
  (dashboard-icon-type 'nerd-icons))

(use-package evil
  :demand t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

;; Evil Collection provides better integration of Evil with many Emacs packages.
(use-package evil-collection
  :after evil ; Ensure evil is loaded before evil-collection
  :config
  (evil-collection-init))

;; Evil Surround for Vim-like text surrounding operations (e.g., changing quotes).
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))

;; Evil Commentary for Vim-like commenting/uncommenting.
(use-package evil-nerd-commenter :after evil)

;; Evil Args for Vim-like text objects for function arguments.
(use-package evil-args :after evil)

(use-package vertico
  :demand t
  :init(vertico-mode) ; Enable Vertico globally
  :custom
  (vertico-cycle t) ; Cycle through candidates at the end/beginning of the list
  (vertico-resize t) ; Dynamically resize the completion window based on candidates
  (vertico-count 10)) ; Show 10 candidates by default
  

(use-package orderless
  :demand t
  :config
  ;; Set completion styles to use orderless first, then basic matching.
  (setq completion-styles '(orderless basic)
        ;; Disable category-specific overrides for simpler setup,
        ;; unless specific behavior is desired for certain categories.
        completion-category-defaults nil
        ;; Example: Use partial-completion for file paths
        completion-category-overrides '((file (styles . (partial-completion))))))
  

(use-package marginalia
  :after vertico ; Ensure it loads after Vertico
  :init
  (marginalia-mode)) ; Enable Marginalia globally
  ; :custom
  ; ;; Use both heavy and light annotators for comprehensive annotations.
  ; (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light))
  ; )

(use-package corfu
  :demand t
  :init
  (global-corfu-mode) ; Enable Corfu globally for all modes
  :custom
  (corfu-cycle t) ; Cycle through candidates when reaching end/beginning
  (corfu-auto t) ; Automatically open completion popup
  (corfu-auto-delay 0.1) ; Delay for auto-completion popup in seconds
  (corfu-quit-at-end t) ; Quit popup when no more candidates are available
  (corfu-popupinfo-delay 0.5) ; Delay for displaying detailed popup info (e.g., function docs)
  (corfu-preselect-first nil) ; Do not preselect the first candidate
  :bind
  ;; Custom keybindings for Corfu for easier navigation and interaction.
  ("M-SPC" . corfu-insert-separator) ; Insert separator for multi-word completion
  ("C-SPC" . corfu-map) ; Prefix key for various Corfu commands
  ;; Standard completion keybindings within Corfu popup
  ("M-RET" . corfu-insert) ; Insert selected candidate
  ("C-n" . corfu-next)     ; Next candidate
  ("C-p" . corfu-previous) ; Previous candidate
  ("C-d" . corfu-delete-backward-word) ; Delete backward word in completion
  ("C-f" . corfu-next-page) ; Next page of candidates
  ("C-b" . corfu-previous-page)) ; Previous page of candidates
  

(use-package nerd-icons-corfu
  :after (corfu nerd-icons)
  :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-completion
  :after (vertico nerd-icons) ; Ensure it loads after Vertico and Nerd Icons
  :config
  (nerd-icons-completion-mode 1)) ; Enable Nerd Icons for completion UIs

(use-package cape
  :demand t
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)  
  (add-to-list 'completion-at-point-functions #'cape-elisp-block))

(use-package consult
  :demand t
  :init
  ;; Set up some common keybindings for Consult commands.
  (setq consult-line-start-hint t) ; Show line numbers in `consult-line`
  :bind (
         ("C-s" . consult-line)         ; Search in current buffer (replaces default isearch)
         ("C-x b" . consult-buffer)     ; Switch buffer (replaces default `switch-to-buffer`)
         ("C-x C-f" . consult-find)     ; Find file (replaces default `find-file`)
         ("C-M-g" . consult-grep)       ; Grep files (e.g., using `grep` or `rg`)
         ("M-y" . consult-yank-pop)     ; Yank from kill ring
         ("M-g M-g" . consult-goto-line)) ; Go to line number
         
  :config
  ;; Customize Consult commands for preview behavior.
  (consult-customize
   consult-ripgrep
   consult-grep
   consult-bookmark
   consult-recent-file
   consult--source-file-register
   consult--source-bookmark
   consult--source-recent-file
   consult--source-buffer
   consult--source-project-buffer
   :preview-key (kbd "M-.") ; Preview candidate with M-.
   :preview-key (kbd "M-,"))) ; Another key for preview
   
  

(use-package embark
  :demand t
  :bind
  (("C-." . embark-act)         ; Universal action key: acts on current target
   ("C-," . embark-dwim)        ; Do What I Mean: context-aware action
   ("C-h B" . embark-bindings)) ; Show keybindings for current Embark target
  :init
  ;; Use a minimal indicator for Embark to keep the minibuffer clean.
  (setq embark-indicators '(embark-minimal-indicator)))
  

(use-package embark-consult
  :after (embark consult) ; Ensure it loads after Embark and Consult
  :config)
  ;; This simply loads the package and enables its integration.
  ;; No further configuration is typically needed here, as it primarily
  ;; provides `consult` commands as `embark` actions.
  

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook ((dired-mode . dired-omit-mode)
         (dired-mode . dired-hide-details-mode))
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (dired-dwim-target t)
  (dired-recursive-copies 'always)
  (dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$"))
  

(use-package dirvish
  :after (dired nerd-icons)
  :demand t
  :init(dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries
   '(("h" "~/" "Home")
     ("d" "~/Downloads/" "Downloads")
     ("D" "~/Documents/" "Documents")
     ("p" "~/Projects/" "Projects")
     ("/" "/" "Root")))
  :config
  (setq dirvish-buffer-name-format "%s <dirvish>")
  (setq dirvish-attributes
        '(vc-state subtree-state nerd-icons collapse git-msg file-time file-size)
        dirvish-side-attributes
        '(vc-state nerd-icons collapse file-size))
  (setq dirvish-hide-details t
        dirvish-omit-mode t
        dirvish-large-directory-threshold 20000)

  ;; Configure dirvish-side for a Yazi-like multi-pane layout
  (setq dirvish-side-width 0.3 ; Adjust width for side panes (e.g., 30% of frame width)
        dirvish-side-height 0.5 ; Adjust height for preview pane (e.g., 50% of side pane height)
        dirvish-side-show-preview t ; Enable preview in side window
        dirvish-side-follow-file t ; Follow file in preview
        dirvish-side-follow-dir t) ; Follow directory in side window

  ;; Hide header and footer for a cleaner, more Yazi-like appearance
  (setq dirvish-hide-details t ; Already set in :init, but good to ensure
        dirvish-omit-mode t    ; Already set in :init, but good to ensure
        dirvish-show-header nil
        dirvish-show-footer nil)

  ;; Set default sorting method (e.g., by name, case-insensitive)
  (setq dirvish-sort-mode '(name-ascending case-fold-search))

  ;; Configure preview. Dirvish uses `vterm` for terminal previews or `image-mode` etc.
  ;; Ensure you have necessary external tools installed for rich previews (e.g., `chafa` for images in terminal).
  ;; For text files, Emacs handles it natively.
  (add-hook 'dirvish-mode-hook
            (lambda ()
              (setq-local auto-revert-mode t)))) ; Auto-revert preview buffers
  

(setq grep-program "rg"
      grep-command "rg -Hn --no-heading --color=always ")

(setq find-program "fd")

(use-package nerd-icons-ibuffer
  :after (ibuffer nerd-icons)
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode) 
  :config
  (setq ibuffer-formats
        '((mark
           (name 18 18 :left :elide)
           (size 9 -1 :right)
           (mode 16 16 :left :elide)
           (read-only 4 4 :tag " Ro")
           (modified 4 4 :tag " Mo")
           (vc-status 4 4 :tag " Vc")
           (filename 50 0 :left :elide))
          ;; A more compact format with icons for regular files, which is similar to bufler's aesthetic.
          (mark
           (name 18 18 :left :elide)
           (mode 16 16 :left :elide)
           (size 9 -1 :right)
           (filename 50 0 :left :elide nerd-icons-ibuffer--format-name-with-icon))))) ; Use icon formatter
         

;; --- Ibuffer Configuration (Mimicking Bufler) ---
;; Configures Ibuffer to provide a buffer management experience similar to Bufler,
;; with enhanced grouping, sorting, and cleaner display.
(use-package ibuffer
  :after (nerd-icons-ibuffer)
  :demand t
  :init
  ;; Automatically use ibuffer when listing buffers (e.g., C-x C-b).
  ;; This ensures a consistent experience with the enhanced ibuffer setup.
  (setq ibuffer-always-use-buffered-mode t)

  ;; Set the default sorting mode for ibuffer. 'recency' is often preferred
  ;; for a more dynamic and relevant buffer list, similar to Bufler's common use.
  (setq ibuffer-default-sorting-mode 'recency)

  ;; Do not show empty groups in ibuffer, which helps in maintaining a cleaner view.
  (setq ibuffer-show-empty-groups nil)

  (add-to-list 'ibuffer-hidden-buffers "^\\*.*\\*$")
  ;; Custom saved filter groups to categorize buffers. This provides a
  ;; structured, "Bufler-like" view of your buffers.
  (setq ibuffer-saved-filter-groups
        '(("Default"
           ;; Group buffers by project using a predicate that checks for Git/VC root directories.
           ("Projects" (mode . project-mode) (predicate . (lambda (b) (vc-root-dir default-directory))))
           ;; Group by major programming modes for easy navigation.
           ("Programming" (or (mode . prog-mode) (mode . emacs-lisp-mode) (mode . python-mode) (mode . js-mode) (mode . css-mode) (mode . html-mode) (mode . org-mode)))
           ;; Group text-related buffers.
           ("Text" (mode . text-mode))
           ;; Explicitly group Org Mode files.
           ("Org Mode" (mode . org-mode))
           ;; Group Magit buffers.
           ("Magit" (mode . magit-mode))
           ;; Group special Emacs buffers (e.g., *Messages*, *scratch*).
           ("Special" (or (name . "^\\*") (mode . help-mode) (mode . compilation-mode) (mode . scratch-mode)))
           ;; Group Dired buffers.
           ("Dired" (mode . dired-mode))
           ;; Catch-all for other buffers not explicitly categorized.
           ("Miscellaneous" (or (not (mode . prog-mode)) (not (mode . emacs-lisp-mode)) (not (mode . python-mode)) (not (mode . js-mode)) (not (mode . css-mode)) (not (mode . html-mode)) (not (mode . org-mode)) (not (mode . magit-mode)) (not (name . "^\\*")) (not (mode . help-mode)) (not (mode . compilation-mode)) (not (mode . scratch-mode)) (not (mode . dired-mode)))))))
           

  :config
    ;; Enable expert mode for advanced filtering and grouping features,
  ;; allowing for more granular control over buffer organization.
  (ibuffer-expert-mode 1)


  ;; Custom keybindings for ibuffer mode map to mimic some common Bufler/Doom actions.
  ;; These bindings enhance navigation and manipulation within the ibuffer list.
  (define-key ibuffer-mode-map (kbd "s") 'ibuffer-do-save-buffer)    ; Save marked buffers
  (define-key ibuffer-mode-map (kbd "k") 'ibuffer-do-kill-buffer)    ; Kill marked buffers
  (define-key ibuffer-mode-map (kbd "d") 'ibuffer-do-delete)      ; Mark buffer for deletion
  (define-key ibuffer-mode-map (kbd "x") 'ibuffer-do-delete)      ; Alias for marking for deletion
  (define-key ibuffer-mode-map (kbd "RET") 'ibuffer-visit-buffer) ; Visit selected buffer
  (define-key ibuffer-mode-map (kbd "q") 'quit-window)            ; Quit ibuffer window
  (define-key ibuffer-mode-map (kbd "r") 'ibuffer-revert-buffer)  ; Revert marked buffers
  (define-key ibuffer-mode-map (kbd "g") 'ibuffer-update))         ; Refresh ibuffer list
  

(defvar my/org-directory "~/org/"
  "Base directory for all org files.")

(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory)
  "Directory for org-roam files.")

(defvar my/org-downloads-directory (expand-file-name "downloads/" my/org-directory)
  "Directory for org-download files.")

(defvar my/org-noter-directory (expand-file-name "noter/" my/org-directory)
  "Directory for org-noter files.")

(defvar my/org-archive-directory (expand-file-name "archive/" my/org-directory)
  "Directory for archived org files.")

;; Create necessary directories
(dolist (dir (list my/org-directory
                   my/org-roam-directory
                   my/org-downloads-directory
                   my/org-noter-directory
                   my/org-archive-directory
                   (expand-file-name "attachments/" my/org-directory)
                   (expand-file-name "projects/" my/org-directory)
                   (expand-file-name "reviews/" my/org-directory)
                   (expand-file-name "backups/" my/org-directory)))
  (unless (file-directory-p dir)
    (make-directory dir t)))

(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook ((org-mode . org-indent-mode)
         (org-mode . visual-line-mode)
         (org-mode . auto-fill-mode))
  :config
  (setq org-directory my/org-directory
        org-default-notes-file (expand-file-name "inbox.org" my/org-directory)
        org-log-done 'time ; Log time when tasks are marked DONE
        org-return-follows-link t ; RET follows links
        org-src-fontify-natively t ; Better fontification for source blocks
        org-pretty-entities t ; Display LaTeX-like entities
        org-ellipsis " â¤µ" ; Custom ellipsis for folded headings
        org-cycle-separator-lines 2 ; Two blank lines between headings when cycling
        org-startup-indented t ; Start Org buffers indented
        org-startup-folded 'content ; Fold content by default
        org-hide-leading-stars t ; Hide leading stars for a cleaner look 
        org-confirm-babel-evaluate nil
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-preserve-indentation t))

(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (latex . t)
     (python . t)))
  
  (push '("conf-unix" . conf-unix) org-src-lang-modes))

(use-package org-tempo
  :ensure nil
  :after org
  :config
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
